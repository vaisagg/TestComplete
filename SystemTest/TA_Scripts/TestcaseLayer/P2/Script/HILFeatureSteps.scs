//USEUNIT StepDefinition
//USEUNIT CommonUtilities
//USEUNIT CommonFeatureUtils


var TestDataFile = Project["Path"]+"TestData\\TestData.xls";

function GivenOnlyOneSQCAvailable()
{
  return StepVerifyAvailableSQC(1,2);
}

function GivenNoTestHasHILThresholdDefinedinTDEF()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario15");
  var Assay = arrDrawers[0]["Item"]("Assay");
  
  return StepVerifyHILDisabledForAnAssay(Assay);
}

function WhenHILErrorSortAreaIsNotConfigured()
{ 
  return StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking");  
}

function WhenHILSettingIsConfigured()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "HILScenario15");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function WhenSampleAnalysisDidNotTriggerHIL()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario15");
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  //var   = dictColumn["Item"]("");  
  
  //Update analysis data
  if(!StepUpdateAnalysisData(SampleId,sCapStatus,sTubeType,iHvalue,iIvalue,iLvalue))
    return false;
    
  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Capped"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  if(!StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 60000))
    return false;   

  // Method to verify only 1 worklist entry is present in Worklist tab
} 


function ThenSampleIsSentToCHAndIsAspirated()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario15");
  var dictColumn=arrTestData[0];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in ASPIRATED status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
    
  //Method to verify Interference flags are not present for the sample - Method needs to be coded once the UI is available 
}

function ThenSampleGetsUnloadedToOutputTray()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario15");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to Output tray
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario15", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario15", "F");
    return false;  
  }
} 


function GivenTestHasHILThresholdDefinedinTDEF()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario01");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex)
} 


function WhenHILErrorSortAreaIsConfigured()
{
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  //Configure SH
  if (!StepVerifySortPanelActive("HILErrorSortPanel"))
  {  
    if(!StepStopAnalyzer("SH"))
      return false;
   
    if(!StepAddPanel("HILErrorSortPanel"))
      return false;

    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "HILErrorSortArea"))
      return false;
      
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
      
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//    if(!StepShutdownAnalyzer("SH"))
//      return false;  
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
  {
    return true;
  } 
} 

function WhenHILSettingIsConfiguredDefinitive()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "HILScenario01");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function WhenSampleAnalysisTriggerredDefinitiveHIL()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario01");
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  //var   = dictColumn["Item"]("");  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
 
  var iHvalue                = dictColumn["Item"]("H_enum");
  var iIvalue                = dictColumn["Item"]("I_enum");
  var iLvalue                = dictColumn["Item"]("L_enum");
  
  //Update analysis data
  if(!StepUpdateAnalysisData(SampleId,sCapStatus,sTubeType,iHvalue,iIvalue,iLvalue))
    return false;
    
  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Capped"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  if(!StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 60000))
    return false; 
    
  //Verify HIL entries for an assay in Worklist
  

}

function ThenSampleIsSentToCHAndIMAndIsAspirated()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario01");
  var dictColumn=arrTestData[0];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in ASPIRATED status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
    
  //Method to verify Interference flags are not present for the sample where HIL is not enabled- Method needs to be coded once the UI is available 
    
  
  
}

function ThenSampleIsFlaggedForVisionHILError()
{
  

} 

function ThenSampleGetsUnloadedToHILSortarea()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario01")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("OutputSampleID");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  //var aSampleStatus=SampleStatus["split"](";");
  var SampleLocation=dictColumn["Item"]("SampleLocation")
  
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario01")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
   
   //Verify sample unloading location
  
  if(!StepWaitForSampleStatus(SampleID, SampleStatus))
    return false;
    
 if(!StepVerifySampleLocationOnTrack(SampleID, SampleLocation))
    return false;
   
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers) 
    
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "HILScenario01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "HILScenario01", "F");
    return false;  
  }
} 


function GivenNoIMTestHasHILThresholdDefinedinTDEF()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario16");
  var Assay = arrDrawers[0]["Item"]("Assay");
  
  return StepVerifyHILDisabledForAnAssay(Assay);
}


function WhenCHAnalyzerNotAvailable()
{
 return StepDisableCHAnalyzer()  
} 

function WhenHILSettingIsConfiguredDefinitiveQuestionableRunAll()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "HILScenario16");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);

} 

function WhenSampleAnalysisTriggerredNoHIL()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario16");
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  //var   = dictColumn["Item"]("");  
//  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
//  var dictColumn=arrTestData[0];
 
//  var iHvalue                = dictColumn["Item"]("H_enum");
//  var iIvalue                = dictColumn["Item"]("I_enum");
//  var iLvalue                = dictColumn["Item"]("L_enum");
  
  //Update analysis data
  if(!StepUpdateAnalysisData(SampleId,sCapStatus,sTubeType,"0","0","0"))
    return false;
    
  //Load patient order with IA test
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Capped"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  if(!StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 60000))
    return false; 

} 

 
function ThenSampleIsSentToIMAndIsAspirated()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario16");
  var dictColumn=arrTestData[0];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in ASPIRATED status  
 return StepWaitForSampleStatus(SampleId, SampleStatus)


} 

function ThenSampleGetsUnloadedToOutputArea()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario16")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("OutputSampleID");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  //var aSampleStatus=SampleStatus["split"](";");
  var SampleLocation=dictColumn["Item"]("SampleLocation")
  
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario16")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
   
   //Verify sample unloading location
  
  if(!StepWaitForSampleStatus(SampleID, SampleStatus))
    return false;
    
 if(!StepVerifySampleLocationOnTrack(SampleID, SampleLocation))
    return false;
   
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers) 
    
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "HILScenario16", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "HILScenario16", "F");
    return false;  
  }
} 








function WhenVisionHILErrorSortWithHoldAreaIsConfigured()
{

  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig", "VisionHILErrorSortWithHoldArea");
  var sErrorStatus = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName = arrDrawers[0]["Item"]("SortGroupName");
  var PanelName=arrDrawers[0]["Item"]("Panel");
  
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  
  if (StepVerifySortPanelActive(PanelName))
    return true;
  
  if(!StepStopAnalyzer("SH"))
    return false;
  
  if(!StepAddAnErrorSortGroup(sErrorStatus,sSortGroupName))
    return false;
  
  if(!StepAddPanel(PanelName))
    return false;

  return StepPerformSortConfiguration(TestDataFile, "SortConfig", "VisionHILErrorSortWithHoldArea")
}


function WhenTCSBasedHILSettingsIsDoneForScenario8()
{
  var arrTestData=GetTestItemsByTestName(TestDataFile,"HILConfig","Scenario8")
  var dictColumn=arrTestData[0];
  var strHILAnalysis = dictColumn["Item"]("HILAnalysis"); 
  var strCHHILOrdering = dictColumn["Item"]("CH-HILOrdering");
  var strDefiniteHIL = dictColumn["Item"]("DefiniteHIL");
  var strQuestionableHIL = dictColumn["Item"]("QuestionableHIL");
  
  StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL)  

}

function WhenCHAnalyzerIsAvailable()
{
  
  if(!StepCheckCCExists())
    return false;
  
  var Expectedstatus = "Ready/Processing/Standby"
  return StepVerifyModuleStatus("CC",Expectedstatus);
} 

function WhenSampleAnalysisTriggeredDefinitveHIL()
{
  
  var arrTestData=GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario8")
  var dictColumn=arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  var SampleAttribute      = dictColumn["Item"]("SampleAttributes");
  
  var arrAssay= new Array();
  arrAssay = Assay["split"](";");
  
  if(!StepUpdateFakebarcodeReadingsFile(SampleId))/////// take libraary from lingaraju for analysisData file
    return false;
  
  if(!StepCreatePatientOrder(arrAssay[0], SampleId, Specimen, Analyzer, Priority))
    return false;
    
  if(!StepLaunchDVSinSH())
    return false;
  
  if(!StepPlaceOutputTray())
    return false;
    
  //To simulate Vision HIL error sort area not available  
  if(!StepPlaceFullyPopulatedTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  //verify sample attribute        /// check while execution for plain sample
//  if(!StepVerifySampleProperty(SampleId, "CapStatus", "Capped"))  
//    return false;
  
//  return StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 10000)
//  return StepVerifySampleProperty(SampleId, "CapStatus", "Decapped")


} 


function ThenHILSampleIsAspirated()
{
    
  if(!StepWaitForSampleStatus(SampleID, aSampleStatus[0]))
    return false;
  

} 

function ThenSampleHasVisionHILError()
{
  var arrTestData=GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario8")
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var strHILError          = dictColumn["Item"]("HILError");
  
  var arrAssay= new Array();
  arrAssay = Assay["split"](";");
  
  var arrHILError= new Array();
  arrHILError = strHILError["split"](";");
  
  for(i=1;i<arrHILError["length"];i++)
  {
    StepVerifySampleTestHasVisionError(SampleId, arrAssay[0],arrHILError[i])
  }

} 


function WhenHILSampleIsUnloadedToHoldArea()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario8")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
  
  //verify Vision HIL error sort area is not available
   if(!StepVerifySHAreaHasNoEmptySlots(TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
  
  return StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)

} 


function WhenHILSampleIsUnloadedToHILVisionSortArea()
{
  if(!StepRemoveTray())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
//  if(!StepLoadSample())        // check while execution whether drawer needs to be push again afater placing slots free tray
//    return false;
  
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario8")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
  
  if(!StepVerifyEmptySlotsInSortArea(TrayType,DrawerNumber, DrawerZone, DrawerPanels, RowNumbers))
    return false;
  
  return StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
} 

function ThenHILEntryArePresent()
{
  
  var arrTestData=GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario8")
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var strVisionEntry       = dictColumn["Item"]("VisionEntry");
  
  var arrAssay= new Array();
  arrAssay = Assay["split"](";");
  
  var arrVisionEntry = new Array();
  arrVisionEntry = strVisionEntry["split"](";");
  
  for(i=1;i<arrVisionEntry["length"];i++)
  {
    StepVerifySampleHasVisionEntry(SampleId,arrVisionEntry) 
  }
  
//InitializeMetaData();
//  StepVerifySampleHasVisionEntry("1111130","L")
}

function GivenTestHasHILThresholdDefinedinTDEFTCSRunUnaffected()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario07");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex)
}

function WhenHILSettingIsConfiguredAsTCSRunUnaffected()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting4");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function WhenHILSettingIsConfiguredAsTCSRunAll()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting1");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
} 

function WhenSampleAnalysisDidNotTriggerHILTCSRunUnaffected()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario07");
  var dictColumn = arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  //Update analysis data
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
 
  var iHvalue                = dictColumn["Item"]("H_enum");
  var iIvalue                = dictColumn["Item"]("I_enum");
  var iLvalue                = dictColumn["Item"]("L_enum");
  
  //Update analysis data
  if(!StepUpdateAnalysisData(SampleId,sCapStatus,sTubeType,iHvalue,iIvalue,iLvalue))
    return false;
    
  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Capped"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  if(!StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 60000))
    return false;   

  // Method to verify only 1 worklist entry is present in Worklist tab
  return StepVerifyHILWorkOrderNotPresent(strSampleID);
}

function ThenSampleIsSentToIMAndIsAspiratedTCSRunUnaffected()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario07");
  var dictColumn = arrTestData[0];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in ASPIRATED status
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
    
  //Method to verify Interference flags are not present for the sample - Method needs to be coded once the UI is available 
}

function ThenSampleGetsUnloadedToOutputAreaTCSRunUnaffected()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario07");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to Output tray
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario07", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario07", "F");
    return false;  
  }
}

function GivenTestHasHILThresholdDefinedinTDEFTCSRunAll()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario13");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex)
} 

function WhenSampleAnalysisTriggeredDefiniteHILTCSRunAll()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario13");
  var dictColumn = arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  //Update analysis data
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
 
  var iHvalue                = dictColumn["Item"]("H_enum");
  var iIvalue                = dictColumn["Item"]("I_enum");
  var iLvalue                = dictColumn["Item"]("L_enum");
  
  //Update analysis data
  
  if(!StepUpdateAnalysisData(SampleId,sCapStatus,sTubeType,iHvalue,iIvalue,iLvalue))    // how to pass multiple samples ????
    return false;
    
  //Load first CH patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario13");
  var dictColumn = arrTestData[1];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  //Load second CH patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario13");
  var dictColumn = arrTestData[2];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  //Load IA patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Capped"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  if(!StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 60000))
    return false;   

  // Method to verify only 1 worklist entry is present in Worklist tab
  return StepVerifyHILWorkOrderNotPresent(strSampleID);
}


function ThenSamplesAreSentToIACCAndAspiratedTCSRunAll()
{
  
}

function ThenSampleGetsUnloadedToHILErrorSortAreaTCSRunAll()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario13");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to Output tray
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario13", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario13", "F");
    return false;  
  }
} 

function GivenMoreThanOneSQCAvailable()
{
  
  return StepVerifyAvailableSQC(2,2);
} 

function GivenNoTestsHasQuestionableHILThresholdDefinedinTDEF()
{
  arrData = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario06");
  var Assay = arrData[0]["Item"]("Assay");
  
  return StepVerifyHILDisabledForAnAssay(Assay);

} 

function WhenHILSettingIsConfiguredAsTCSQuestionableRunAll()
{
  arrData = GetTestItemsByTestName(TestDataFile, "HILConfig", "HILScenario06");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
} 


function WhenSampleAnalysisTriggeredQuestionableHIL()
{
  var arrTestData=GetTestItemsByTestName(TestDataFile,"PatientOrder","TCSSetting2")
  var dictColumn=arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  var SampleAttribute      = dictColumn["Item"]("SampleAttributes");
  
  var arrAssay= new Array();
  arrAssay = Assay["split"](";");
  
  
  var arrModuleNames=StepGetModuleNames("SH")
  
  if(!StepUpdateFakebarcodeReadingsFile(SampleId))/////// take libraary from lingaraju for analysisData file
    return false;
  
  if(!StepCreatePatientOrder(arrAssay[0], SampleId, Specimen, Analyzer, Priority))
    return false;
    
  if(!StepLaunchDVSinSH())
    return false;
  
  if(!StepPlaceOutputTray())
    return false;
   
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false;
} 



function GivenOneTestHasHILThresholdDefinedinTDEF()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario12");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex)
}

function WhenHILSettingIsConfiguredDoNotRun()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting6");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
} 

function WhenSampleAnalysisTriggerQuestionableHIL()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario12");
  var dictColumn = arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  //Update analysis data
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
  var dictColumn=arrTestData[0];
 
  var iHvalue                = dictColumn["Item"]("H_enum");
  var iIvalue                = dictColumn["Item"]("I_enum");
  var iLvalue                = dictColumn["Item"]("L_enum");
  
  //Update analysis data
  if(!StepUpdateAnalysisData(SampleId,sCapStatus,sTubeType,iHvalue,iIvalue,iLvalue))
    return false;
    
  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Capped"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  if(!StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 60000))
    return false;   

  // Method to verify only 1 worklist entry is present in Worklist tab
  return StepVerifyHILWorkOrderNotPresent(strSampleID);
} 

function ThenSampleIsNotSentToCH()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario12");
  var dictColumn=arrTestData[0];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  var Detectedflag="Vision:HemolysisError";
  var NotDetectedFlag="ToBeDefined";
  
  //  Wait for sample to Vision HIL Error status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
    
  //  Wait for sample to Vision HIL Error status  
  if(!StepVerifyVisionDetectedSampleTestFlag(SampleId, Detectedflag)) // to be implemented
    return false;
  
  //  Wait for sample to Vision HIL Error status  
  if(!StepVerifyVisionNotDetectedSampleTestFlag(SampleId, NotDetectedFlag))
    return false;
    
  //Method to verify Interference flags are not present for the sample - Method needs to be coded once the UI is available 
}

//function ThenSampleIsNotSentToCH()
//{
// var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario02")
//  var dictColumn=arrTestData[0];
//  var TrayType             = dictColumn["Item"]("TrayType");
//  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
//  var DrawerZone           = dictColumn["Item"]("DrawerZone");
//  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
//  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
//  var SampleIDs           = dictColumn["Item"]("SampleIDs");
//    
//  return StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers);
//  } 
function ThenSampleGetUnloadedToInputTray()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario12");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to Input tray
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario12", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario12", "F");
    return false;  
  }
}

function GivenTestHasHILDefinedinTDEF()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario02");
  var Assay = arrDrawers[0]["Item"]("Assay");
  
  return StepVerifyHILEnabledForAnAssay(Assay);
}

function WhenHILSettingIsConfiguredDefinitiveAll()   //Check
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "HILScenario02");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function WhenCHAnalyzerIsNotAvailable()
{
  
  return StopAnalyzer("CH");
//  var Expectedstatus = "Stopped";
//  return StepVerifyModuleStatus("CH",Expectedstatus); 
}

function ThenSampleNotSentToCH()
{
 var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario02")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  return StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers);
  } 
  
 function ThenStartCHAnalyzer()
 {
   if(!StartAnalyzer("CH"))
    return false;
    var Expectedstatus = "Ready/Processing";
   return StepVerifyModuleStatus("CH",Expectedstatus); 
 } 
 
 function ThenSampleSentToCHAndIsAspirated()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario02");
  var dictColumn=arrTestData[0];
  var SampleStatus = dictColumn["Item"]("SampleStatus")["split"](";");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in ASPIRATED status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus[1]))
    return false;
    
  //Method to verify Interference flags are not present for the sample - Method needs to be coded once the UI is available 
}

function ThenSampleGetUnloadedToOutputTray()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario02");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to Output tray
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario02", "F");
    return false;  
  }
}

function GivenOneTestHasHILDefinedinTDEF()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "HILScenario14");
 var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex)
}

function WhenHILErrorSortAreaIsConfiguredSpotNotAvailable() //Spot is not available should be updated
{  
   ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  //Configure SH
  if (!StepVerifySortPanelActive("HILErrorSortPanel"))
  {  
    if(!StepStopAnalyzer("SH"))
      return false;
   
    if(!StepAddPanel("HILErrorSortPanel"))
      return false;

    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "HILErrorSortArea"))
      return false;
    
          
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
  {
    return true;
  } 
  
} 

function WhenHILSettingIsConfiguredRunAll()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting1");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function WhenSampleAnalysisTriggeredQuestionableHIL1()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario14");
   var arrHILIndData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
  for(i=0;i<arrTestData["length"];i++)
  {
  var dictColumn = arrTestData[i];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");

  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  }
  
    var dictColumn=arrHILIndData[0];
 
  var iHvalue                = dictColumn["Item"]("H_enum");
  var iIvalue                = dictColumn["Item"]("I_enum");
  var iLvalue                = dictColumn["Item"]("L_enum");
  
  if(!StepUpdateAnalysisData(SampleId,sCapStatus,sTubeType,iHvalue,iIvalue,iLvalue))
    return false;

  if(!StepLaunchDVSinSHs("LaunchDVS"))
    return false;
    
  if(!StepLaunchDVSinSHs("LaunchDVSSH2"))
    return false;
    
    
  if(!StepPlaceOutputTray("PlaceOutputTray"))
    return false;
    
   if(!StepPlaceOutputTray("PlaceOutputTraySH2"))
    return false;
    
  if(!StepPlaceSample("Capped"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  if(!StepWaitForSampleProperty(SampleId, "CapStatus", "Decapped", 60000))
    return false;   

            //Include method to check the HIL Entries
 // return StepVerifyHILWorkOrderNotPresent(strSampleID); 
} 

function ThenSampleUnloadedToInputTray()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario14");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to Input tray
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario14", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "Scenario14", "F");
    return false;  
  }
}

function ThenSampleIsProcessedWhenAnalyzerIsAvailable()
{
   var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario14");
  var dictColumn=arrTestData[0];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in ASPIRATED status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
    
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","HILScenario14");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to Input tray
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //   var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario14");
  var dictColumn=arrTestData[1];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in Assay Error status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
    
  if(!StepStartAnalyzer("CH"))
      return false;
  
  //   var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","HILScenario14");
 // var dictColumn=arrTestData[1];
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleId     = dictColumn["Item"]("SampleId");
  
  //  Wait for sample to come in ASPIRATED status  
  return StepWaitForSampleStatus(SampleId, SampleStatus); 
}
///////HIL feature steps ////////////////////////////////////////////////////////////////////////////////////////////////////////////
function GivenSQCIsConfigured_GWT205841_01()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;
    
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "HILErrorSortAreas");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatuses    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupNames  = arrDrawers[0]["Item"]("SortGroupName");
  
  //Configure SH
  if (!StepVerifySortPanelActive(PanelName))
  {  
    if(!StepStopAnalyzer("SH"))
      return false;
      
    if(!StepAddMultipleErrorSortGroups(sErrorStatuses,sSortGroupNames))
      return false;
      
    if(!StepAddPanel(PanelName))
      return false;

    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortAreas"))
      return false;
           
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
  {
    return true;
  } 
    
} 

function GivenHILSettingIsConfiguredToBeBasedOnTCS()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting4");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
} 

function WhenSampleIsDeterminedToBeHavingQuestionableInterference()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_01");
  var dictColumn = arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  var Assays=Assay["split"](";");
  var sAssay1=Assays[0];
  var sAssay2=Assays[1];
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(sAssay1,iHindex,iIindex,iLindex))
    return false;
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(sAssay2,iHindex,iIindex,iLindex))
    return false;  
        
  //Update analysis data
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205841_01"))
    return false;
    
  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false; 
  else
    return true;
} 


function ThenSampleIsAspiratedForOnlyTheunaffectedTests()
{ 
InitializeMetaData();
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_01");  
  var dictColumn = arrTestData[0];
 
  var Assay        = dictColumn["Item"]("Assay");
  var SampleId     = dictColumn["Item"]("SampleId");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleError = dictColumn["Item"]("VisionError");
  var Assays=Assay["split"](";");
  var sAssay1=Assays[0];
  var sAssay2=Assays[1];
  
  
  //  Wait for sample to come in Vision HIL error status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
    
  var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleId, sAssay1,arrSampleError[serr]))
      return false;
  }
    
   var sEvent="Sample {0} has error: {1}. Resolve the appropriate issue.";
  var transsEvent=GetTranslatedString(sEvent,""); 
  transsEvent = ReplaceString(transsEvent, "{0}", SampleId, true);
  transsEvent = ReplaceString(transsEvent, "{1}", "Vision Lipemic", true)
  
   //Verify system message log for the sample which is having H I L errors in system message log page
  if(!StepVerifySystemMessageLog("All", transsEvent))
      return false;
    
   //Verify sample unloading location  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205841_01");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to vision HIL error sort area
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205841_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205841_01", "F");
    return false;  
  }

} 

function GivenSQCIsConfigured_GWT205841_02()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;
    
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "VisionHILErrorWithHolding");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  //Configure SH
  if (!StepVerifySortPanelActive(PanelName))
  {  
    if(!StepStopAnalyzer("SH"))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus,sSortGroupName))
      return false;
      
    if(!StepAddPanel(PanelName))
      return false;

    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "VisionHILErrorWithHolding"))
      return false;
    
          
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
  {
    return true;
  } 
    
} 


function WhenSampleIsDeterminedToBeHavingQuestionableInterference_GWT205841_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_02");
  var dictColumn = arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  var Assays=Assay["split"](";");
  var sAssay1=Assays[0];
  var sAssay2=Assays[1];
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(sAssay1,iHindex,iIindex,iLindex))
    return false;
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(sAssay2,iHindex,iIindex,iLindex))
    return false;  
        
  //Update analysis data
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205841_02"))
    return false;
    
  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
  
    //To simulate Vision sort area not available  
  if(!StepPlaceFullyPopulatedTray())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false; 
  else
    return true; 
} 

function ThenSampleIsAspiratedForOnlyTheunaffectedTests_GWT205841_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_02");  
  var dictColumn = arrTestData[0];
 
  var Assay        = dictColumn["Item"]("Assay");
  var SampleId     = dictColumn["Item"]("SampleId");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleError = dictColumn["Item"]("VisionError");
  var Assays=Assay["split"](";");
  var sAssay1=Assays[0];
  var sAssay2=Assays[1];
  
  
  //  Wait for sample to come in Vision HIL error status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
  
   var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleId, sAssay1,arrSampleError[serr]))
      return false;
  }
    
   var sEvent="Sample {0} has error: {1}. Resolve the appropriate issue.";
  var transsEvent=GetTranslatedString(sEvent,""); 
  transsEvent = ReplaceString(transsEvent, "{0}", SampleId, true);
  transsEvent = ReplaceString(transsEvent, "{1}", "Vision Lipemic", true)
  
   //Verify system message log for the sample which is having H I L errors in system message log page
  if(!StepVerifySystemMessageLog("All", transsEvent))
      return false;

   //Verify sample unloading location  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205841_02");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to holding area
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205841_02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205841_02", "F");
    return false;  
  }
} 


function GivenSQCIsConfigured_GWT205841_03()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;
    
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig", "SampleParking");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  //Configure SH
  if (!StepVerifySortPanelActive(PanelName))
  {  
    if(!StepStopAnalyzer("SH"))
      return false;
      
    if(!StepAddPanel(PanelName))
      return false;

    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;  
          
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
  {
    return true;
  } 
} 

function WhenSampleIsDeterminedToBeHavingQuestionableInterference_GWT205841_03()
{
    var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_03");
    var dictColumn = arrTestData[0];
    var Assay                = dictColumn["Item"]("Assay");
    var SampleId             = dictColumn["Item"]("SampleId");
    var Specimen             = dictColumn["Item"]("Specimen");
    var Analyzer             = dictColumn["Item"]("Analyzer");
    var Priority             = dictColumn["Item"]("Priority");
  
    var Assays=Assay["split"](";");
    var sAssay1=Assays[0];
    var sAssay2=Assays[1];
  
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
    var dictColumn=arrTestData[0];
    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
    
    if(!StepSetHILIndicesForCHAssay(sAssay1,iHindex,iIindex,iLindex))
      return false;
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
    var dictColumn=arrTestData[0];
    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
    
    if(!StepSetHILIndicesForCHAssay(sAssay2,iHindex,iIindex,iLindex))
      return false;  
        
    //Update analysis data
    if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205841_03"))
      return false;
    
    //Load patient order
    if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
      return false;

    if(!StepLaunchDVSinSH())
      return false;
    
    if(!StepPlaceOutputTray())
      return false;
    
    if(!StepPlaceSample("Plain"))
      return false;
    
    if(!StepLoadSample())
      return false; 
    else
      return true; 
} 

function ThenSampleIsAspiratedForOnlyTheunaffectedTests_GWT205841_03()
{
    var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_03");  
    var dictColumn = arrTestData[0];
 
    var Assay        = dictColumn["Item"]("Assay");
    var SampleId     = dictColumn["Item"]("SampleId");
    var SampleStatus = dictColumn["Item"]("SampleStatus");
    var SampleError = dictColumn["Item"]("VisionError");
    var Assays=Assay["split"](";");
    var sAssay1=Assays[0];
    var sAssay2=Assays[1];
  
  
    //  Wait for sample to come in Vision HIL error status  
    if(!StepWaitForSampleStatus(SampleId, SampleStatus))
      return false;
  
  var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleId, sAssay1,arrSampleError[serr]))
      return false;
  }
    
   var sEvent="Sample {0} has error: {1}. Resolve the appropriate issue.";
  var transsEvent=GetTranslatedString(sEvent,""); 
  transsEvent = ReplaceString(transsEvent, "{0}", SampleId, true);
  transsEvent = ReplaceString(transsEvent, "{1}", "Vision Lipemic", true)
  
   //Verify system message log for the sample which is having H I L errors in system message log page
  if(!StepVerifySystemMessageLog("All", transsEvent))
      return false;
    
     //Verify sample unloading location  
    var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205841_03");
    var dictColumn=arrTestData[0];
  
    var TrayType             = dictColumn["Item"]("TrayType");
    var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
    var DrawerZone           = dictColumn["Item"]("DrawerZone");
    var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
    var RowNumbers           = dictColumn["Item"]("RowNumbers");    
    var SampleIDs            = dictColumn["Item"]("SampleIDs");

    // Verify the sample gets unloaded to holding area
    var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
    var attr = Log["CreateNewAttributes"]();
    attr["Bold"] = true;
    attr["Italic"] = true;
    if(boolValue == true)
    {
      attr["FontColor"] = clGreen
       Log["Message"]("Test Passed",null,pmNormal,attr);
      ReportTestStatusToResultXML("SQC-HIL", "GWT205841_03", "P");
      return true;
    }
    else
    {
      attr["FontColor"] = clRed
      Log["Message"]("Test Failed",null,pmNormal,attr);
      ReportTestStatusToResultXML("SQC-HIL", "GWT205841_03", "F");
      return false;  
    }
} 


function QuestionableHILInterferenceDetermination_IASetup()
{
  //Enable IA module in FederationConfig.xml
    if(!StepEnableDisableModule("IA","True"))
      return false;
    
    //disable CC module in FederationConfig.xml
    if(!StepEnableDisableModule("CC","False"))
      return false;
  
    ProjPath = ProjectSuite["Path"];
    arrPath  = ProjPath["split"]("Atellica");
    var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
    var DeploymentType = GetDeploymentType(sConfigPath)
  
    arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "HILErrorSortAreas");
    var PanelName       = arrDrawers[0]["Item"]("Panel");
    var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
    var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
    //Configure SH
    if (!StepVerifySortPanelActive(PanelName))
    {  
      if(!StepStopAnalyzer("SH"))
        return false;
      
      if(!StepAddPanel(PanelName))
        return false;

      if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortAreas"))
        return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//      if(!StepShutdownAnalyzer("SH"))
//        return false;
//  
//      if(!StepShutdownTrinidad())
//        return false;
//  
//      if(!StepLaunchAnalyzer("SH"))
//        return false;
//      
//        //Launch IA analyzer
//
//      return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
    }
    else
    {
      return true;
    } 

} 

function GivenSQCIsConfigured_GWT205841_04()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;
    
   ProjPath = ProjectSuite["Path"];
    arrPath  = ProjPath["split"]("Atellica");
    var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
    var DeploymentType = GetDeploymentType(sConfigPath)
  
    arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "HILErrorSortAreas");
    var PanelName       = arrDrawers[0]["Item"]("Panel");
    var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
    var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
    //Configure SH
    if (!StepVerifySortPanelActive(PanelName))
    {  
      if(!StepStopAnalyzer("SH"))
        return false;
      
      if(!StepAddPanel(PanelName))
        return false;

      if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortAreas"))
        return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//      if(!StepShutdownAnalyzer("SH"))
//        return false;
//      
//      // shutdown IA analyzer
//      
//      if(!StepShutdownTrinidad())
//        return false;
//  
//      if(!StepLaunchAnalyzer("SH"))
//        return false;
//      
//        //Launch IA analyzer
//
//      return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
    }
    else
    {
      return true;
    } 
} 

function WhenSampleIsDeterminedToBeHavingQuestionableInterference_GWT205841_04()
{
    var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_04");
    var dictColumn = arrTestData[0];
    var Assay                = dictColumn["Item"]("Assay");
    var SampleId             = dictColumn["Item"]("SampleId");
    var Specimen             = dictColumn["Item"]("Specimen");
    var Analyzer             = dictColumn["Item"]("Analyzer");
    var Priority             = dictColumn["Item"]("Priority");
  
    var Assays=Assay["split"](";");
    var sAssay1=Assays[0];
    var sAssay2=Assays[1];
  
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
    var dictColumn=arrTestData[0];
    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
    
  
    if(!StepSetHILIndicesForIAAssay(sAssay1,iHindex,iIindex,iLindex))
      return false;
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
    var dictColumn=arrTestData[0];
    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
    
    if(!StepSetHILIndicesForIAAssay(sAssay2,iHindex,iIindex,iLindex))
      return false;  
        
    //Update analysis data
    if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205841_04"))
      return false;
    
    //Load patient order
    if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
      return false;

    if(!StepLaunchDVSinSH())
      return false;
    
    if(!StepPlaceOutputTray())
      return false;
    
    if(!StepPlaceSample("Plain"))
      return false;
    




    return StepLoadSample();
  

}

function ThenSampleIsAspiratedForOnlyTheunaffectedTests_GWT205841_04()
{
    var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_04");  
    var dictColumn = arrTestData[0];
 
    var Assay        = dictColumn["Item"]("Assay");
    var SampleId     = dictColumn["Item"]("SampleId");
    var SampleStatus = dictColumn["Item"]("SampleStatus");
    var SampleError = dictColumn["Item"]("VisionError");
    var Assays=Assay["split"](";");
    var sAssay1=Assays[0];
    var sAssay2=Assays[1];
  
  
    //  Wait for sample to come in Vision HIL error status  
    if(!StepWaitForSampleStatus(SampleId, SampleStatus))
      return false;
  
   var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleId, sAssay1,arrSampleError[serr]))
      return false;
  }
    
   var sEvent="Sample {0} has error: {1}. Resolve the appropriate issue.";
  var transsEvent=GetTranslatedString(sEvent,""); 
  transsEvent = ReplaceString(transsEvent, "{0}", SampleId, true);
  transsEvent = ReplaceString(transsEvent, "{1}", "Vision Lipemic", true)
  
   //Verify system message log for the sample which is having H I L errors in system message log page
  if(!StepVerifySystemMessageLog("All", transsEvent))
      return false;

    
     //Verify sample unloading location  
    var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205841_04");
    var dictColumn=arrTestData[0];
  
    var TrayType             = dictColumn["Item"]("TrayType");
    var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
    var DrawerZone           = dictColumn["Item"]("DrawerZone");
    var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
    var RowNumbers           = dictColumn["Item"]("RowNumbers");    
    var SampleIDs            = dictColumn["Item"]("SampleIDs");

    // Verify the sample gets unloaded to holding area
    var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
    var attr = Log["CreateNewAttributes"]();
    attr["Bold"] = true;
    attr["Italic"] = true;
    if(boolValue == true)
    {
      attr["FontColor"] = clGreen
       Log["Message"]("Test Passed",null,pmNormal,attr);
      ReportTestStatusToResultXML("SQC-HIL", "GWT205841_04", "P");
      return true;
    }
    else
    {
      attr["FontColor"] = clRed
      Log["Message"]("Test Failed",null,pmNormal,attr);
      ReportTestStatusToResultXML("SQC-HIL", "GWT205841_04", "F");
      return false;  
    }
} 

function WhenTheOperatorHasConfiguredTheHILWorkflowAsManual_GWT197394_01()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting1");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
} 

function ThenTheSystemDoesNotAllowTheOperatorToconfigureTheVisionHILInterferenceSetting_GWT197394_01()
{
  var boolValue=StepVerifyVisionHILInterferenceSettingsAreUnavailable();
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT197394_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT197394_01", "F");
    return false;  
  }
}

function WhenTheOperatorHasConfiguredTheHILWorkflowAsCHBased_GWT197394_02()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
} 

function ThenTheSystemDoesNotAllowTheOperatorToconfigureTheVisionHILInterferenceSetting_GWT197394_02()
{
  var boolValue=StepVerifyVisionHILInterferenceSettingsAreUnavailable();
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT197394_02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT197394_02", "F");
    return false;  
  }
} 
 


function SHPanelWithHILSettingsGWT198294Sce01()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig", "SampleParking");
  var PanelName=arrDrawers[0]["Item"]("Panel");
  
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  if(!StepVerifySortPanelActive(PanelName))    
  {
    if(!StepStopAnalyzer("SH"))
      return false;
      
    if(!StepAddPanel(PanelName))        
      return false;
    
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    if(!GivenAtellicaInitialized())
      return false;
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())                           // added since SH not coming to ready state after SH configuration is done
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//      
//    if(!StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType))
//      return false;
  }
  
  arrTestData = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting1");
  var dictColumn =arrTestData[0];
  var strHILAnalysis    = dictColumn["Item"]("HILAnalysis");
  var strCHHILOrdering  = dictColumn["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = dictColumn["Item"]("DefiniteHIL");
  var strQuestionableHIL = dictColumn["Item"]("QuestionableHIL");
  
  if(!StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL))
    return false;
  
  arrTestData = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT198294Scenario01");
  var Assay1 = arrTestData[0]["Item"]("Assay");
  var Assay2 = arrTestData[1]["Item"]("Assay");

  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn  =arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(Assay1,iHindex,iIindex,iLindex))
    return false;

  return StepSetHILDisabledForAnAssay(Assay2)
  
} 

function ThenPatientSampleGWT198294Sce01()
{
  //Update analysis data
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT198294Scenario01"))
    return false;
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT198294Scenario01"); 
  for(var i=0;i<arrTestData["length"];i++)
  {
    var dictColumn=arrTestData[i];
    var Assay                = dictColumn["Item"]("Assay");
    var SampleId             = dictColumn["Item"]("SampleId");
    var Specimen             = dictColumn["Item"]("Specimen");
    var Analyzer             = dictColumn["Item"]("Analyzer");
    var Priority             = dictColumn["Item"]("Priority");
    
    if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
      return false;
    
    if(!StepVerifyHILWorkOrderNotPresent(SampleId))
      return false;
  } 
    
  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false; 
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT198294Scenario01"); 
  for(var i=0;i<arrTestData["length"];i++)
  {
    var dictColumn=arrTestData[i];
    var SampleId             = dictColumn["Item"]("SampleId");
    var SampleProblems       = dictColumn["Item"]("SampleProblem");
    var arrSampleProblems    = SampleProblems["split"](";");
    
    for(var spb = 0;spb<arrSampleProblems["length"];spb++)
    {
      if(StepVerifySampleProblemsAssociated(SampleId,arrSampleProblems[spb]))
         return false;
    }
  }  
  
  for(var i=0;i<arrTestData["length"];i++)
  {
    var dictColumn=arrTestData[i];
    var SampleId             = dictColumn["Item"]("SampleId");
    var SampleStatus         = dictColumn["Item"]("SampleStatus");
    var arrSampleStatus      = SampleStatus["split"](";");
    
   if(!StepWaitForSampleStatus(SampleId, arrSampleStatus[0])) // aspirated state
      return false; 
  }
  
  for(var i=0;i<arrTestData["length"];i++)
  {
    var dictColumn=arrTestData[i];
    var SampleId             = dictColumn["Item"]("SampleId");
    
    if(!StepVerifyHILWorkOrderNotPresent(SampleId))
      return false;  
  }
  
  for(var i=0;i<arrTestData["length"];i++)
  {
    var dictColumn=arrTestData[i];
    var SampleId             = dictColumn["Item"]("SampleId");
    var Assay               = dictColumn["Item"]("Assay")
    var SampleError          = dictColumn["Item"]("VisionError");//Vision Hemolysis;Vision Icteric;Vision Lipemic  --separated by semi-colon since msg code is available for individual error
    var arrSampleError      = SampleError["split"](";");
    
    for(var serr = 0;serr<arrSampleError["length"];serr++)
    {
       if(!StepVerifySampleTestHasNotThisVisionError(SampleId, Assay,arrSampleError[serr]))
        return false;
    }
  }
  
  for(var i=0;i<arrTestData["length"];i++)
  {
    var dictColumn=arrTestData[i];
    var SampleId             = dictColumn["Item"]("SampleId");
    var SampleStatus         = dictColumn["Item"]("SampleStatus");
     var arrSampleStatus      = SampleStatus["split"](";");
     
   if(!StepWaitForSampleStatus(SampleId, arrSampleStatus[1])) // complete state
      return false; 
  }
  
  var iPass=0;
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT198294Scenario01"); 
  for(var i=0;i<arrTestData["length"];i++)
  {
    var dictColumn=arrTestData[i];
    var TrayType             = dictColumn["Item"]("TrayType");
    var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
    var DrawerZone           = dictColumn["Item"]("DrawerZone");
    var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
    var RowNumbers           = dictColumn["Item"]("RowNumbers");    
    var SampleIDs            = dictColumn["Item"]("SampleIDs");
    
    if(StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
      iPass=iPass+1;
  }
    
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(iPass==2)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT198294_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT198294_01", "F");
    return false;
  
  }
} 

function GWT198294Teardown()
{
   //Clear all data
  return ClearApplicationData();  

}


function SHPanelWithHILSettingsGWT196983Sce0102()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "VisionHILErrorWithHolding");
  var sErrorStatus = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName = arrDrawers[0]["Item"]("SortGroupName");
  var PanelName=arrDrawers[0]["Item"]("Panel");
  
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  if(!(StepVerifySortPanelActive(PanelName)))    
  {
    if(!StepStopAnalyzer("SH"))
      return false;
      
    if(!StepAddPanel(PanelName))        
      return false;
    
     if(!StepAddAnErrorSortGroup(sErrorStatus,sSortGroupName))
      return false;
    
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "VisionHILErrorWithHolding"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    if(!GivenAtellicaInitialized())
      return false;
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())                           // added since SH not coming to ready state after SH configuration is done
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//      
//    if(!StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType))
//      return false;
  }
  
  arrTestData = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting6");
  var dictColumn =arrTestData[0];
  var strHILAnalysis    = dictColumn["Item"]("HILAnalysis");
  var strCHHILOrdering  = dictColumn["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = dictColumn["Item"]("DefiniteHIL");
  var strQuestionableHIL = dictColumn["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL)
}

function WhenPatientSampleLoadedAndSQCHILSortAreaAvailableGWT196983Sce01()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983Scenario01"); 
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(Assay,iHindex,iIindex,iLindex))
    return false;
    
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196983Scenario01"))
    return false;
    
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983Scenario01")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers"); 
  
  return StepVerifyEmptySlotsInSortArea(TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
   
}

function ThenPatientSampleUnloadedAndNotSentToAanlyzerGWT196983Sce01()
{
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983Scenario01"); 
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleID             = dictColumn["Item"]("SampleId");
  var SampleProblem        = dictColumn["Item"]("SampleProblem");
  var SampleStatus         = dictColumn["Item"]("SampleStatus");//Vision HIL error
  var SampleError          = dictColumn["Item"]("VisionError");//Vision Hemolysis;Vision Icteric;Vision Lipemic
    
  var arrSampleProblem    = SampleProblem["split"](";");
  for(var spb = 0;spb<arrSampleProblem["length"];spb++)
  {
    if(!StepVerifySampleProblemsAssociated(SampleID,arrSampleProblem[spb]))
       return false;
  }
      
  if(!StepWaitForSampleStatus(SampleID, SampleStatus))
    return false; 
   
  var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleID, Assay,arrSampleError[serr]))
      return false;
  }
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983Scenario01")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
 
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_01", "F");
    return false;
  }
} 

function WhenPatientSampleLoadedAndSQCHILSortAreaUnavailableGWT196983Sce02()
{ 
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983Scenario02"); 
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(Assay,iHindex,iIindex,iLindex))
    return false;
    
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196983Scenario02"))
    return false;
    
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
  
  if(!StepPlaceFullyPopulatedTray())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983Scenario02")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers"); 
  
  return StepVerifySHAreaHasNoEmptySlots(TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
   
}

function ThenPatientSampleUnloadedAndNotSentToAanlyzerGWT196983Sce02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983Scenario02"); 
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleID             = dictColumn["Item"]("SampleId");
  var SampleProblem        = dictColumn["Item"]("SampleProblem");
  var SampleStatus         = dictColumn["Item"]("SampleStatus");//Vision HIL error
  var SampleError          = dictColumn["Item"]("VisionError");//Vision Hemolysis;Vision Icteric;Vision Lipemic
    
  var arrSampleProblem    = SampleProblem["split"](";");
  for(var spb = 0;spb<arrSampleProblem["length"];spb++)
  {
    if(!StepVerifySampleProblemsAssociated(SampleID,arrSampleProblem[spb]))
       return false;
  }
      
  if(!StepWaitForSampleStatus(SampleID, SampleStatus))
    return false; 
   
  var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleID, Assay,arrSampleError[serr]))
      return false;
  }
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983Scenario02")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
 
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_02", "F");
    return false;
  }
} 

function SHPanelWithHILSettingsGWT196983Sce03()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "OutputNormalWithHolding");
  var PanelName=arrDrawers[0]["Item"]("Panel");
  
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  if(!(StepVerifySortPanelActive(PanelName)))    
  {
    if(!StepStopAnalyzer("SH"))
      return false;
      
    if(!StepAddPanel(PanelName))        
      return false;
    
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "OutputNormalWithHolding"))
      return false;
          
    if(!StepStartAnalyzer("SH"))
      return false;
    
    if(!GivenAtellicaInitialized())
      return false;
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())                           // added since SH not coming to ready state after SH configuration is done
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//      
//    if(!StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType))
//      return false;
  }
  
  arrTestData = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting6");
  var dictColumn =arrTestData[0];
  var strHILAnalysis    = dictColumn["Item"]("HILAnalysis");
  var strCHHILOrdering  = dictColumn["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = dictColumn["Item"]("DefiniteHIL");
  var strQuestionableHIL = dictColumn["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL) 
}

function WhenPatientSampleLoadedAndHoldingAvailableGWT196983Sce03()
{ 
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983Scenario03"); 
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(Assay,iHindex,iIindex,iLindex))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196983Scenario03"))
    return false;
    
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  if(!StepLaunchDVSinSH())
    return false;

  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false;
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983Scenario03")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers"); 
  
  return StepVerifyEmptySlotsInSortArea(TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
   
}

function ThenPatientSampleUnloadedAndNotSentToAanlyzerGWT196983Sce03()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983Scenario03"); 
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleID             = dictColumn["Item"]("SampleId");
  var SampleProblem        = dictColumn["Item"]("SampleProblem");
  var SampleStatus         = dictColumn["Item"]("SampleStatus");//Vision HIL error
  var SampleError          = dictColumn["Item"]("VisionError");//Vision Hemolysis;Vision Icteric;Vision Lipemic
    
  var arrSampleProblem    = SampleProblem["split"](";");
  for(var spb = 0;spb<arrSampleProblem["length"];spb++)
  {
    if(!StepVerifySampleProblemsAssociated(SampleID,arrSampleProblem[spb]))
       return false;
  }
      
  if(!StepWaitForSampleStatus(SampleID, SampleStatus))
    return false; 
   
  var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleID, Assay,arrSampleError[serr]))
      return false;
  }
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983Scenario03")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
 
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_03", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_03", "F");
    return false;
  }
}

function GWT196983Teardown()
{
   //Clear all data
  return ClearApplicationData();  

}

function ClearWorklistData()
{
   //Clear all data
   Log["AppendFolder"]("Teardown : Moving Patient Samples to  Historical")
  retVal=ClearApplicationData();
  Log["PopLogFolder"]();
  return retVal;  

}

function GivenSQCConfiguredOnSystem_GWT196982_04_IA()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

   ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   
 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","HILErrorSortArea196982");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortArea196982"))
      return false;
          
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
  }
  else
    return true;
}

function GivenHILConfiguredToBasedonTCS2_GWT196982_04_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function GivenTestHasHILThresholdDefinedinTDEF_GWT196982_04_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT196982_04_IA");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex)
} 

function WhenSampleIsDeterminedToBeHavingAtleastOneDefiniteInterference_GWT196982_04_IA()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_04_IA");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196982_04_IA"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 

function ThenSampleIsAspiratedForOnlyTheUnaffectedTests_GWT196982_04_IA()
{
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_04_IA")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
//Verification of Cap status and sample status as Aspirated for second sample
  var dictColumn=arrTestData[1];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  
  if(!StepWaitForSampleStatus(SampleID, "Vision HIL Error"))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_04_IA")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //Verify sample unloading location for second sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_04_IA")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_04", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_04", "F");
    return false;  
  }
} 


function GivenSQCConfiguredOnSystem_GWT196982_05_IA()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

   ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","HILErrorSortArea196982");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortArea196982"))
      return false;
          
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
    return true;
}

function GivenHILConfiguredToBasedonTCS2_GWT196982_05_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function GivenTestHasHILThresholdDefinedinTDEF_GWT196982_05_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT196982_05_IA");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex)
} 

function WhenSampleIsDeterminedToBeHavingAtleastOneDefiniteInterference_GWT196982_05_IA()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_05_IA");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196982_05_IA"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
  
  if(!StepPlaceFullyPopulatedTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 

function ThenSampleIsAspiratedForOnlyTheUnaffectedTests_GWT196982_05_IA()
{
InitializeMetaData();
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_05_IA")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
//Verification of Cap status and sample status as Aspirated for second sample
  var dictColumn=arrTestData[1];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  
  if(!StepWaitForSampleStatus(SampleID, "Vision HIL Error"))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_05_IA")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_05_IA")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_05", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_05", "F");
    return false;  
  }
} 

function GivenSQCConfiguredOnSystem_GWT196982_06_IA()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

   ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig","SampleParking");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
//    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
//      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
    return true;
}

function GivenHILConfiguredToBasedonTCS2_GWT196982_06_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function GivenTestHasHILThresholdDefinedinTDEF_GWT196982_06_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT196982_06_IA");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex);
} 

function WhenSampleIsDeterminedToBeHavingAtleastOneDefiniteInterference_GWT196982_06_IA()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_06_IA");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196982_06_IA"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 

function ThenSampleIsAspiratedForOnlyTheUnaffectedTests_GWT196982_06_IA()
{
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_06_IA")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
//Verification of Cap status and sample status as Aspirated for second sample
  var dictColumn=arrTestData[1];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  
  if(!StepWaitForSampleStatus(SampleID, "Vision HIL Error"))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_06_IA")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_06_IA")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_06", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_06", "F");
    return false;  
  }
} 

function GivenCHAnalyzerNotConfigured()
{
if(StepCheckCCNotExists())
  {
    return true;
  }
else
  {
    if(!StepDisableCC())    
      return false;
      
    if(!StepShutdownAnalyzer("SH"))
      return false;
  
    if(!StepShutdownTrinidad())
      return false;
  
    if(!StepLaunchAnalyzer("SH"))
      return false;
  
    if(!StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile))
      return false;
      
    return (StepCheckCCNotExists());
  }
}

function GivenHILConfiguredToBasedonTCS2_GWT206957_01()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting1");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run all
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function GivenHILDisabledInTDEF_GWT206957_01()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT206957_01");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
   return StepUnCheckHILIndicesForIAAssay(sAssay);
}

function WhenSampleIsSampleIsLoadedWithIA_GWT206957_01()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT206957_01");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT206957_01"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 

function ThenTCS2DidnotDetectHILInterferenceInSample_GWT206957_01()
{
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT206957_01")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
 var boolValue = StepHILOrderedOrNot(SampleID);
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206957_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206957_01", "F");
    return false;  
  }
}  

function GivenSQCConfiguredOnSystem_GWT206966_01()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

   ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   
  return CheckAvailableModuleStatus();
}

function WhenCHBasedHILIsConfigured_GWT206966_01()
{
   return StepConfigureHILSettings("CH-Based HIL", "manual hil", "", "")
}

function HILCHConfigurationIsAvailable_GWT206966_01()
{
   var boolValue=StepIsCHBasedHILSettingsAvailable();
   
   var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206966_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206966_01", "F");
    return false;  
  }
}

function EnableCH_TearDown()
{
//InitializeMetaData();
  Log["Message"]("TearDown-Enabling CH Analyzer");   
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
    var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
    var DeploymentType = GetDeploymentType(sConfigPath);
    
   if(!StepShutdownAnalyzer("SH"))
        return false;
      if(!StepShutdownTrinidad())
        return false;
      if(!StepEnableCC())
       return false;
      if(!StepLaunchAnalyzer("SH"))
        return false;
      if(!StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType));
        return false; 
}

//Sprint 46
function GivenSQCConfiguredOnSystem_GWT205843_02_IA()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

   ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   
  
   ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","HILErrorSortAreas");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortAreas"))
      return false;
    
    if(!StepDisableCC())                                    //Add Disable CC function here to avoid a restart in GivenCHAnalyzerNotConfigured function
      return false; 
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
    return true;
}

function GivenHILDetectionBasedonSQC_GWT205843_02_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting1");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run all
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}
function GivenTestHasHILThresholdDefinedinTDEF_GWT205843_02_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT205843_02_IA");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex)
} 

function WhenSQCDidnotTriggerHILInterferenceInSample_GWT205843_02_IA()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205843_02_IA");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205843_02_IA"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 



function ThenSampleIsAspiratedAndUnloadedToOutputArea_GWT205843_02_IA()
{
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205843_02_IA")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
    
    var dictColumn=arrTestData[1];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
  
  //Verify sample unloading location of sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205843_02_IA")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue1 = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
   var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue2 = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue1&& boolValue2)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205843_02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205843_02", "F");
    return false;  
  }
}

function GivenSQCConfiguredOnSystem_GWT205843_01_CC()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

   ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   
  
   ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","HILErrorSortAreas");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortAreas"))
      return false;
    
    if(!StepEnableCC())    
      return false; 
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();                             
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
        return StepEnableCC();
}

function GivenHILDetectionBasedonSQC_GWT205843_01_CC()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting1");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run all
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}
function GivenTestHasHILThresholdDefinedinTDEF_GWT205843_01_CC()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT205843_01_CC");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex)
} 

function WhenSQCDidnotTriggerHILInterferenceInSample_GWT205843_01_CC()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205843_01_CC");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205843_01_CC"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 



function ThenSampleIsAspiratedAndUnloadedToOutputArea_GWT205843_01_CC()
{
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205843_01_CC")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
  //Verify sample unloading location of sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205843_01_CC")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue1 = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
   var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue2 = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue1&& boolValue2)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205843_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT205843_01", "F");
    return false;  
  }
}

function GivenSQCConfiguredOnSystem_GWT196983_04_IA()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","HILErrorSortArea196982");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortArea196982"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
    return true;
}

function GivenHILConfiguredToBasedonTCS2_GWT196983_04_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting3");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function GivenTestHasHILThresholdDefinedinTDEF_GWT196983_04_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT196983_04_IA");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex)
} 

function WhenSampleIsDeterminedToBeHavingAtleastOneDefiniteInterference_GWT196983_04_IA()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983_04_IA");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196983_04_IA"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 

function ThenSampleIsAspiratedForOnlyTheUnaffectedTests_GWT196983_04_IA()
{
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983_04_IA")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
//Verification of Cap status and sample status as Aspirated for second sample
  var dictColumn=arrTestData[1];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  
  if(!StepWaitForSampleStatus(SampleID, "Vision HIL Error"))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983_04_IA")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //Verify sample unloading location for second sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983_04_IA")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_04", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_04", "F");
    return false;  
  }
} 


function GivenSQCConfiguredOnSystem_GWT196983_05_IA()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

   ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","HILErrorSortArea196982");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "HILErrorSortArea196982"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
    return true;
}

function GivenHILConfiguredToBasedonTCS2_GWT196983_05_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting3");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function GivenTestHasHILThresholdDefinedinTDEF_GWT196983_05_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT196983_05_IA");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex)
} 

function WhenSampleIsDeterminedToBeHavingAtleastOneDefiniteInterference_GWT196983_05_IA()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983_05_IA");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196983_05_IA"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
  
  if(!StepPlaceFullyPopulatedTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 

function ThenSampleIsAspiratedForOnlyTheUnaffectedTests_GWT196983_05_IA()
{
InitializeMetaData();
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983_05_IA")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
//Verification of Cap status and sample status as Aspirated for second sample
  var dictColumn=arrTestData[1];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  
  if(!StepWaitForSampleStatus(SampleID, "Vision HIL Error"))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983_05_IA")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //Verify sample unloading location for first sample
 // var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983_05_IA")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_05", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_05", "F");
    return false;  
  }
} 

function GivenSQCConfiguredOnSystem_GWT196983_06_IA()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;
  ClearWorklistData();    //Clearing Worklist data to avoid error message while changing HIL values in Tdef
   

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","HILErrorSortArea196982");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "Vision_HILErrorSortArea"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
    return true;
}

function GivenHILConfiguredToBasedonTCS2_GWT196983_06_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting3");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function GivenTestHasHILThresholdDefinedinTDEF_GWT196983_06_IA()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT196983_06_IA");
  var sAssays = arrDrawers[0]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var sAssays = arrDrawers[1]["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  return StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex);
} 

function WhenSampleIsDeterminedToBeHavingAtleastOneDefiniteInterference_GWT196983_06_IA()
{
   var arrTestData          = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983_06_IA");
  var dictColumn           = arrTestData[0];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    
    var dictColumn           = arrTestData[1];
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196983_06_IA"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
  
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
} 

function ThenSampleIsAspiratedForOnlyTheUnaffectedTests_GWT196983_06_IA()
{
  //Verification of Cap status and sample status as Aspirated for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196983_06_IA")
  var dictColumn=arrTestData[0];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
    
  if(!StepWaitForSampleStatus(SampleID, "Aspirated"))
    return false;
  
//Verification of Cap status and sample status as Aspirated for second sample
  var dictColumn=arrTestData[1];
  var SampleID = dictColumn["Item"]("SampleId");
  var SampleStatus=dictColumn["Item"]("SampleStatus");
  
  if(!StepWaitForSampleStatus(SampleID, "Vision HIL Error"))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983_06_IA")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //Verify sample unloading location for first sample
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196983_06_IA")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs           = dictColumn["Item"]("SampleIDs");
    
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_06", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196983_06", "F");
    return false;  
  }
} 


function GivenSQCIsConfiguredGWT196984_01()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "Vision_HILErrorSortArea");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
    
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "Vision_HILErrorSortArea"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
    return true;
}

function GivenHILWorkflowConfiguredToBeBasedOnTCSGWT196984_01()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting6");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function WhenNoTestsHaveAnyHILInterferenceGWT196984_01()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196984_01");
  var dictColumn  = arrTestData[0];
  var sAssays = dictColumn["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  if(!StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  //Create patient order for second sample
  var dictColumn  = arrTestData[1];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196984_01"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function WhenHILSortAreaIsConfiguredAndSpotAvailableGWT196984_01()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196984_01");
  var dictColumn  = arrTestData[2];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  return StepVerifyEmptySlotsInSortArea(TrayType,DrawerNumber, DrawerZone, DrawerPanels, RowNumbers)

} 

function ThenSampleIsUnloadedToOutputAreaGWT196984_01()
{

  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196984_01");
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers"); 
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  if(!StepVerifyHILWorkOrderNotPresent(SampleIDs))
    return false;
  
  if(!StepWaitForSampleStatus(SampleIDs, "Complete"))
    return false;
  
// Verification for second sample
  var dictColumn=arrTestData[1];
  var SampleIDs = dictColumn["Item"]("SampleIDs");  
  
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
    
  if(!StepVerifyHILWorkOrderNotPresent(SampleIDs))
    return false;

  var boolValue = StepWaitForSampleStatus(SampleIDs, "Complete");

  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196984_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196984_01", "F");
    return false;  
  }
}

function WhenNoTestsHaveAnyHILInterferenceGWT196984_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference1");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196984_02");
  var dictColumn  = arrTestData[0];
  var sAssays = dictColumn["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  if(!StepSetHILIndicesForIAAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  //Create patient order for second sample
  var dictColumn  = arrTestData[1];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196984_02"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function ThenSampleIsUnloadedToOutputAreaGWT196984_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196984_02");
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers"); 
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  if(!StepWaitForSampleStatus(SampleIDs, "Aspirated"))
    return false;
    
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  if(!StepVerifyHILWorkOrderNotPresent(SampleIDs))
    return false;
  
//  if(!StepWaitForSampleStatus(SampleIDs, "Complete"))
//    return false;
  
// Verification for second sample
  var dictColumn=arrTestData[1];
  var SampleIDs = dictColumn["Item"]("SampleIDs");  
  
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
    
  if(!StepVerifyHILWorkOrderNotPresent(SampleIDs))
    return false;

  var boolValue = StepWaitForSampleStatus(SampleIDs, "Complete");

  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196984_02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196984_02", "F");
    return false;  
  }
}

function GivenSQCIsConfiguredGWT196982_01()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","Vision_HILErrorSortArea");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "Vision_HILErrorSortArea"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
    return true;
}


function GivenHILWorkflowConfiguredToBeBasedOnTCSGWT196982()
{
  //Set Sort configuration
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function WhenSampleDeterminedToHaveOneTestWithDefiniteInterferenceGWT196982_01()
{  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_01");
  var dictColumn  = arrTestData[0];
  var sAssays = dictColumn["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  if(!StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  //Create patient order for second sample
  var dictColumn  = arrTestData[1];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196982_01"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function ThenSampleIsAspiratedForOnlyTheUnaffectedTestsGWT196982_01()
{
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_01");
  var dictColumn  = arrTestData[0];
  var SampleId    = dictColumn["Item"]("SampleId");
  //Verify the first sample gets processed
  if(!StepWaitForSampleStatus(SampleId, "Aspirated"))
    return false;
    
  //Verify Vision HIL Error Flag for second sample and sample unlaoding location of second sample to HIL error sort area
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_01")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
    
  if(!StepWaitForSampleStatus(SampleIDs, "Vision HIL Error"))
    return false;
  
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_01", "F");
    return false;  
  }
}

function GivenSQCIsConfiguredGWT196982_02()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig_1","VisionHILErrorWithHolding");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
      
    if(!StepAddAnErrorSortGroup(sErrorStatus, sSortGroupName))
      return false;
      
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "VisionHILErrorWithHolding"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
    return true;
}

function WhenSampleDeterminedToHaveOneTestWithDefiniteInterferenceGWT196982_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_02");
  var dictColumn  = arrTestData[0];
  var sAssays = dictColumn["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  if(!StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  //Create patient order for second sample
  var dictColumn  = arrTestData[1];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196982_02"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceFullyPopulatedTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function ThenSampleIsAspiratedForOnlyTheUnaffectedTestsGWT196982_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_02");
  var dictColumn  = arrTestData[0];
  var SampleId    = dictColumn["Item"]("SampleId");
  //Verify the first sample gets processed
  if(!StepWaitForSampleStatus(SampleId, "Aspirated"))
    return false;
    
  //Verify Vision HIL Error Flag for second sample and sample unlaoding location of second sample to HIL error sort area
  var dictColumn  = arrTestData[1];
  var SampleId    = dictColumn["Item"]("SampleId");
    
  if(!StepWaitForSampleStatus(SampleId, "Vision HIL Error"))
    return false;
  
  //Verify empty slots are NOT there in HIL Error Sort area
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_02");
  var dictColumn  = arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  if(StepVerifyEmptySlotsInSortArea(TrayType,DrawerNumber, DrawerZone, DrawerPanels, RowNumbers))
    return false;
  
  //Verification of unloading location as Holding area for both the samples   
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_02")
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
  
  //var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_02")
  var dictColumn=arrTestData[2];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers"); 
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_02", "F");
    return false;  
  }
}

function GivenSQCIsConfiguredGWT196982_03()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

 //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig","SampleParking");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
    
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
    return true;
}

function WhenSampleDeterminedToHaveOneTestWithDefiniteInterferenceGWT196982_03()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_03");
  var dictColumn  = arrTestData[0];
  var sAssays = dictColumn["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  if(!StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
  
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  //Create patient order for second sample
  var dictColumn  = arrTestData[1];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT196982_03"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function ThenSampleIsAspiratedForOnlyTheUnaffectedTestsGWT196982_03()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT196982_03");
  var dictColumn  = arrTestData[0];
  var SampleId    = dictColumn["Item"]("SampleId");
  //Verify the first sample gets processed
  if(!StepWaitForSampleStatus(SampleId, "Aspirated"))
    return false;
    
  //Verify Vision HIL Error Flag for second sample and sample unlaoding location of second sample to HIL error sort area
  var dictColumn  = arrTestData[1];
  var SampleId    = dictColumn["Item"]("SampleId");
    
  if(!StepWaitForSampleStatus(SampleId, "Vision HIL Error"))
    return false;
  
  //Verification of unloading location as Holding area for both the samples   
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT196982_03")
  var dictColumn=arrTestData[0];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  if(!StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers))
    return false;
    
  var dictColumn=arrTestData[1];
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers"); 
  var SampleIDs            = dictColumn["Item"]("SampleIDs");
  
  var boolValue = StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_03", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT196982_03", "F");
    return false;  
  }
}

function WhenHILWorkflowConfiguredToBeBasedOnTCSGWT197393()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "TCSSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
}

function ThenOperatorCanConfigureThreeOptionsForDefAndQuestionableInterference()
{
  var boolValue = StepVerifyVisionBasedInterferenceOptions();
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT197393_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT197393_01", "F");
    return false;  
  }
}

function GivenSQCHILDetectionIsOFFGWT206956_01()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting1");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);

}

function GivenChemistryModuleIsConfiguredGWT206956()
{
   //Configure SH
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica")
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  var arrDrawers      = GetTestItemsByTestName(TestDataFile,"SortConfig","SampleParking");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  
  if(!StepVerifySortPanelActive(PanelName))
  {
    if(!StepStopAnalyzer("SH"))
      return false;
    
    if(!StepAddPanel(PanelName))
      return false;
    
    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//  
//    return StepLaunchAndLoginToTrinidad(TestDataFile, DeploymentType)
  }
  else
    return true;
}

function WhenManualHILDetectionIsConfiguredGWT206956_01()
{

/*
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Definitive");
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT206956_01");
  var dictColumn  = arrTestData[0];
  var sAssays = dictColumn["Item"]("Assay");
  var Assays=sAssays["split"](";");
  var sAssay=Assays[0]
  
  if(!StepSetHILIndicesForCHAssay(sAssay,iHindex,iIindex,iLindex))
    return false;
*/
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT206956_01");
  var dictColumn=arrTestData[0]; 
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT206956_01"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function ThenHILCHTestsAreNotAutomaticallyOrderedGWT206956_01()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT206956_01");
  var dictColumn  = arrTestData[0];
  var SampleId    = dictColumn["Item"]("SampleId");
  //Verify the first sample gets processed
  
  if(!StepWaitForSampleStatus(SampleId, "Aspirated"))
    return false;
  
  //Add code to verify CH-HIL entries are not present in Worklist screen
  var boolValue = StepVerifyHILWorkOrderNotPresent(SampleId)
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206956_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206956_01", "F");
    return false;  
  }
}

function GivenSQCHILDetectionIsOFFGWT206956_02()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting3");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);

}

function WhenManualHILDetectionIsConfiguredGWT206956_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT206956_02");
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT206956_02"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function ThenHILCHTestsAreAutomaticallyOrderedGWT206956_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT206956_02");
  var dictColumn  = arrTestData[0];
  var SampleId    = dictColumn["Item"]("SampleId");
  //Verify the first sample gets processed
  
//  if(!StepWaitForSampleStatus(SampleId, "Aspirated"))
//    return false;
  
  var boolValue = StepWaitForSampleStatus(SampleId, "Aspirated");
  
  //Add code to verify CH-HIL entries are present in Worklist screen
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206956_02", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206956_02", "F");
    return false;  
  }
}

function GivenSQCHILDetectionIsOFFGWT206956_03()
{
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");
  
  if(!StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL))
    return false;
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT206956_03");
  var dictColumn=arrTestData[0];
  var sAssay = dictColumn["Item"]("Assay");
      
  return StepSetHILDisabledForAnAssay(sAssay)
}

function WhenManualHILDetectionIsConfiguredGWT206956_03()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT206956_03");
  var dictColumn=arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;  
    
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT206956_03"))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    
  return StepLoadSample()
}

function ThenHILCHTestsAreNotAutomaticallyOrderedGWT206956_03()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile, "PatientOrder", "GWT206956_03");
  var dictColumn  = arrTestData[0];
  var SampleId    = dictColumn["Item"]("SampleId");
  
  //Verify the first sample gets processed
  if(!StepWaitForSampleStatus(SampleId, "Aspirated"))
    return false;
  
  //Add code to verify CH-HIL entries are present in Worklist screen
  var boolValue = StepVerifyHILWorkOrderNotPresent(SampleId);
  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206956_03", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);
    ReportTestStatusToResultXML("SQC-HIL", "GWT206956_03", "F");
    return false;  
  }
}

function GivenSQCIsConfigured_GWT205841_05()
{
   if(!StepVerifyAvailableSQC(1,2))
    return false;

  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  

  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig_1", "VisionHILErrorWithHolding");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  //Configure SH
  if (!StepVerifySortPanelActive(PanelName))

  {  
    if(!StepStopAnalyzer("SH"))
      return false;

      
    if(!StepAddAnErrorSortGroup(sErrorStatus,sSortGroupName))
      return false;
      
    if(!StepAddPanel(PanelName))
      return false;


    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig_1", "VisionHILErrorWithHolding"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//	  
//     return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
  {
    return true;
  } 
} 


function WhenSampleIsDeterminedToBeHavingQuestionableInterference_GWT205841_05()
{

    var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_05");
    var dictColumn = arrTestData[0];
    var Assay                = dictColumn["Item"]("Assay");
    var SampleId             = dictColumn["Item"]("SampleId");
    var Specimen             = dictColumn["Item"]("Specimen");
    var Analyzer             = dictColumn["Item"]("Analyzer");
    var Priority             = dictColumn["Item"]("Priority");
  
    var Assays=Assay["split"](";");
    var sAssay1=Assays[0];
    var sAssay2=Assays[1];
  
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
    var dictColumn=arrTestData[0];
    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
    
    if(!StepSetHILIndicesForIAAssay(sAssay1,iHindex,iIindex,iLindex))
      return false;
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
    var dictColumn=arrTestData[0];
    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
    
    if(!StepSetHILIndicesForIAAssay(sAssay2,iHindex,iIindex,iLindex))
      return false;  
        
    //Update analysis data
    if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205841_05"))
      return false;
    
    //Load patient order
    if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
      return false;

    if(!StepLaunchDVSinSH())
      return false;
     //To simulate Vision sort area not available  
    if(!StepPlaceFullyPopulatedTray())
      return false;
      
    if(!StepPlaceOutputTray())
      return false;
    
    if(!StepPlaceSample("Plain"))
      return false;
    
    return StepLoadSample();
} 


function ThenSampleIsAspiratedForOnlyTheunaffectedTests_GWT205841_05()
{

  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_05");  
  var dictColumn = arrTestData[0];
 
  var Assay        = dictColumn["Item"]("Assay");
  var SampleId     = dictColumn["Item"]("SampleId");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleError = dictColumn["Item"]("VisionError");

  var Assays=Assay["split"](";");
  var sAssay1=Assays[0];
  var sAssay2=Assays[1];
  
  
  //  Wait for sample to come in Vision HIL error status  
  if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    return false;
  
   var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleId, sAssay1,arrSampleError[serr]))
      return false;
  }
    
   var sEvent="Sample {0} has error: {1}. Resolve the appropriate issue.";
  var transsEvent=GetTranslatedString(sEvent,""); 
  transsEvent = ReplaceString(transsEvent, "{0}", SampleId, true);
  transsEvent = ReplaceString(transsEvent, "{1}", "Vision Lipemic", true)
  
   //Verify system message log for the sample which is having H I L errors in system message log page
  if(!StepVerifySystemMessageLog("All", transsEvent))
      return false;

  
   //Verify sample unloading location  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205841_05");
  var dictColumn=arrTestData[0];
  
  var TrayType             = dictColumn["Item"]("TrayType");
  var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
  var DrawerZone           = dictColumn["Item"]("DrawerZone");
  var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
  var RowNumbers           = dictColumn["Item"]("RowNumbers");    
  var SampleIDs            = dictColumn["Item"]("SampleIDs");

// Verify the sample gets unloaded to holding area
  var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)

  
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);

    ReportTestStatusToResultXML("SQC-HIL", "GWT205841_05", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);

    ReportTestStatusToResultXML("SQC-HIL", "GWT205841_05", "F");
    return false;  
  }
} 



function GivenSQCIsConfigured_GWT205841_06()
{
  if(!StepVerifyAvailableSQC(1,2))
    return false;

  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig", "SampleParking");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  //Configure SH
  if (!StepVerifySortPanelActive(PanelName))
  {  
    if(!StepStopAnalyzer("SH"))
      return false;

    if(!StepAddPanel(PanelName))
      return false;

    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;
            
    if(!StepStartAnalyzer("SH"))
      return false;
    
    return GivenAtellicaInitialized();
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    return StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile);
  }
  else
  {
    return true;
  } 
} 



function WhenSampleIsDeterminedToBeHavingQuestionableInterference_GWT205841_06()
{
    var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_06");
    var dictColumn = arrTestData[0];

    var Assay                = dictColumn["Item"]("Assay");
    var SampleId             = dictColumn["Item"]("SampleId");
    var Specimen             = dictColumn["Item"]("Specimen");
    var Analyzer             = dictColumn["Item"]("Analyzer");
    var Priority             = dictColumn["Item"]("Priority");
  
    var Assays=Assay["split"](";");
    var sAssay1=Assays[0];
    var sAssay2=Assays[1];
  
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
    var dictColumn=arrTestData[0];
    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
   
    if(!StepSetHILIndicesForIAAssay(sAssay1,iHindex,iIindex,iLindex))
      return false;
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","NoInterference");
    var dictColumn=arrTestData[0];

    var iHindex                = dictColumn["Item"]("H_index");
    var iIindex                = dictColumn["Item"]("I_index");
    var iLindex                = dictColumn["Item"]("L_index");
  
    if(!StepSetHILIndicesForIAAssay(sAssay2,iHindex,iIindex,iLindex))
      return false;  

        
    //Update analysis data
    if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT205841_06"))
      return false;
    

    //Load patient order
    if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
      return false;



    if(!StepLaunchDVSinSH())
      return false;


    
    if(!StepPlaceOutputTray())
      return false;
    

    if(!StepPlaceSample("Plain"))
      return false;
    
    if(!StepLoadSample())
      return false; 
    else
      return true;
} 
function ThenSampleIsAspiratedForOnlyTheunaffectedTests_GWT205841_06()
{
    var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT205841_06");  
    var dictColumn = arrTestData[0];
 
    var Assay        = dictColumn["Item"]("Assay");
    var SampleId     = dictColumn["Item"]("SampleId");
    var SampleStatus = dictColumn["Item"]("SampleStatus");
    var SampleError = dictColumn["Item"]("VisionError");
    var Assays=Assay["split"](";");
    var sAssay1=Assays[0];
    var sAssay2=Assays[1];
  
    //  Wait for sample to come in Vision HIL error status  
    if(!StepWaitForSampleStatus(SampleId, SampleStatus))
      return false;
  
  var arrSampleError      = SampleError["split"](";");
  for(var serr = 0;serr<arrSampleError["length"];serr++)
  {
      if(!StepVerifySampleTestHasVisionError(SampleId, sAssay1,arrSampleError[serr]))
      return false;
  }
    
   var sEvent="Sample {0} has error: {1}. Resolve the appropriate issue.";
  var transsEvent=GetTranslatedString(sEvent,""); 
  transsEvent = ReplaceString(transsEvent, "{0}", SampleId, true);
  transsEvent = ReplaceString(transsEvent, "{1}", "Vision Lipemic", true)
  
   //Verify system message log for the sample which is having H I L errors in system message log page
  if(!StepVerifySystemMessageLog("All", transsEvent))
      return false;

  
     //Verify sample unloading location  
    var arrTestData = GetTestItemsByTestName(TestDataFile,"SHTraysEmptySlots","GWT205841_06");
    var dictColumn=arrTestData[0];
  
    var TrayType             = dictColumn["Item"]("TrayType");
    var DrawerNumber         = dictColumn["Item"]("DrawerNumber");
    var DrawerZone           = dictColumn["Item"]("DrawerZone");
    var DrawerPanels         = dictColumn["Item"]("DrawerPanels");
    var RowNumbers           = dictColumn["Item"]("RowNumbers");    
    var SampleIDs            = dictColumn["Item"]("SampleIDs");

    // Verify the sample gets unloaded to holding area
    var boolValue =  StepVerifySampleLocation(SampleIDs,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
  

    var attr = Log["CreateNewAttributes"]();
    attr["Bold"] = true;
    attr["Italic"] = true;
    if(boolValue == true)

    {
      attr["FontColor"] = clGreen
       Log["Message"]("Test Passed",null,pmNormal,attr);

      ReportTestStatusToResultXML("SQC-HIL", "GWT205841_06", "P");
      return true;

    }
    else

    {
      attr["FontColor"] = clRed
      Log["Message"]("Test Failed",null,pmNormal,attr);

      ReportTestStatusToResultXML("SQC-HIL", "GWT205841_06", "F");
      return false;  

    }
} 


function GivenCHIsConfiguredAndHILDetectionToBeBasedOnCH_GWT197660_01()
{
  
  if(!StepVerifyAvailableSQC(1,2))
    return false;

    
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig", "SampleParking");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  //Configure SH
  if (!StepVerifySortPanelActive(PanelName))
  {  
    if(!StepStopAnalyzer("SH"))
      return false;

      
    if(!StepAddPanel(PanelName))
      return false;


    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;
          
    if(!StepStartAnalyzer("SH"))
      return false;
    
    if(!GivenAtellicaInitialized())
      return false;
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    if(!StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile));
//      return false;
  }

  if(!StepVerifyModuleStatus("CC","Ready/Standby/Processing"))
    return false;
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting3");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  

  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
  
} 

function WhenAtleastOneTestHasHILThresholdDefinedAndDetectionIsConfiguredToAlwaysOrderHIL_GWT197660_01()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT197660_01");
  var dictColumn = arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  

  if(!StepSetHILDisabledForAnAssay(Assay))
    return false;
 
  //Update analysis data
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT197660_01"))
    return false;
    

  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    

  //Verify work order has HIL tests automatically ordered
  if(!StepVerifyWorkOrderHasHILInterferenceTests(SampleId))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
 
  if(!StepPlaceOutputTray())
    return false;

  if(!StepPlaceSample("Plain"))
    return false;
    
  if(!StepLoadSample())
    return false; 
  else
    return true;
} 


function ThenSampleIsSentToCHAnalyzerForHILEvaluation_GWT197660_01()
{

  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT197660_01");  
  var dictColumn = arrTestData[0];
 
  var Assay        = dictColumn["Item"]("Assay");
  var SampleId     = dictColumn["Item"]("SampleId");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  //var SampleError = dictColumn["Item"]("VisionError");
    
  var boolValue=StepWaitForSampleStatus(SampleId, SampleStatus) 
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
     Log["Message"]("Test Passed",null,pmNormal,attr);

    ReportTestStatusToResultXML("SQC-HIL", "GWT197660_01", "P");
    return true;
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);

    ReportTestStatusToResultXML("SQC-HIL", "GWT197660_01", "F");
    return false;  
  } 
} 




function GivenCHIsConfiguredAndHILDetectionToBeBasedOnCH_GWT197660_02()
{

  if(!StepVerifyAvailableSQC(1,2))
    return false;
    
  ProjPath = ProjectSuite["Path"];
  arrPath  = ProjPath["split"]("Atellica");
  var sConfigPath =  arrPath[0] + "TestcaseLayer\\Initialization\\TestData\\BuildInstrumentsInfo.xml";
  var DeploymentType = GetDeploymentType(sConfigPath)
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "SortConfig", "SampleParking");
  var PanelName       = arrDrawers[0]["Item"]("Panel");
  var sErrorStatus    = arrDrawers[0]["Item"]("ErrorStatus");
  var sSortGroupName  = arrDrawers[0]["Item"]("SortGroupName");
  
  //Configure SH
  if (!StepVerifySortPanelActive(PanelName))

  {  
    if(!StepStopAnalyzer("SH"))
      return false;

      
    if(!StepAddPanel(PanelName))
      return false;


    if(!StepPerformSortConfiguration(TestDataFile, "SortConfig", "SampleParking"))
      return false;
      
     if(!StepStartAnalyzer("SH"))
      return false;
    
    if(!GivenAtellicaInitialized())
      return false;
    
//    if(!StepShutdownAnalyzer("SH"))
//      return false;
//  
//    if(!StepShutdownTrinidad())
//      return false;
//  
//    if(!StepLaunchAnalyzer("SH"))
//      return false;
//
//    if(!StepLaunchAndLoginToTrinidadAvailableModule(TestDataFile));
//      return false;
  }
  

  if(!StepVerifyModuleStatus("CC","Ready/Standby/Processing"))
    return false;
  
  arrDrawers = GetTestItemsByTestName(TestDataFile, "HILConfig", "CHSetting2");
  
  var strHILAnalysis    = arrDrawers[0]["Item"]("HILAnalysis");
  var strCHHILOrdering  = arrDrawers[0]["Item"]("CH-HILOrdering");
  var strDefiniteHIL    = arrDrawers[0]["Item"]("DefiniteHIL");// run unaffected tests
  var strQuestionableHIL = arrDrawers[0]["Item"]("QuestionableHIL");//run all
  
  return StepConfigureHILSettings(strHILAnalysis, strCHHILOrdering, strDefiniteHIL, strQuestionableHIL);
} 


function WhenAtleastOneTestHasHILThresholdDefinedAndDetectionIsConfiguredToAlwaysOrderHIL_GWT197660_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT197660_02");
  var dictColumn = arrTestData[0];
  var Assay                = dictColumn["Item"]("Assay");
  var SampleId             = dictColumn["Item"]("SampleId");
  var Specimen             = dictColumn["Item"]("Specimen");
  var Analyzer             = dictColumn["Item"]("Analyzer");
  var Priority             = dictColumn["Item"]("Priority");
  
  var arrTestData = GetTestItemsByTestName(TestDataFile,"HILIndices","Questionable");
  var dictColumn=arrTestData[0];
  var iHindex                = dictColumn["Item"]("H_index");
  var iIindex                = dictColumn["Item"]("I_index");
  var iLindex                = dictColumn["Item"]("L_index");
    

  if(!StepSetHILIndicesForCHAssay(Assay,iHindex,iIindex,iLindex))
    return false;

 
  //Update analysis data
  if(!StepUpdateAnalysisData(TestDataFile, "AnalysisData", "GWT197660_02"))
    return false;
  
  //Load patient order
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
    

  //Verify work order has HIL tests automatically ordered
  if(!StepVerifyWorkOrderHasHILInterferenceTests(SampleId))
    return false;

  if(!StepLaunchDVSinSH())
    return false;
    
  if(!StepPlaceOutputTray())
    return false;
    
  if(!StepPlaceSample("Plain"))
    return false;
    

  if(!StepLoadSample())
    return false; 
  else
    return true;
} 

function ThenSampleIsSentToCHAnalyzerForHILEvaluation_GWT197660_02()
{
  var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT197660_02");  
  var dictColumn = arrTestData[0];
 
  var Assay        = dictColumn["Item"]("Assay");
  var SampleId     = dictColumn["Item"]("SampleId");

  var SampleStatus = dictColumn["Item"]("SampleStatus");
  var SampleError = dictColumn["Item"]("VisionError");
    
   return StepWaitForSampleStatus(SampleId, SampleStatus);

} 
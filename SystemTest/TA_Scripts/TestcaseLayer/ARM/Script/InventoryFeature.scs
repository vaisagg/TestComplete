//USEUNIT Authentication
//USEUNIT Inventory
//USEUNIT InventoryFeatureSteps
//USEUNIT TCNativeLibraries
//USEUNIT DiagnosticsFeature
//USEUNIT TCCSConfigLibrary

/*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                        TEST ITEMS DETAILS
                                        Modified as on 3 Dec 2018
                                        1.Intialize
                                        2.SmokeTestReagentOverview
                                        3.SmokeTestSuppliesOverview
                                        4.SmokeTestDiagnostics
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/       
                   
                    
                 /*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                        INTEGRATION TEST
                /*^^^^^^^^^^^^^^^^^^^^^^^^^^^*/            
                
function CI_ReagentScenarios()
{ 
    //Test Count
    LogHighlight("Scenario Count [Reagent Overview] : 8")
    
    //Initialize Datafile and XMLS
    InitializeMetaDataHYDRA();
	
    US284142_GWT_01_DisableReagentPack()
    US284142_GWT_02_EnableReagentPack()
    US225839_GWT_01_IAPrimaryCHInventory()
    US225847_GWT_01_TrackOBSForPrimaryReagent()
    US225849_GWT_01_TrackOBSForPiercedChReagentPack()
    US225849_GWT_02_TrackOBSForNotPiercedChReagentPack()
    US225852_GWT_01_TrackOBSForIMPrimaryPack()
    US225852_GWT_03_TrackOBSForCHReagentPack()
 
    //Feature 1
    //FT225700_DisplayReagentRemaining()
    
    //Feature 2
    //FT284141_EnableDisableReagentPack()
    
    //Feature 3
    //FT278989_IMCuvettes_Merged()
    
    //Feature 4
    //FT225702_ReagentOBSExpiration()
    
    //Feature 5
    FT225712_OnBoardReagentInvTracking()
    
    
}

function CI_SuppliesScenarios()
{
    //Test Count
    LogHighlight("Scenario Count [Supplies Overview] : 10")

    //Initialize Datafile and XMLS
    InitializeMetaDataHYDRA();
    
    US279272_GWT_01_CuvetteStatusOK()
    US279272_GWT_02_CuvetteStatusOK()
    US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed()
    US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed()
    US28992_GWT_01_AlertThreshold()
    US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp()
    US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp()
    US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired()
    US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold()
    US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp()

    //Feature 1
    //FT278992_ConfigureAlertThreshold()
    
    //Feaure 2
    //FT259953_IMTSensor_FT247523_IMTBulkSystemFluids()
    
    //Feature 3
    //FT278988_SampleTips()
                 
} 
           
/*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                FEATURES  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*/       
 
                    
//******************************************************************************
//          FEATURE : 225712 : On-board reagent inventory tracking
//******************************************************************************
function FT225712_OnBoardReagentInvTracking()
{

    //US225902_GWT_05
    US225902_GWT_05_UnloadLoadDisabledIMCHReagent(); 
    
    //US225902_GWT_06
    US225902_GWT_06_EnableIMorCHReagentLot(); 
    
    //US225902_GWT_08
    US225902_GWT_08_VerifyPackStatusWhenIMorCHInventoryAlmostEmpty()
    
}
                    
//******************************************************************************
//          FEATURE : 225700 - DisplayReagentRemaining
//******************************************************************************
function FT225700_DisplayReagentRemaining()
{

    //US225839_GWT_01
    US225839_GWT_01_IAPrimaryCHInventory(); 
    
    //US225840_GWT_01 //NO DATA
    //US225840_GWT_01_IAAncillaryAndDiluentInventory(); 
    
    //US225841_GWT_01 //NO DATA  
    //US225841_GWT_01_IAPrimaryProbeWashAndIAAncillaryProbeWashInventory(); 
    
    
    //*****Below are the scenarios from master table : Feature 225700*****
	
	//US225841, US225839, US225836
    US_GROUP03_GWT_01_UnusableCHReagentIMPrimaryReagentInventory();
    
    //US225841, US225840, US225836
    US_GROUP03_GWT_02_UnusableIMAncIMAncWashIMDilIMPriWashInventory();
    
    //US248760, US225839, US225834, US225837
    US_GROUP04_GWT_03_UsableCHReagentPack();
    
    //US248757, US225839, US225834
    US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test();
	
	//US248757, US225839, US225833
    US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test();
	
	//US225841, US248757, US225836
	US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount();
	
	//US225841, US248757, US225840, US225835, US225836
	US_GROUP05_GWT_07_UsableIMAncReagentDiluentAncWashAndTestCount();
	
	//US225843
	US_225843_GWT_09_UnusableRecoverableIACHTestCount();
    
}

//******************************************************************************
//          FEATURE : 284141 - EnableDisableReagentPack
//******************************************************************************
function FT284141_EnableDisableReagentPack()
{
    
    //US284142_GWT_01
    US284142_GWT_01_DisableReagentPack();      
    
    //US284142_GWT_02
    US284142_GWT_02_EnableReagentPack();    
}

//******************************************************************************
//        FEATURE : 278988 - Sample Tips
//******************************************************************************
function FT278988_SampleTips()
{
 
    //US278992_GWT_01
    US28992_GWT_01_AlertThreshold();  
     
    // US278990_GWT_01
    US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed();       
    
    // US278996_GWT_05
    US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed();  
     
}

//******************************************************************************
//        FEATURE : 259953 - IMT Sensor
//        FEATURE : 247523 - IMT Bulk System Fluids 
//        FEATURE : 247524 - Pretreatment Consumable   
//******************************************************************************
function FT259953_IMTSensor_FT247523_IMTBulkSystemFluids_FT247524_PretreatmentConsumable()
{
    
    //MasterList Scenario 1
    US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp();
    
    //MasterList Scenario 2
	  US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp();
    
    //MasterList Scenario 3
	  US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired();
    
    //MasterList Scenario 4
    US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp()
    
    //MasterList Scenario 5
    US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold()
    
}
                         
//******************************************************************************
//          FEATURE : 278989 - IM Cuvettes
//******************************************************************************
function FT278989_IMCuvettes_Merged()
{ 
    
    //US225839_GWT_01
    US225839_GWT_01_IAPrimaryCHInventory(); 

    //US279272_GWT_01
    US279272_GWT_01_CuvetteStatusOK();
    
    //US279272_GWT_02
    US279272_GWT_02_CuvetteStatusOK();
    
    //US225847_GWT_01
    US225847_GWT_01_TrackOBSForPrimaryReagent();
   
     //US225849_GWT_01
    US225849_GWT_01_TrackOBSForPiercedChReagentPack();
   
     //US225852_GWT_03
    US225852_GWT_03_TrackOBSForCHReagentPack();
   
     // US225849_GWT_02
    US225849_GWT_02_TrackOBSForNotPiercedChReagentPack();
   
    //US225852_GWT_01
    US225852_GWT_01_TrackOBSForIMPrimaryPack(); 

}

//******************************************************************************
//          FEATURE : 225702 - Reagent OBS Expiration
//******************************************************************************
function FT225702_ReagentOBSExpiration()
{

    //US225847_GWT_01
    US225847_GWT_01_TrackOBSForPrimaryReagent();
   
     //US225849_GWT_01
    US225849_GWT_01_TrackOBSForPiercedChReagentPack();
   
     //US225852_GWT_03
    US225852_GWT_03_TrackOBSForCHReagentPack();
   
     // US225849_GWT_02
    US225849_GWT_02_TrackOBSForNotPiercedChReagentPack();
   
    //US225852_GWT_01
    US225852_GWT_01_TrackOBSForIMPrimaryPack();
   
    //*****************************************************
    //         NO DATA functions       
    //*****************************************************
    
    //US225847_GWT_02
    //US225847_GWT_02_TrackOBSForAncillaryReagent_1();
    
    //US225847_GWT_03
    //US225847_GWT_03_TrackOBSForAncillaryReagent_2();
    
    //US225848_GWT_01
    //US225848_GWT_01_TrackOBSForAncillaryReagent_1();
    
    //US225848_GWT_02
   // US225848_GWT_02_TrackOBSForAncillaryReagent_2();
     
    //US225852_GWT_02
    //US225852_GWT_02_TrackOBSForIMAncillaryPack();
    
    //*****Below are the scenarios from master table : Feature 225702*****
    
    //US225854, US225856
    US_GROUP02_GWT_01_TrackOBSForIAandCCReagentPack(); 
    
    //US225855, US225852, US225847, US225848
    US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed();
    
    ///US225853
    US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed();
} 

//******************************************************************************
//        FEATURE : 225699 - Expired Reagent Usage   
//******************************************************************************
function FT225699_ExpiredReagentUsage()
{
    //Automating scenarios from master table : Feature 225699
    
    //US225831
    US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled();
    
    //US225831 , US225832, US225829, US225830
    US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled();
    
    //US225831
    US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled();
    
    //US225831
    US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled();
    
    //US225831, US225828, US225829, US225830
    US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled();
    
    //US225831, US225828, US225829, US225830
    US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled();
}


//******************************************************************************
//        FEATURE : 225695 - IA Primary Reagent Mixing 
//******************************************************************************


function FT225695_IAPrimaryRGTMixing()
{
  US_GROUP05_GWT_01_ReagantMixingBelowWarning()//US-225783,225784,225785,225780, 225782
  US_GROUP03_GWT_02_ReagantMixingMeetsWarning() //US- 225783,225785,225782
  US_GROUP04_GWT_03_ReagantMixingMeetsTimeout() //US -225783,225784,225786, 225780
  US_GROUP01_GWT_04_ReagantMixingMeetsTimeoutInDiagnostics() //US-225784
  US_GROUP02_GWT_05_UserConfirmsReagentRemix() //US225735, US225781
  US_GROUP02_GWT_06_UserConfirmsReagentRemixOpenDoorTimer()
} 

//******************************************************************************
//        FEATURE : 247522 - Bulk System Fluids w/ Reservoirs 
//******************************************************************************
function FT247522_BulkSystemFluidsReservoirs()
{
    //*****Below are the scenarios from master table : Feature 247522*****
    
    //Initialize Datafile and XMLS
    InitializeMetaDataHYDRA();
    
    //US247546
    US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired();
    
    //US247549
    US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired();
    
    //US247551, US247552, US268971, US268972, US268973, US268974
    US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired();
}

  
//******************************************************************************
//          FEATURE : 316568 : Liquid Waste
//******************************************************************************
function FT316568_LiquidWaste()
{

    //US317279_GWT_01
    US317279_GWT_01_ProcessTestWhenPrimaryWasteReservoirLevelFullSensorOFF(); 
    
}

//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//                                GWT's   
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  


//******************************************************************************
//       GWTs[FEATURE : 225695 - IA Primary Reagent Mixing ]
//******************************************************************************
function US_GROUP05_GWT_01_ReagantMixingBelowWarning()
{
    
//USER STORY
    Log["AppendFolder"] ("FEATURE: 225695 - IA Primary Reagent Mixing")
    Log.Message("US-225783,225784,225785,225780, 225782");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "I");
    
//    //Prerequisite-- Load IM Primary reagent
    Log.AppendFolder("Prerequisite : Operator loads a new IM Reagent pack or with a valid Barcode and lot not expired");
    if(!LoadIMPrimaryReagent()){//************************************************To be updated
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN - IM Primary Rgt Door is Open
    Log.AppendFolder("GIVEN : Primary Rgt Door is Open "); 
    if(!GivenPrimaryRgtDoorOpen()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    //GIVEN - OpenTime is less than Warning Time
    Log.AppendFolder("GIVEN : OpenTime is less than Warning Time"); 
    if(!GivenRgtDoorOpenLessThanWarningTime()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
    //WHEN - User closes the door
    Log.AppendFolder("WHEN : User closes the door");
    if(!WhenOperatorClosesRgtDoor()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN -open Door countdown timer is removed
    Log.AppendFolder("THEN : open Door countdown timer is removed");
    if(!ThenOpenDoorTimerRemoved()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
        
        
    //THEN System should not display any open door timeout error.
    Log.AppendFolder("THEN : System should not display any open door timeout error.");
    if(!ThenNoDoorTimeoutError()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	;   
    
    
    Log["PopLogFolder"]();
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP05_GWT_01_ReagantMixingBelowWarning", "P");
}


function US_GROUP03_GWT_02_ReagantMixingMeetsWarning()
{
    
//USER STORY
    Log["AppendFolder"] ("FEATURE: 225695 - IA Primary Reagent Mixing")
    Log.Message("US-225783, 225785, 225782");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "I");
//    
//    //Prerequisite-- Load IM Primary reagent
    Log.AppendFolder("Prerequisite : Operator loads a new IM Reagent pack or with a valid Barcode and lot not expired");
    if(!LoadIMPrimaryReagent()){//************************************************To be updated
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN - IM Primary Rgt Door is Open
    Log.AppendFolder("GIVEN : Primary Rgt Door is Open "); 
    if(!GivenPrimaryRgtDoorOpen()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    //GIVEN - OpenTime is less than Warning Time
    Log.AppendFolder("GIVEN : OpenTime is more than Warning Time and less than Timeout"); 
    if(!GivenRgtDoorOpenMoreThanWarningTime()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
    //Then Warning Alert is Displayed and Event log is generated *************************************************
    
    Log.AppendFolder("Then : WarningAlert is Displayed");
    if(!ThenWarningAlertGenerated()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    Log.AppendFolder("Then : EventLog is generated");
    if(!ThenEventLogGeneratedforDoorTimeoutWarning()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
    
    //WHEN - User closes the door
    Log.AppendFolder("WHEN : User closes the door");
    if(!WhenOperatorClosesRgtDoor()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN -open Door countdown timer is removed
    Log.AppendFolder("THEN : open Door countdown timer is removed");
    if(!ThenOpenDoorTimerRemoved()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    
    
    //Then Warning Alert is Removed********************************
    Log.AppendFolder("THEN : Warning Alert is removed");
    if(!ThenWarningAlertIsRemoved()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    
        
        
       
    
    Log["PopLogFolder"]();
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "P");
}



function US_GROUP04_GWT_03_ReagantMixingMeetsTimeout()
{
    
//USER STORY
    Log["AppendFolder"] ("FEATURE: 225695 - IA Primary Reagent Mixing")
    Log.Message("US-225783, 225784, 225786, 225780");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "I");
    
    //Prerequisite-- Load IM Primary reagent
    Log.AppendFolder("Prerequisite : Operator loads a new IM Reagent pack or with a valid Barcode and lot not expired");
    if(!LoadIMPrimaryReagent()){//************************************************To be updated
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN - IM Primary Rgt Door is Open
    Log.AppendFolder("GIVEN : Primary Rgt Door is Open "); 
    if(!GivenPrimaryRgtDoorOpen()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
//    
    //GIVEN - OOpenTime is equal or more than Timeout
    Log.AppendFolder("GIVEN : OpenTime is more than Timeout"); 
    if(!GivenRgtDoorOpenMoreThanTimeout()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
  //  Then Error Alert is Displayed and Event log is generated *************************************************
    
    Log.AppendFolder("Then : ErrorAlert is Displayed");
    if(!ThenErrorAlertGenerated()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    Log.AppendFolder("Then : EventLog is generated");
    if(!ThenEventLogGeneratedforDoorTimeoutError()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
    
    Log.AppendFolder("Then : Reagent Pack status marked with Insufficient Mixing");
    if(!ThenSetPackStatusToInsufficientMixing()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
    
   // WHEN - User closes the door
    Log.AppendFolder("WHEN : User closes the door");
    if(!WhenOperatorClosesRgtDoor()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    
    Log.AppendFolder("Then : Manual Mixing Confirmation Dialog is displayed");
    if(!ThenManualMixConfirmationDisplayed()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    
    //When User Confirms Manual Remix on the Dialog
    Log.AppendFolder("When : User Confirms Manual Remix of Reagent");
    if(!WhenOperatorConfirmsManualRemix()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //Then Insufficient Mixing flag is removed from Reagent pack
    Log.AppendFolder("Then : Insufficient Mixing Flag removed from Reagent Pack");
    if(!ThenRemoveInsufficientMixingFromRgt()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
//    //Then Reagent Pack is back ONLINE
//    Log.AppendFolder("Then : Reagent Pack is Back Online");
//    if(!ThenReagentPackIsBackOnline()){   //To be updated
//        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
//        Log["PopLogFolder"]();
//        Log["PopLogFolder"]();
//        return false;}
//    Log["PopLogFolder"]();
    
    

    
        
        
       
    
    Log["PopLogFolder"]();
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "P");
}



function US_GROUP01_GWT_04_ReagantMixingMeetsTimeoutInDiagnostics() //US-225784
{
  
 //USER STORY
    Log["AppendFolder"] ("FEATURE: 225784 - IA Primary Reagent Mixing")
    Log.Message("US-225784");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "I");
    
//    //Prerequisite-- Load IM Primary reagent
    Log.AppendFolder("Prerequisite : Operator loads a new IM Reagent pack or with a valid Barcode and lot not expired");
    if(!LoadIMPrimaryReagent()){//************************************************To be updated
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN - IM Primary Rgt Door is Closed
    Log.AppendFolder("GIVEN : Primary Rgt Door is Closed "); 
    if(!GivenPrimaryRgtDoorClosed()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
    //When System Enters Diagnostics state
    Log.AppendFolder("When : System Enters Diagnostics State "); 
    if(!WhenSystemEntersDiagnosticsState()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    //When User opens Reagent Door for Time >= Timeout Error
    Log.AppendFolder("When : User opens Reagent Door for Time more than Timeout Error "); 
    if(!WhenReagentDoorOpenedForTimeoutError()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "F");
		    Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    Log.AppendFolder("Then : ErrorAlert is Displayed");
    if(!ThenErrorAlertGenerated()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    Log.AppendFolder("Then : EventLog is generated");
    if(!ThenEventLogGeneratedforDoorTimeoutError()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    
    
    Log.AppendFolder("Then : Reagent Pack status marked with Insufficient Mixing");
    if(!ThenSetPackStatusToInsufficientMixing()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();    
    
    
    //WHEN - User closes the door
    Log.AppendFolder("WHEN : User closes the door");
    if(!WhenOperatorClosesRgtDoor()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    
    Log.AppendFolder("Then : Manual Mixing Confirmation Dialog is displayed");
    if(!ThenManualMixConfirmationDisplayed()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    
    //When User Confirms Manual Remix on the Dialog
    Log.AppendFolder("When : User Confirms Manual Remix of Reagent");
    if(!WhenOperatorConfirmsManualRemix()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //Then Insufficient Mixing flag is removed from Reagent pack
    Log.AppendFolder("Then : Insufficient Mixing Flag removed from Reagent Pack");
    if(!ThenRemoveInsufficientMixingFromRgt()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
        
    Log.AppendFolder("Then : Exit Diagnostics and bring Module to Ready");
    if(!ThenExitDiagnosticsAndResumeHydra()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
        
    
    Log["PopLogFolder"]()
     
    Log["PopLogFolder"]();
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP01_GWT_04_ReagantMixingMEetsTimeoutInDiagnostics", "P");

}

/*------ US225735, US225781 ------*/
function US_GROUP02_GWT_05_UserConfirmsReagentRemix()
{
    
    //USER STORY
    Log["AppendFolder"] ("FEATURE: 225695 - IA Primary Reagent Mixing")
    Log.Message("US225735 :Stop mixing (safety) and display an Open Door timer");
    Log.Message("US225781 :Remove the 'Insufficient Mixing' flag from the associated reagent packs");
    
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "I");
    
    /************************************** PRE-REQUISITES ************************************************/
    
    //Prerequisite-- Load IM Primary reagent
    Log.AppendFolder("Prerequisite : Operator loads a new IM Reagent pack or with a valid Barcode and lot not expired");
    if(!LoadIMPrimaryReagent()){//************************************************To be updated
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()

    //Prerequisite : Open Reagent Door
    Log.AppendFolder("Prerequisite : Open Reagent Door"); 
    if(!GivenPrimaryRgtDoorOpen()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
                Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
   
    //Prerequisite - OpenTime is equal or more than Timeout
    Log.AppendFolder("GIVEN : OpenTime is more than Timeout"); 
    if(!GivenRgtDoorOpenMoreThanTimeout()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
                Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    /***************************************************************************************************************/
    
   // GIVEN - Primary Rgt Door is Closed 
    Log.AppendFolder("GIVEN : Primary Rgt Door is Closed");
    if(!GivenPrimaryRgtDoorClosed()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
      
    //GIVEN : Re-Mix Confirmation is Pending
    Log.AppendFolder("Given : Re-Mix Confirmation is Pending");
    if(!GivenRemixConfirmationPending()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN : User Opens Reagent Door
    Log.AppendFolder("WHEN : Open Reagent Door"); 
    if(!WhenPrimaryRgtDoorOpen()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
                Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
   
    //THEN1 : continue to display re-mix confirmation dialog
    Log.AppendFolder("Then : continue to display re-mix confirmation dialog ");
    if(!ThenRemixConfirmationContinuedToDisplay()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN2 : No Open Door Timer
    Log.AppendFolder("Then : No Open Door Timer ");
    if(!ThenNoOpenDoorTimer()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN3 : Once User Confirms OK on the remix Confirmation dialog
    Log.AppendFolder("Then : User Confirms Manual Remix of Reagent ");
    if(!ThenOperatorConfirmsManualRemix()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN4 : Remove the dialog
    Log.AppendFolder("Then : User Confirms Manual Remix of Reagent, 1) Remove the dialog");
    if(!ThenManualRemixDialogRemoved()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN5 : Insufficient Mixing flag is removed from Reagent pack
    Log.AppendFolder("Then : Insufficient Mixing Flag removed from Reagent Pack");
    if(!ThenRemoveInsufficientMixingFromRgt()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    Log["PopLogFolder"]();
         
    //Result.xml -Pass
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_05_UserConfirmsReagentRemix", "P");
}
   
//Bhawya
function US_GROUP02_GWT_06_UserConfirmsReagentRemixOpenDoorTimer()
{
    
    //USER STORY
    Log["AppendFolder"] ("FEATURE: 225695 - IA Primary Reagent Mixing")
    Log.Message("US 225735 :Stop mixing (safety) and display an Open Door timer");
    Log.Message("US 225781 :Remove the 'Insufficient Mixing' flag from the associated reagent packs");
    
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP02_GWT_06_UserConfirmsReagentRemix", "I");
    
    /************************************** PRE-REQUISITES ************************************************/
    
    //Prerequisite-- Load IM Primary reagent
    LogHighlight("Prerequisite : Operator loads a new IM Reagent pack or with a valid Barcode and lot not expired");
    //if(!IMRgtPackLoaded()){
        //ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        //Log["PopLogFolder"]();
        //Log["PopLogFolder"]();
        //return false;}
    Log["PopLogFolder"]()

    //Prerequisite : Open Reagent Door
    LogHighlight("Prerequisite : Open Reagent Door"); 
    if(!GivenPrimaryRgtDoorOpen()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
                Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
   
    //Prerequisite - OpenTime is equal or more than Timeout
    LogHighlight("GIVEN : OpenTime is more than Timeout"); 
    if(!GivenRgtDoorOpenMoreThanTimeout()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
                Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    //Prerequisite : Error Alert is Displayed and Event log is generated 
    LogHighlight("Prerequisite : ErrorAlert is Displayed");
    if(!ThenErrorAlertGenerated()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    LogHighlight("Prerequisite : EventLog is generated");
    if(!ThenEventLogGeneratedforDoorTimeoutError()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    /***************************************************************************************************************/
    
   // GIVEN - Primary Rgt Door is Closed 
    LogHighlight("GIVEN : Primary Rgt Door is Closed");
    if(!GivenOperatorClosesRgtDoor()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN : Re-Mix Confirmation is Pending
    LogHighlight("Given : Re-Mix Confirmation is Pending");
    if(!GivenRemixConfirmationPending()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    
    //WHEN : User Confirms Manual Remix on the Dialog
    LogHighlight("When : User Confirms Manual Remix of Reagent");
    if(!WhenOperatorConfirmsManualRemix()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN : Insufficient Mixing flag is removed from Reagent pack
    LogHighlight("Then : Insufficient Mixing Flag removed from Reagent Pack");
    if(!ThenRemoveInsufficientMixingFromRgt()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    

    //WHEN : User Opens Reagent Door
    LogHighlight("WHEN : Open Reagent Door"); 
    if(!WhenPrimaryRgtDoorOpen()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
                Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    //THEN : Display new Open Door Timer 
    LogHighlight("THEN : Display new Open Door Timer"); 
    if(!ThenStartNewDoorTimer()){
        ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "F");
                Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
    
    Log["PopLogFolder"]();
         
    //Result.xml -Pass
    ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP04_GWT_03_ReagantMixingMeetsTimeout", "P");
}

   
//******************************************************************************
//         GWT's [FEATURE -225700  DisplayReagentRemaining]         
//******************************************************************************
//Bhawya
/*------ US225839 ------*/
function US225839_GWT_01_IAPrimaryCHInventory(){

    //USER STORY
    LogHighlight("Scenario : Verify IAPrimary and CHInventory")
    Log.Message("FEATURE: 225700 - DisplayReagentRemaining")
    Log.Message("US225839 : Display the remaining inventory when a usable or unusable IA primary or CH Reagent pack is loaded")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US225839_GWT_01_IAPrimaryCHInventory", "I");

    //GIVEN
    Log.AppendFolder("GIVEN : Usable/Unusable IA and CH Reagent loaded");
    Log["Warning"]("Loading Reagent implementation in progress")
    Log["PopLogFolder"]()


    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Reagent overview screen");
    if(!WHENOperatorNavigatesToReagentOverviewScreen()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US225839_GWT_01_IAPrimaryCHInventory", "F");
		    Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()


    //THEN
    Log.AppendFolder("THEN : Inventory should be displayed as remaining Test count for CH and IM primary");
    if(!THENDisplayReagentRemaining()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US225839_GWT_01_IAPrimaryCHInventory", "F");
        Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US225839_GWT_01_IAPrimaryCHInventory", "P");

}

/*------ US225840 ------*/
function US225840_GWT_01_IAAncillaryAndDiluentInventory(){

    //USER STORY
    LogHighlight("Scenario : Verify IAAncillary And Diluent Inventory")
    Log.Message("FEATURE: 225700 - DisplayReagentRemaining")
    Log.Message("US225840 : Display the remaining inventory when a usable or unusable IA Ancillary or Diluent pack is loaded")

    //GIVEN
    Log.AppendFolder("GIVEN : Usable/Unusable IA Ancillary or Diluent pack loaded");
    Log["Warning"]("Loading Reagent implementation in progress")
    Log["PopLogFolder"]()

    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Reagent overview screen");
    WHENOperatorNavigatesToReagentOverviewScreen();
    Log["PopLogFolder"]();

    //THEN
    Log.AppendFolder("THEN : Inventory should be displayed in unit mL for IA Ancillary or Diluent packs");
    THENDisplayReagentRemaining();
    Log["PopLogFolder"]()

}

/*------ US225841 ------*/
function FT225700_US225841_GWT_01_IAPrimaryProbeWashAndIAAncillaryProbeWashInventory(){

    //USER STORY
    LogHighlight("Scenario : Verify IAPrimaryProbeWash And IAAncillaryProbeWash Inventory")
    Log.Message("FEATURE: 225700 - DisplayReagentRemaining")
    Log.Message("US225840 : Display the remaining inventory when a usable or unusable IA Primary probe wash or IA Ancillary Probe wash is loaded")

    //GIVEN
    Log.AppendFolder("GIVEN : Usable/Unusable IA Primary or IA Ancillary probe wash is loaded");
    Log["Warning"]("Loading Reagent implementation in progress")
    Log["PopLogFolder"]()

    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Reagent overview screen");
    WHENOperatorNavigatesToReagentOverviewScreen();
    Log["PopLogFolder"]();

    //THEN
    Log.AppendFolder("THEN : Inventory should be displayed in unit Testcount for IA Primary Probe wash");
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Inventory should be displayed in unit mL for IA Ancillary Probe wash");
    THENDisplayReagentRemaining();
    Log["PopLogFolder"]()

}

//Shahana
/*------ US225841, US225839, US225836 ------*/
function US_GROUP03_GWT_01_UnusableCHReagentIMPrimaryReagentInventory()
{
    //USER STORY
    LogHighlight("Scenario : Verify Unusable CHReagent and IMPrimaryReagent Inventory")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US225841 : Display the remaining inventory when a Usable or Unusable IA Primary or Ancillary Probe Wash reagent pack is loaded");
    Log.Message("US225839 : Display the remaining inventory when a Usable or Unusable IA Primary or CH reagent pack is loaded");
    Log.Message("US225836 : Indication of the remaining inventory summed over all the Wash packs with the same product code ");
    
    InitializeMetaDataHYDRA();
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_01_UnusableCHReagentIMPrimaryReagentInventory", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Operator loaded a CH and IM Reagent Pack");
    if(!GivenOperatorLoadsCHAndIAPrimaryReagentPack())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_01_UnusableCHReagentIMPrimaryReagentInventory", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN
    Log.AppendFolder("WHEN : Reagent Status is Unusable");
    if(!WhenCHAndIMReagentStatusIsUnusable())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_01_UnusableCHReagentIMPrimaryReagentInventory", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN
    Log.AppendFolder("THEN : Reagent inventory Value should display the remaining usable amount in the aspirated pack well (Units = testcount)");
    if(!ThenSystemShouldDisplayCHAndIMReagentCount())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_01_UnusableCHReagentIMPrimaryReagentInventory", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_01_UnusableCHReagentIMPrimaryReagentInventory", "P");
}

/*------ US225841, US225840, US225836 ------*/
function US_GROUP03_GWT_02_UnusableIMAncIMAncWashIMDilIMPriWashInventory()
{
    //USER STORY
    LogHighlight("Scenario : Verify Unusable IMAncWash and IMDil and IMPriWash Inventory")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US225841 : Display the remaining inventory when a Usable or Unusable IA Primary or Ancillary Probe Wash reagent pack is loaded");
    Log.Message("US225840 : Display the remaining inventory when a Usable or Unusable IA Ancillary or Diluent reagent pack is loaded");
    Log.Message("US225836 : Indication of the remaining inventory summed over all the Wash packs with the same product code ");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP3_GWT_02_UnusableIMAncIMAncWashIMDilIMPriWashInventory", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Operator loaded an IA Ancillary/IA AncillaryWash/IA Diluent reagent/IA Primary Wash Reagent");
    if(!GivenOperatorLoadsIMAncIMAncWashIMDilIMPriWashReagentPack())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP3_GWT_02_UnusableIMAncIMAncWashIMDilIMPriWashInventory", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN
    Log.AppendFolder("WHEN : Reagent Status is Unusable");
    if(!WhenReagentStatusIsUnusable())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP3_GWT_02_UnusableIMAncIMAncWashIMDilIMPriWashInventory", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN
    Log.AppendFolder("THEN : Reagent inventory Value should display the remaining reagent amount summed over all the packs for same product code (Units = mL)");
    if(!ThenSystemShouldDisplayRemainingInventoryValueAsmLUnit())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP3_GWT_02_UnusableIMAncIMAncWashIMDilIMPriWashInventory", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP3_GWT_02_UnusableIMAncIMAncWashIMDilIMPriWashInventory", "P");
}

/*------ US248760, US225839, US225834, US225837 ------*/
function US_GROUP04_GWT_03_UsableCHReagentPack()
{
    
    //USER STORY
    LogHighlight("Scenario : Verify Usable CHReagentPack Inventory")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US248760 : Update Pack inventory for the aspirated CH pack from a pack well");
    Log.Message("US225839 : Display the remaining inventory when a Usable or Unusable IA Primary or CH reagent pack is loaded");
    Log.Message("US225834 : Indication of the remaining inventory summed over all the packs for a particular tests");
    Log.Message("US225837 : Indication of the remaining inventory summed over all the packs for particular test");
    
    InitializeMetaDataHYDRA();
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP04_GWT_03_UsableCHReagentPack", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Operator loaded a CH Reagent Pack");
    Log.Message("Loading CH reagents in progress");
    if(!GivenOperatorLoadsCHReagent())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP04_GWT_03_UsableCHReagentPack", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("WHEN : Reagent Status is Usable");
    if(!WhenCHReagentStatusIsUsable())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP04_GWT_03_UsableCHReagentPack", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 2
    Log.AppendFolder("WHEN : System aspirates the reagent from one of the pack well");
    var CurrentCHReagentCount=WHENSystemAspiratesCHReagent();
    if(CurrentCHReagentCount==false)
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP04_GWT_03_UsableCHReagentPack", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Reagent inventory Value should display the remaining usable amount in the aspirated pack well (Units = testcount)");
    if(!ThenSystemShouldDisplayCHReagentCount(CurrentCHReagentCount))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP04_GWT_03_UsableCHReagentPack", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP04_GWT_03_UsableCHReagentPack", "P");
}

/*------ US248757, US225839, US225834 ------*/
function US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test()
{
    
    //USER STORY
    LogHighlight("Scenario : Verify Inventory of IMReagentPack UsedBy 1 Test")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US248757 : Update the pack inventory for the aspirated IM reagent from a pack well");
    Log.Message("US225839 : Display the remaining inventory when a Usable or Unusable IA Primary or CH reagent pack is loaded");
    Log.Message("US225834 : Indication of the remaining inventory summed over all the packs for a particular tests");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "I");
    
    InitializeMetaDataHYDRA();
    //Initialize variables
    var PatientOrderColName="FT225700_Group3_GWT04b";
    var ReagentColName="FT225700_GROUP03_GWT_04_IM";
    
    //GIVEN
    Log.AppendFolder("GIVEN : IA Primary Pack is used by 1 test");
    CurrentIMReagentCount=GivenIAPrimaryPackIsUsedBy1Test();
    if(CurrentIMReagentCount==false)
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("WHEN : Reagent Status is Usable");
    if(!WhenIMReagentStatusIsUsable(ReagentColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 2
    Log.AppendFolder("WHEN : System aspirates the reagent from one of the pack well");
    if(!WHENSystemAspiratesIMReagent(PatientOrderColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Reagent inventory Value should display the remaining usable amount summed over all the packs (Units = testcount)");
    if(!ThenSystemShouldDisplayIMReagentCount(CurrentIMReagentCount,ReagentColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "P");
}

/*------ US248757, US225839, US225833 ------*/
function US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test()
{
    //USER STORY
    LogHighlight("Scenario : Verify Inventory of IMReagentPack Used by More Than 1 Test")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US248757 : Update the pack inventory for the aspirated IM reagent from a pack well");
    Log.Message("US225839 : Display the remaining inventory when a Usable or Unusable IA Primary or CH reagent pack is loaded");
    Log.Message("US225834 : Indication of the remaining inventory summed over all the packs for EACH of the tests  (shared by multiple tests)");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test", "I");
    
    //Initialize variables
    var PatientOrderColName="FT225700_Group3_GWT05b";
    var ReagentColName="FT225700_GROUP03_GWT_05_IM";
    
    //GIVEN
    Log.AppendFolder("GIVEN : IA Primary Pack is used by >1 test");
    CurrentIMReagentCount=GivenIAPrimaryPackIsUsedByMoreThan1Test();
    if(CurrentIMReagentCount==false)
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("WHEN : Reagent Status is Usable");
    if(!WhenIMReagentStatusIsUsable(ReagentColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 2
    Log.AppendFolder("WHEN : System aspirates the reagent from one of the pack well");
    if(!WHENSystemAspiratesIMReagent(PatientOrderColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Reagent inventory Value should display the remaining usable amount summed over all the packs (Units = testcount)");
    if(!ThenSystemShouldDisplayIMReagentCount(CurrentIMReagentCount,ReagentColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_05_UsableIMReagentPackUsedByMoreThan1Test", "P");
}

//Ramitha
/*------ US225841, US248757, US225836 ------*/
function US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount()
{
    
    //USER STORY
    LogHighlight("Scenario : Verify Inventory of Usable IMPrimaryWash")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US225841 : Display the remaining inventory when a Usable or Unusable IA Primary or Ancillary Probe Wash reagent pack is loaded");
    Log.Message("US248757 : Update the pack inventory for the aspirated IM reagent from a pack well");
    Log.Message("US225836 : Indication of the remaining inventory summed over all the Wash packs with the same product code");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Operator loaded an IA Primary Wash reagent");    
    arrIMReagent = GivenLoadIAPrimaryAndPrimaryWashReagent();
    if(!arrIMReagent) {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("WHEN : Reagent Status is Usable");

    var ReagentColNameIM = "UsableIMReagent";
    var ReagentColNamePW = "UsablePW3Reagent";    
    var ReagentStatusIM = WhenIMReagentStatusIsUsable(ReagentColNameIM);
    var ReagentStatusPW = WhenIMReagentStatusIsUsable(ReagentColNamePW);
    
    if(!ReagentStatusIM && !ReagentStatusPW)
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 2
    Log.AppendFolder("WHEN : System aspirates the reagent from one of the pack well");
    var PatientOrderColName="FT225700_Group3_GWT06";
    if(!WHENSystemAspiratesIMReagent(PatientOrderColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();
    
    //THEN1
    Log.AppendFolder("THEN : Reagent inventory Value should display the remaining usable amount summed over all the packs (Units = ml)");

    var ReagentCountIM = ThenSystemShouldDisplayIMReagentCount(arrIMReagent[0],ReagentColNameIM);
    var ReagentCountPW = ThenSystemShouldDisplayIMReagentCount(arrIMReagent[1],ReagentColNamePW);
    
    if(!ReagentCountIM && !ReagentCountPW)
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]();
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "P");
}

/*------ US225841, US248757, US225840, US225835, US225836 ------*/
function US_GROUP05_GWT_07_UsableIMAncReagentDiluentAncWashAndTestCount()
{
    
    //USER STORY
    LogHighlight("Scenario : Verify Inventory for usable IMAncReagent and  DiluentAncWash")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US225841 : Display the remaining inventory when a Usable or Unusable IA Primary or Ancillary Probe Wash reagent pack is loaded");
    Log.Message("US248757 : Update the pack inventory for the aspirated IM reagent from a pack well");
    Log.Message("US225836 : Indication of the remaining inventory summed over all the Wash packs with the same product code");
    Log.Message("US225840 : Display the remaining inventory when a Usable or Unusable IA Ancillary or Diluent reagent pack is loaded");
    Log.Message("US225835 : Indication of the remaining inventory summed over all the packs with the same product code");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Operator loaded an IA Ancillary/Ancillary wash/Diluent reagent");               
    arrIMReagent = GivenLoadIAPrimaryIAAncDiluentAncWashReagent();
    if(!arrIMReagent) {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("WHEN : Reagent Status is Usable");
    var ReagentColNameIM = "UsableIMReagent";
    var ReagentColNameAPW = "UsableAPW2Reagent";
    var ReagentColNameAncillary = "UsableIAAncReagent"; // MDil2 is IA ancillary and Diluent as well
    
    var ReagentStatusIM = WhenIMReagentStatusIsUsable(ReagentColNameIM);
    var ReagentStatusAPW = WhenIMReagentStatusIsUsable(ReagentColNameAPW);
    var ReagentStatusAnc = WhenIMReagentStatusIsUsable(ReagentColNameAncillary);
   
    if(!ReagentStatusIM && !ReagentStatusAPW && !ReagentStatusAnc)
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 2
    Log.AppendFolder("WHEN : System aspirates the reagent from one of the pack well");
    var PatientOrderColName="FT225700_Group5_GWT07";
    if(!WHENSystemAspiratesIMReagent(PatientOrderColName))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();
    
    //THEN
    Log.AppendFolder("THEN : Reagent inventory Value should display the remaining usable amount summed over all the packs (Units = testcount)");

    var ReagentCountIM = ThenSystemShouldDisplayIMReagentCount(arrIMReagent[0],ReagentColNameIM);
    var ReagentCountAPW = ThenSystemShouldDisplayIMReagentCount(arrIMReagent[1],ReagentColNameAPW);
    var ReagentCountIMAnc = ThenSystemShouldDisplayIMReagentCount(arrIMReagent[2],ReagentColNameAncillary);
    
    if(!ReagentCountIM && !ReagentCountAPW && !ReagentCountIMAnc)
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]();
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "P");
}

/*------ US225843 ------*/
function US_225843_GWT_09_UnusableRecoverableIACHTestCount()
{
    
    //USER STORY
    LogHighlight("Scenario : Verify Inventory for unusable Recoverable IA and CH Reagents")
    Log.Message("FEATURE: 225700 - Display Reagent Remaining");
    Log.Message("US225843 : Reason(s) when a loaded reagent pack is Uunusable-RECOVERABLE");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Operator loaded a reagent pack (CH/IA)");               
    if(!GivenIMAndCHReagentLoaded()) {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN 
    Log.AppendFolder("WHEN : Reagent status is Unusable - Recoverable");   
    if(!WhenReagentIsUnusableRecoverable())
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN
    Log.AppendFolder("THEN : Reagent details should display below status and flag for respective errors: Status 'Error' and flag 'Lot inactive' ");    
    var IAStatusAndFlag="FT_225700_GWT09_IAErrors"; //Should be same barcode which is loaded 
    var CHStatusAndFlag="FT_225700_GWT09_CHErrors";
    if(!ThenReagentDetailsForStatusAndFlag(IAStatusAndFlag) && !ThenReagentDetailsForStatusAndFlag(CHStatusAndFlag))
    {
        ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_06_UsableIMPrimaryWashAndTestCount", "F");
		    Log["PopLogFolder"]()
        return false;
    }
    Log["PopLogFolder"]();
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_DisplayReagentRemaining", "US_GROUP03_GWT_04_UsableIMReagentPackUsedBy1Test", "P");
}


//******************************************************************************
//         GWT's [FEATURE -284141 - EnableDisableReagentPack]         
//******************************************************************************

//Bhawya

/*------ US284142 ------*/
function US284142_GWT_01_DisableReagentPack(){
        
    //USER STORY
    LogHighlight("Scenario : Disable Reagent Pack")
    Log.Message("FEATURE: 284141 - EnableDisableReagentPack")
    Log.Message("US284142 : IM/CH Reagent Pack Disable/Enable")

    //Result.xml - In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_01_DisableReagentPack", "I"); 
        
    //GIVEN
    Log.AppendFolder("PreRequisite : Operator Navigates to Reagent Overview");
    if(!GivenOperatorNavigatesToReagentOverviewScreen()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_01_DisableReagentPack", "F");
        return false
    }
    Log["PopLogFolder"]()
        
     //Iterate for all Reagent types
    Returnval =true
    var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","EnableDisableReagentPack");
    dataCount = arrTestData.length
    for(i =0 ;i<dataCount ; i++){
        
          //Read data
          dictColumn=arrTestData[i];

          //GIVEN
          Log.AppendFolder("GIVEN : IM/CH Reagent pack is ENABLED");
          if(!GivenReagentPackIsEnabled(dictColumn)){
              ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_01_DisableReagentPack", "F");
              Returnval =false
              continue;
          }
          Log["PopLogFolder"]()

          //WHEN
          Log.AppendFolder("WHEN : User DISABLES the Reagent Pack");
          if(!WHENUserDisablesReagentPack(dictColumn)){
              ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_01_DisableReagentPack", "F");
              Returnval =false
              continue;
          }
          Log["PopLogFolder"]();

          //THEN
          Log.AppendFolder("THEN : Reagent Details screen displayed a disabled state");
          if(!THENReagentPackIsDisabled(dictColumn)){
              ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_01_DisableReagentPack", "F");
              Returnval =false
              continue;
          }
          Log["PopLogFolder"]()
    
          //THEN *****
          Log.AppendFolder("THEN : Reagent Loading Screen displayes unusable pack");
          Log["Warning"]("Not Implemented")
          Log["PopLogFolder"]()
    
          //THEN *****
          Log.AppendFolder("THEN : No new tests are scheduled");
          Log["Warning"]("Not Implemented")
          Log["PopLogFolder"]()
    
          //THEN *****
          Log.AppendFolder("THEN : Scheduled tests will run to completion");
          Log["Warning"]("Not Implemented")
          Log["PopLogFolder"]()
    
          //THEN *****
          Log.AppendFolder("THEN : Inventory and time based criteria will continue to be monitored");
          Log["Warning"]("Not Implemented")
          Log["PopLogFolder"]()
    
          //Result.xml -Pass
          if(Returnval)
            ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_01_DisableReagentPack", "P");  
    }
    
    //LogHighLight Close
    Log["PopLogFolder"]()
}

/*------ US284142 ------*/
function US284142_GWT_02_EnableReagentPack(){

    //USER STORY
    LogHighlight("Scenario : Enable Reagent Pack")
    Log.Message("FEATURE: 284141 - EnableDisableReagentPack")
    Log.Message("US284142 : IM Reagent Pack Disable/Enable")

    //Result.xml - In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_02_EnableReagentPack", "I");
    
    //PREREQ
    Log.AppendFolder("PreRequisite : User Navigates to Reagent Overview");        
    if(!GivenOperatorNavigatesToReagentOverviewScreen()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_02_EnableReagentPack", "F");
        return false;
    }
    Log["PopLogFolder"]()
      
    //Iterate for all Reagent types
    Returnval =true
    var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","EnableDisableReagentPack");
    dataCount = arrTestData.length
    for(i =0 ;i<dataCount ; i++){
        
          //Read data
          dictColumn=arrTestData[i];
          Log.AppendFolder("GIVEN : IM/CH Reagent pack is DISABLED");   
          if(!GivenReagentPackIsDisabled(dictColumn)){
              ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_02_EnableReagentPack", "F");
              Returnval =false
              continue;
          }
          Log["PopLogFolder"]()

          //WHEN
          Log.AppendFolder("WHEN : User ENABLES the Reagent Pack");
          if(!WHENUserEnablesReagentPack(dictColumn)){
              ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_02_EnableReagentPack", "F");
              Returnval =false
              continue;
          }
          Log["PopLogFolder"]();

          //THEN
          Log.AppendFolder("THEN : Reagent Details screen no longer displayes a disabled state");
          if(!THENReagentPackIsEnabled(dictColumn)){
              ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_02_EnableReagentPack", "F");
              Returnval =false
              continue;
          }
          Log["PopLogFolder"]()
    
          //THEN *****
          Log.AppendFolder("THEN : Reagent Loading Screen no longer displayes pack as an unusable pack");
          Log["Warning"]("Not Implemented")
          Log["PopLogFolder"]()
    
          //THEN *****
          Log.AppendFolder("THEN : Reagent pack should be available to use by new tests");
          Log["Warning"]("Not Implemented")
          Log["PopLogFolder"]()
        
          //Result.xml -Pass
          if(Returnval)
            ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US284142_GWT_02_EnableReagentPack", "P");
    }
}


//******************************************************************************
//         GWT's [FEATURE -278988 - SampleTips]         
//******************************************************************************
//Bhawya
/*------  US278990 ------*/
function US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed(){

    //USER STORY
    LogHighlight("Scenario : Track InvTip Trays which are Loaded but not used")
    Log.Message("FEATURE: 278988 - Sample Tips")
    Log.Message("US278990 : Track Sample Tips Inventory")

    //Result.xml - In Progress
    ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Sample Tips are Loaded in Tray 1 and Tray 2 and Not used by system");
    if(!GivenUpdateTray1andTray2InventoryDB()){
        ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();
    
       
    //Launch and Login to ARM
    ShutDownARM();
    aqUtils["Delay"](5000,"Wait for shutdown");
    if(!LaunchAndLoginHydra()){
		Log["PopLogFolder"]()
		return false
     }
      
    //WHEN
    Log.AppendFolder("WHEN : Operator checks for Supplies");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();

    //THEN
    Log.AppendFolder("THEN : Tray 1 and Tray2 Sample tip Inventory should display 120 tips Remaining");
    if(!THENCaptureSampleTipInventory()){
        ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278990_GWT_01_TrackInvTipTraysLoadedButNotUsed", "P");

}

/*------  US278996 ------*/
function US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed(){

    //USER STORY
    LogHighlight("Scenario : Verify Sample TipTray1 Empty & Tray2 Loaded NotUsed")
    Log.Message("FEATURE: 278988 - Sample Tips")
    Log.Message("US278996 : Sample Tips Status Empty")

    //Result.xml - In Progress
    ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Sample Tip Tray1 depleted and Tray 2 loaded not used");
    if(!GivenUpdateTray1EmptyandTray2InventoryDB()){
        ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]();
    
    //Launch and Login to ARM
    ShutDownARM();
    aqUtils["Delay"](5000,"Wait for shutdown");
    if(!LaunchAndLoginHydra()){
		Log["PopLogFolder"]()
		return false;
    }
      
    //WHEN
    Log.AppendFolder("WHEN : Operator checks for Supplies");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();

    //THEN
    Log.AppendFolder("THEN : Tray2 Sample tip Inventory should display 120 tips Remaining");
    Log["PopLogFolder"]()
    Log.AppendFolder("THEN : Tray1 Sample tip Inventory should display Empty");
    if(!THENCaptureSampleTipInventoryTry1Empty()){
        ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_Supplies_SampleTips", "US278996_GWT_05_SampleTipTray1EmptyAndTray2LoadedNotUsed", "P");

}

//Amar
/*------  US278992 ------*/
function US28992_GWT_01_AlertThreshold()
{

    //USER STORY
    LogHighlight("Scenario : Verify Sample TipTray Alert Threshold")
    Log.Message("FEATURE: US278992 - Configure Alert Threshold for Sample Tips")
    Log.Message("US278992 : AlertThreshold")
    
     //Result.xml -In Progress
    ReportTestStatusToResultXML("Tips_AlertThreshold", "US28992_GWT_01_AlertThreshold", "I");
        
    //GIVEN
    Log.AppendFolder("GIVEN : Tray 1 is loaded and in use by the system");
     if(!GivenUpdateThreshold()){
        ReportTestStatusToResultXML("Inventory_DisplayReagentRemaining", "US28992_GWT_01_AlertThreshold", "F");
		Log["PopLogFolder"]()
        return false
    }
     Log["PopLogFolder"]()
    
     //Launch and Login to ARM
     ShutDownARM();
     aqUtils["Delay"](5000,"Wait for shutdown");
     LaunchAndLoginHydra()
    
    //WHEN
    Log.AppendFolder("WHEN : Tray1 is running low on tips");
   
   // WHEN User checks for supplies threshold;
     if(!WHENOperatorChecksForSuppliesThreshold()){
        ReportTestStatusToResultXML("Tips_AlertThreshold", "US28992_GWT_01_AlertThreshold", "F");
		Log["PopLogFolder"]()
        return false
     }
    Log["PopLogFolder"]()

    //THEN
    Log.AppendFolder("THEN : A visual indication is seen when the threshold value is met");
   // THENReagentPackIsDisabled();
    if(!THENCaptureSampleTipInventoryThreshold()){
        ReportTestStatusToResultXML("Tips_AlertThreshold", "US28992_GWT_01_AlertThreshold", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Tips_AlertThreshold", "US28992_GWT_01_AlertThreshold", "P");
    
}


//******************************************************************************
//         GWT's [FEATURE : 278989 - IM Cuvettes]         
//******************************************************************************
//Shahana
/*------ US279272 ------*/
function US279272_GWT_01_CuvetteStatusOK()
{
    //USER STORY
    LogHighlight("Scenario : Verify Cuvette Status when in use")
    Log.Message("FEATURE: 278989 - IM Cuvettes")
    Log.Message("US279292 : GWT 01- Cuvette Status = OK")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_01_CuvetteStatusOK", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Cuvettes are loaded on the system");
    Log.Message("Loading Cuvettes in progress");
    if(!GivenCuvettesAreLoaded()){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_01_CuvetteStatusOK", "F");
		    Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]();    
  

    Log.AppendFolder("GIVEN : Cuvettes are in Use and WHEN Drop Chute Sensor detects the Cuvettes");
    if(!GivenCuvetteInUse()){
    ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_01_CuvetteStatusOK", "F");
    Log["PopLogFolder"]()
    return false
    }
    Log["PopLogFolder"]();
    
    
    //WHEN
    Log.AppendFolder("WHEN : Operator looks at Supplies screen");
    if(!WHENOperatorNavigatesToSuppliesOverviewScreen()){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_01_CuvetteStatusOK", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Cuvettes should display a status as OK");
    if(!ThenCuvettesShouldBeDisplayedAsOKStatus()){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_01_CuvetteStatusOK", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN *****
    Log.AppendFolder("THEN : IM Tests should continue with out any error/alert for Cuvettes");
    var ScenarioName = "US279272_GWT_01_CuvetteStatusOK";
    if(!ThenTestsShouldContinueWithoutError(ScenarioName)){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_01_CuvetteStatusOK", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_01_CuvetteStatusOK", "P");
    
} 

function US279272_GWT_02_CuvetteStatusOK()
{
    //USER STORY
    LogHighlight("Scenario : Verify Cuvette Status when not in use")
    Log.Message("FEATURE: 278989 - IM Cuvettes")
    Log.Message("US279292 : GWT 02 - Cuvette Status = OK")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_02_CuvetteStatusOK", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : Cuvettes are loaded on the system");
    Log.Message("Loading Cuvettes in progress");
    if(!GivenCuvettesAreLoaded()){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_02_CuvetteStatusOK", "F");
		    Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]();  
    

  
    //GIVEN *****
    Log.AppendFolder("GIVEN : Cuvettes are NOT in Use ");
    if(!GivenCuvetteNotInUse()){
    ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_02_CuvetteStatusOK", "F");
    Log["PopLogFolder"]()
    return false
    }
    Log["PopLogFolder"]();
    
    
    //WHEN
    Log.AppendFolder("WHEN : Operator looks at Supplies screen");
    if(!WHENOperatorNavigatesToSuppliesOverviewScreen()){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_02_CuvetteStatusOK", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Cuvettes should display a status as OK");
    if(!ThenCuvettesShouldBeDisplayedAsOKStatus()){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_02_CuvetteStatusOK", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN *****
    Log.AppendFolder("THEN : IM Tests should continue with out any error/alert for Cuvettes");
    var ScenarioName = "US279272_GWT_02_CuvetteStatusOK"
    if(!ThenTestsShouldContinueWithoutError(ScenarioName)){
        ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_02_CuvetteStatusOK", "F");
		    Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_IMCuvettes", "US279272_GWT_02_CuvetteStatusOK", "P");
  
} 


//******************************************************************************
//         GWT's [FEATURE : 225702 - Reagent OBS Expiration]         
//******************************************************************************
//Shahana
/*------ US225847 ------*/
function US225847_GWT_01_TrackOBSForPrimaryReagent()
{
    //USER STORY
    LogHighlight("Scenario : Track OBS for Primary Reagent")
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225847 : Track the pack OnBoard Stability (OBS) from the load time when a never-loaded IM Primary reagent pack")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_01_TrackOBSForPrimaryReagent", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  a never-loaded IM Primary reagent pack ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : user loads IA pack  ");
   Log["Warning"]("Not yet implemented");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay="AFP"
    Log.AppendFolder("THEN : System begins tracking OBS for that pack");
    
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_01_TrackOBSForPrimaryReagent", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_01_TrackOBSForPrimaryReagent", "P");
} 

function US225847_GWT_02_TrackOBSForAncillaryReagent_1()
{
    //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225847 : Track the pack OnBoard Stability (OBS) from the load time when a never-loaded IM Primary reagent pack")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_02_TrackOBSForAncillaryReagent_1", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  a never-loaded IM Ancillary reagent pack with TDef trigger for OBS set to when loaded  ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : user loads IA pack  ");
   Log.Message("Loading Reagent implementation in progress");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay=""
    Log.AppendFolder("THEN : System begins tracking OBS for that pack");
        if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_02_TrackOBSForAncillaryReagent_1", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_02_TrackOBSForAncillaryReagent_1", "P");
} 

function US225847_GWT_03_TrackOBSForAncillaryReagent_2()
{
    //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225847 : Track the pack OnBoard Stability (OBS) from the load time when a never-loaded IM Primary reagent pack")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_03_TrackOBSForAncillaryReagent_2", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  a never-loaded IM Ancillary reagent pack with TDef trigger for OBS set to when pierced  ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : user loads IA pack  ");
    Log["Warning"]("Not yet implemented");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay=""
    Log.AppendFolder("THEN : System begins tracking OBS for that pack");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_03_TrackOBSForAncillaryReagent_2", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225847_GWT_03_TrackOBSForAncillaryReagent_2", "P");
} 

/*------ US225848 ------*/
function US225848_GWT_01_TrackOBSForAncillaryReagent_1()
{
  //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225848 : Track the pack OnBoard Stability (OBS) from the load time when when it is initially pierced (IM ancillary Reagent Pack)")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225848_GWT_01_TrackOBSForAncillaryReagent_1", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  a loaded, never-pierced Im Ancillary reagent pack with TDef trigger for OBS set to when pierced  ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : user system initially pierces the pack through use ");
     Log["Warning"]("Automation not possible");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay=""
    Log.AppendFolder("THEN : System begins tracking OBS for that pack");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225848_GWT_01_TrackOBSForAncillaryReagent_1", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225848_GWT_01_TrackOBSForAncillaryReagent_1", "P");
} 

function US225848_GWT_02_TrackOBSForAncillaryReagent_2()
{
  //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225848 : Track the pack OnBoard Stability (OBS) from the load time when when it is initially pierced (IM ancillary Reagent Pack)")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225848_GWT_02_TrackOBSForAncillaryReagent_2", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  a loaded, never-pierced Im Ancillary reagent pack with TDef trigger for OBS set to when loaded  ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : user loads IA pack  ");
     Log["Warning"]("Not yet implemented");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay=""
    Log.AppendFolder("THEN : System begins tracking OBS for that pack");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225848_GWT_02_TrackOBSForAncillaryReagent_2", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225848_GWT_02_TrackOBSForAncillaryReagent_2", "P");
}

/*------ US225849 ------*/
function US225849_GWT_01_TrackOBSForPiercedChReagentPack()
{
    //USER STORY
    LogHighlight("Scenario : Track OBS For Pierced CH Reagent Pack")
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225849 : Track the pack OnBoard Stability (OBS) from the load time when when it is initially pierced (CH Reagent Pack)")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225849_GWT_01_TrackOBSForPiercedChReagentPack", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  a loaded, never-pierced CH reagent pack  ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : user system initially pierces the pack ");
   Log["Warning"]("Not yet implemented");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay="Alb"
    Log.AppendFolder("THEN : System begins tracking OBS for that pack well");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225849_GWT_01_TrackOBSForPiercedChReagentPack", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225849_GWT_01_TrackOBSForPiercedChReagentPack", "P");
}

function US225849_GWT_02_TrackOBSForNotPiercedChReagentPack()
{
    //USER STORY
    LogHighlight("Scenario : Track OBS for not Pierced CH Reagent Pack")
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225849 : Track the pack OnBoard Stability (OBS) from the load time when when it is initially pierced (CH Reagent Pack)")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225849_GWT_02_TrackOBSForNotPiercedChReagentPack", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  a loaded, never-pierced CH reagent pack  ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : user system initially not pierced the pack ");
   Log["Warning"]("Not yet implemented");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay="Alb"
    Log.AppendFolder("THEN : System will not begin tracking OBS for that pack well");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225849_GWT_02_TrackOBSForNotPiercedChReagentPack", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225849_GWT_02_TrackOBSForNotPiercedChReagentPack", "P");
} 

/*------ US225852 ------*/
function US225852_GWT_01_TrackOBSForIMPrimaryPack()
{
    //USER STORY
    LogHighlight("Scenario : Track OBS for IM Primary Reagent Pack")
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225852 : Display the OBS with no Warning or Error indication")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_01_TrackOBSForIMPrimaryPack", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  OBS Trigger is Normal AND Pack Type = IM Primary AND system has a loaded reagent pack with remaining OBS > Warning period ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : OBS is displayed ");
    Log["Warning"]("Not yet implemented");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay="AFP"
    Log.AppendFolder("THEN : Reagent Overview displays remaining onboard Stability value; units = days and Hours; no shading, Reagent Details displays remaining OBS Days & hours");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_01_TrackOBSForIMPrimaryPack", "F");
		Log["PopLogFolder"]()
        return false
     }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_01_TrackOBSForIMPrimaryPack", "P");
} 

function US225852_GWT_02_TrackOBSForIMAncillaryPack()
{
    //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225852 : Display the OBS with no Warning or Error indication")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_02_TrackOBSForIMAncillaryPack", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  OBS Trigger is Normal AND Pack Type = IM ancillary AND system has a loaded reagent pack with remaining OBS > Warning period ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : OBS is displayed ");
   Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay=""
    Log.AppendFolder("THEN : Reagent Overview displays remaining onboard Stability value; units = days and Hours; no shading, Reagent Details displays remaining OBS Days & hours");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_02_TrackOBSForIMAncillaryPack", "F");
		Log["PopLogFolder"]()
        return false
     }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_02_TrackOBSForIMAncillaryPack", "P");
}

function US225852_GWT_03_TrackOBSForCHReagentPack()
{
    //USER STORY
    LogHighlight("Scenario : Track OBS for CH Reagent Pack")
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225852 : Display the OBS with no Warning or Error indication")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_03_TrackOBSForCHReagentPack", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN :  OBS Trigger is Normal AND Pack Type = CH AND system has a loaded reagent pack with remaining OBS > Warning period ");
    Log["Warning"]("Not yet implemented")
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : OBS is displayed ");
    Log["Warning"]("Not yet implemented");
    Log["PopLogFolder"]();
    
    //THEN
    //passing assay name
    var Assay="Alb"
    Log.AppendFolder("THEN : Reagent Overview displays remaining onboard Stability value; units = days and Hours; no shading, Reagent Details displays remaining OBS Days & hours");
    if(!ThenSystemTracksOBSStatus(Assay)){
        ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_03_TrackOBSForCHReagentPack", "F");
		 Log["PopLogFolder"]()
        return false
       }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225852_GWT_03_TrackOBSForCHReagentPack", "P");
} 

//Shrutika
/*------ US225854, US225856 ------*/
function US_GROUP02_GWT_01_TrackOBSForIAandCCReagentPack()
{
  //USER STORY
  InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
      Log.Message("US225854 : US: Display the OBS with a visual indication of a ERROR that OBS expired.");
      Log.Message("US225856 : US: Stop scheduling any new tests for that pack when a loaded reagent pack has an Expired OBS");
      
      US225854_US225856_GWT_01_TrackOBSForIAPrimaryReagentPack()
      US225854_US225856_GWT_02_TrackOBSForCCReagentPack() 
}

function US225854_US225856_GWT_01_TrackOBSForIAPrimaryReagentPack()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225850 : OBS Triggering values - IA Primary Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_01_TrackOBSForIAPrimaryReagentPack", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : IM Primary/IA Ancillary reagent pack are loaded with OBS already expired");
    if(!GivenIAPrimaryReagentPackLoadedWithOBSExpired())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_01_TrackOBSForIAPrimaryReagentPack", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : Operator schedule a patient and QC order to use IM Primary/IA Ancillary Reagent Pack");
    if(!WhenPatientOrderAndQCOrderForIAPrimaryReagentPackWithOBSExpired())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_01_TrackOBSForIAPrimaryReagentPack", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Schedule Test should not be processed and OBS value is disaplyed in the reagent Overview screen and highlighted in Red");
    if(!ThenTestNotProcessedForIAPrimaryReagentWithOBSExpired())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_01_TrackOBSForIAPrimaryReagentPack", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_01_TrackOBSForIAPrimaryReagentPack", "P");
}

function US225854_US225856_GWT_02_TrackOBSForCCReagentPack()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225850 : OBS Triggering values - CH Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_02_TrackOBSForCCReagentPack", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : CH reagent pack are loaded with OBS already expired");
    if(!GivenCCReagentPackLoadedWithOBSExpired())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_02_TrackOBSForCCReagentPack", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : Operator schedule a patient and QC order to use CH Reagent Pack");
    if(!WhenPatientOrderAndQCOrderForCCReagentPackWithOBSExpired())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_02_TrackOBSForCCReagentPack", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Schedule Test should not be processed and OBS value is disaplyed in the reagent Overview screen and highlighted in Red");
    if(!ThenTestNotProcessedForCCReagentWithOBSExpired())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_02_TrackOBSForCCReagentPack", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225854_US225856_GWT_02_TrackOBSForCCReagentPack", "P");
}	
	
//Ramitha
/*------ US225855, US225852, US225847, US225848 ------*/
function US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed(){

    //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225855 : Continue using the pack before the OBS expires");
    Log.Message("US225852 : Display the OBS with no Warning or Error indication");
    Log.Message("US225847 : Track the pack OnBoard Stability (OBS) from the load time when a never-loaded IM Primary reagent pack");
    Log.Message("US225848 : Track the pack OnBoard Stability (OBS) from the load time when when it is initially pierced (IM ancillary Reagent Pack)");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: IM Primary/IM Ancillary and CH Reagent pack are having OBS above Warning threshold and not loaded yet");
     if(!GivenOBSAboveThresholdForReagent()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN : TDef trigger for OBS set to 'when loaded' ");
    if(!GivenTDefTriggerOBSAboveThresholdForReagent()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "F");
		Log["PopLogFolder"]()
        return false
    } 
    
    //WHEN1
    Log.AppendFolder("WHEN : Operator loads the reagent packs");
    if(!GivenIMCCAndAncillaryReagentIsLoaded()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()

    //WHEN2
    Log.AppendFolder("WHEN : schedule a test to use IM Primary/Ancillary and CH Reagent Pack");
    if(!WhenTestIsScheduled()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 1
    Log.AppendFolder("THEN : System starts tracking OBS and OBS value is displayed in the Reagent Overview scren ; units = X days and X Hours");
    if(!THENOBSIsDisplayed()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    
    //THEN 2
    Log.AppendFolder("THEN :The Scheduled Test is Processed successfully ");
    if(!THENTestProcessedSuccessfully()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()																				  
														   
    //Result.xml -Pass
    ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP04_GWT_01_ReagentOBSAboveThresholdAndSampleProcessed", "P");

}

/*------ US225853 ------*/
function US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed(){

    //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225853 : Display the OBS with a visual indication of a WARNING that OBS will soon expire");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed", "I");

    //GIVEN
    Log.AppendFolder("GIVEN 1: IM Primary/IM Ancillary and CH Reagent pack are loaded with 0< remaining OBS <= Warning Level");
     if(!GivenOBSBelowThresholdForReagent()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed", "F");
		Log["PopLogFolder"]()
        return false
    }   
    Log["PopLogFolder"]()
    //CH Reagent pack are loaded
    if(!GivenIMCCAndAncillaryReagentIsLoaded()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
  
    //WHEN
    Log.AppendFolder("WHEN : Operator schedule a test to use IM Primary/Ancillary and CH Reagent Pack");
    if(!WhenTestIsScheduled()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 1
    Log.AppendFolder("THEN : OBS value is displayed in the Reagent Overview scren ; units = X days and X Hours and highlighted in Yellow shading");
    Log["Warning"]("Yellow shading is not Implemented")
    if(!THENOBSIsDisplayed()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    Log["PopLogFolder"]()		
    
    //THEN 2
    Log.AppendFolder("THEN :The Scheduled Test is Processed successfully ");
    if(!THENTestProcessedSuccessfully()){
        ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()																		  
														   
    //Result.xml -Pass
    ReportTestStatusToResultXML("Reagent OBS Expiration", "US_GROUP01_GWT_02_ReagentOBSBelowThresholdAndSampleProcessed", "P");

}	

//Shrutika
/*------ US225850,US225851  ------*/
function US_GROUP02_GWT_04_TrackOBSForIAPrimaryIAAncillaryCHReagentPackAndEditOBS()
{
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225850 : OBS triggering rules");
    Log.Message("US225851 : Store and resume tracking OBS for that pack using the manually entered");
      
    InitializeMetaDataHYDRA();
    
    US225850_GWT_01_TrackOBSForIAPrimaryReagentPack_01()
    US225850_GWT_01_TrackOBSForIAAncillaryReagentPack_02()
    US225850_GWT_01_TrackOBSForCCReagentPack_03()
    US225851_GWT_01_UserEditsOBSIAPrimaryReagentPack_01()
    US225851_GWT_01_UserEditsOBSIAAncillaryReagentPack_02()
    US225851_GWT_01_UserEditsOBSDaysCCReagentPack_03()
       
}

function US225850_GWT_01_TrackOBSForIAPrimaryReagentPack_01()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225850 : OBS Triggering values - IA Primary Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAPrimaryReagentPack_01", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : IM Primary Reagent pack are already loaded onto an IM module");
    if(!GivenReagentPackLoaded_IAPrimaryReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAPrimaryReagentPack_01", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : Operator unloads and reloads the same Reagent Packs onto IM module");
    if(!WhenReagentPackUnloadedAndReloaded_IAPrimaryReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAPrimaryReagentPack_01", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : System resumes tracking OBS for that pack from time of initial OBS trigger");
    if(!ThenSystemTracksOBSStatusOfInitialOBSTrigger_IAPrimaryReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAPrimaryReagentPack_01", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAPrimaryReagentPack_01", "P");
}

function US225850_GWT_01_TrackOBSForIAAncillaryReagentPack_02()
{
    //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225850 : OBS Triggering values - IA Ancillary Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAAncillaryReagentPack_02", "I");

    //GIVEN
    Log.AppendFolder("GIVEN : IM Ancillary pack are already loaded onto an IM module");
    if(!GivenReagentPackLoaded_IAAncillaryReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAAncillaryReagentPack_02", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : Operator unloads and reloads the same Reagent Packs onto IM module");
    if(!WhenReagentPackUnloadedAndReloaded_IAAncillaryReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAAncillaryReagentPack_02", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : System resumes tracking OBS for that pack from time of initial OBS trigger");
    if(!ThenSystemTracksOBSStatusOfInitialOBSTrigger_IAAncillaryReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAAncillaryReagentPack_02", "F");
      Log["PopLogFolder"]()
      return false
    }
		 Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForIAAncillaryReagentPack_02", "P");
}

function US225850_GWT_01_TrackOBSForCCReagentPack_03()
{
    //USER STORY
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225850 : OBS Triggering values - CC Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForCCReagentPack_03", "I");

    //GIVEN
    Log.AppendFolder("GIVEN : CH Reagent pack are already loaded onto an CH module");
    if(!GivenReagentPackLoaded_CCReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForCCReagentPack_03", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : Operator unloads and reloads the same Reagent Packs onto CH module");
    if(!WhenReagentPackUnloadedAndReloaded_CCReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForCCReagentPack_03", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : System resumes tracking OBS for that pack from time of initial OBS trigger");
    if(!ThenSystemTracksOBSStatusOfInitialOBSTrigger_CCReagent_US225850())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForCCReagentPack_03", "F");
      Log["PopLogFolder"]()
      return false
    }
		 Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225850_GWT_01_TrackOBSForCCReagentPack_03", "P");
}

function US225851_GWT_01_UserEditsOBSIAPrimaryReagentPack_01()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225851 : OBS Triggering values - IA Primary Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAPrimaryReagentPack_01", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : IM Primary reagent pack are already loaded onto an IM module");
    if(!GivenReagentPackLoaded_IAPrimaryReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAPrimaryReagentPack_01", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : User edits and saves remaining OBS time for IM Primary Reagent packs");
    if(!WhenUserEditsOBS_IAPrimaryReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAPrimaryReagentPack_01", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : System stores and resumes tracking OBS for that pack using the adjusted data manually entered by the user");
    if(!ThenSystemTracksOBSUsingAdjustedData_IAPrimaryReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAPrimaryReagentPack_01", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAPrimaryReagentPack_01", "P");
}

function US225851_GWT_01_UserEditsOBSIAAncillaryReagentPack_02()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225851 : OBS Triggering values - IA Ancillary Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAAncillaryReagentPack_02", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : IM Ancillary reagent pack are already loaded onto an IM module");
    if(!GivenReagentPackLoaded_IAAncillaryReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAAncillaryReagentPack_02", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : User edits and saves remaining OBS time for IM Ancillary Reagent packs");
    if(!WhenUserEditsOBS_IAAncillaryReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAAncillaryReagentPack_02", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : System stores and resumes tracking OBS for that pack using the adjusted data manually entered by the user");
    if(!ThenSystemTracksOBSUsingAdjustedData_IAAncillaryReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAAncillaryReagentPack_02", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSIAAncillaryReagentPack_02", "P");
}

function US225851_GWT_01_UserEditsOBSDaysCCReagentPack_03()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225702 - Reagent OBS Expiration")
    Log.Message("US225851 : OBS Triggering values - CC Reagent")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSDaysCCReagentPack_03", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : CC reagent pack are already loaded onto an CC module");
    if(!GivenReagentPackLoaded_CCReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSDaysCCReagentPack_03", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : User edits and saves remaining OBS time for CC Reagent packs");
    if(!WhenUserEditsOBS_CCReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSDaysCCReagentPack_03", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : System stores and resumes tracking OBS for that pack using the adjusted data manually entered by the user");
    if(!ThenSystemTracksOBSUsingAdjustedData_CCReagent_US225851())
    {
      ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSDaysCCReagentPack_03", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOBSExpiration", "US225851_GWT_01_UserEditsOBSDaysCCReagentPack_03", "P");
}



//******************************************************************************
//     Scenarios [FEATURE : 259953 - IMT Sensor]
//               [FEATURE : 247523 - IMT Bulk System Fluids] 
//               [FEATURE : 247524 - Pretreatment Consumable]    
//******************************************************************************
//Ramitha		
/*------ US259970, US247541, US247569 ------*/
function US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp(){
  


  //Initialize Variables
    var AlertTestDataColName = "IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp";

    //USER STORY
    LogHighlight("Scenario : Verify Supplies when Fluid Empty and Lot/OBS Not Expired")
    Log.Message("FEATURE: 259953 - IMT Sensor")
    Log.Message("US259970 : Tests for IMT Sensor is depleted");
    
    Log.Message("FEATURE: 247523 - IMT Bulk System Fluids")
    Log.Message("US247569 : IMT System Fluid is depleted");   
    
    Log.Message("FEATURE: 247524 - Pretreatment Consumable") 
    Log.Message("US247541 : Pretreatment is depleted");      
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: IMT and Pretreatment fluids are loaded on the system");
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN : Atleast one IMT and Pretreatment test is enabled");
    Log["PopLogFolder"]()
    
    //GIVEN 3
    Log.AppendFolder("GIVEN : Fluid level is Empty");
    Log["PopLogFolder"]()
    
    //GIVEN 4
    Log.AppendFolder("GIVEN 4: Lot and OBS Not Expired");
    
    //Run the RoundTrip Query to ensure no error in all supplies
    var DBExcelSheet = "RoundTrip";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    
    //Run Testcase specific query
    var DBExcelSheet = "IMTPreLoadedTestEnabledFluidEmptyLotOBSNotExp";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
        
    
    //Launch and Login to ARM to reflect DB changes
    Log.AppendFolder("Restart and Login to ARM to reflect DB changes");
  //  ShutDownARM();
    InitializeHydra()
  //  aqUtils["Delay"](5000,"Wait for shutdown");
  //  LaunchAndLoginHydra()     
    Log["PopLogFolder"]() 
    
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()

    //THEN 1
    Log.AppendFolder("THEN : Fluid volume display as 0");    
    Log["PopLogFolder"]()
    
    //THEN 2
    Log.AppendFolder("THEN :LOT Expiration should display the expiration Date");
    Log["Message"]("Currently not checking OBS remaining days")
    if(!THENVerifyPretreatmentAndIMTWithVolumeAndLotDataDB()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)     
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 3
    Log.AppendFolder("THEN :No visual indication on the UI (ex: highlighting in Red) that the LOT/OBS has expired");
    var boolFlag = false;
    if(!THENVerifyVisualIndicationForLotAndOBS(boolFlag)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)     
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}
//    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("THEN:NO alert is displayed for both fluid depletion."); //Added Alert Verification - Muru
    if(!ThenNoAlertDisplayed(AlertTestDataColName)){
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
      Log["PopLogFolder"]();
    return false;}
    Log["PopLogFolder"]();

    
    
	  //THEN 4
    Log.AppendFolder("THEN : Operator event log generated for fluid depletion ");
    var thresholdIndicator="Depleted"
    if(!THENVerifyOperatorEventLogWhenVolumeBelowThreshold(thresholdIndicator)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)     
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    //Result.xml -Pass
    
    
    
//    **********IMT Sample Processing crashing the UIW. Hence commented this part for now
//    //THEN 6
//    Log["AppendFolder"]("THEN:No new IMT/Pretreatment tests should be Processed"); //Added Sample Processing Verification - Muru
//    var OrderDetails = "FT259953_247523_247524_IMTPretreatment1";
//    if(!ThenVerifyNewIMTPretreatmentTestNotProcessing(OrderDetails)){
//        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
//        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
//      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "F");
//      Log["PopLogFolder"]();
//    return false;}
//    Log["PopLogFolder"](); 
//    
    //POSTRUN
    Log["AppendFolder"]("POSTRUN: Fill Supplies and Exit")
    var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){     
    Log["Error"]("Unable to Fill supplies and POSTRUN Failed")
    Log["PopLogFolder"]()
    return(false)}
    Log["PopLogFolder"]()
    
    
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidEmptyLotOBSNotExp", "P");
}

/*------ US259969, US247534, US247568 ------*/
function US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp(){
  
  //Initialize Variables
    var AlertTestDataColName = "IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp";

    //USER STORY
    LogHighlight("Scenario : Verify Supplies when Fluid Below Threshold and Lot/OBS Not Expired")
    Log.Message("FEATURE: 259953 - IMT Sensor")
    Log.Message("US259969 : IMT Sensor tests remaining meets/is below user configured threshold");
    
    Log.Message("FEATURE: 247523 - IMT Bulk System Fluids") 
    Log.Message("US247568 : IMT System Fluids volume remaining meets/is below user configured threshold"); 
    
    Log.Message("FEATURE: 247524 - Pretreatment Consumable") 
    Log.Message("US247534 :  Pretreatment volume remaining meets/is below user configured threshold");      
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: IMT and Pretreatment fluids are loaded on the system");
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN : Atleast one IMT and Pretreatment test is enabled");
    Log["PopLogFolder"]()    
        
    //GIVEN 3
    Log.AppendFolder("GIVEN 4: Lot and OBS Not Expired");
    
    //Run the RoundTrip Query to ensure no error in all supplies
    var DBExcelSheet = "RoundTrip";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    
    //Run Testcase specific query
    var DBExcelSheet="IMTPreLoadedTestEnabledFluidBelowThresholdLotOBSNotExp";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
        
    //GIVEN 4
    Log.AppendFolder("GIVEN : Fluid level meets or goes below Threshold");
    if(!GIVENFluidLevelAboveBelowThresolhdDB("Below Threshold")){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)     
        ReportTestStatusToResultXML("InventorySuppliesIMTSensorIMTBulkSystemFluids", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
        
    //Launch and Login to ARM to reflect DB changes
    Log.AppendFolder("Restart and Login to ARM to reflect DB changes");
  //  ShutDownARM();
    InitializeHydra()
  //  aqUtils["Delay"](5000,"Wait for shutdown");
  //  LaunchAndLoginHydra()     
    Log["PopLogFolder"]() 
      
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()

    //THEN 1
    Log.AppendFolder("THEN : Fluid volume should display in percentage of 5% along with LOT");
    if(!THENVerifyPretreatmentAndIMTWithVolumeAndLotDataDB()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()
    
    //THEN 6
    Log.AppendFolder("THEN :There should be a visual indication on the UI (ex: highlighting in Red) that the fluid volume is below user threshold.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForFluidVolume(boolFlag)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
  
     
    
    //THEN 3
    Log.AppendFolder("THEN : Operator event log generated for fluid depletion ");
    var thresholdIndicator="Not Depleted"
    if(!THENVerifyOperatorEventLogWhenVolumeBelowThreshold(thresholdIndicator)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()		
    
    
        
     //THEN 2
    Log["AppendFolder"]("THEN:Alert is displayed that the fluid volume is below user threshold.");
    if(!THENVerifyAlertForSuppliesBelowThreshold(AlertTestDataColName)){
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
      Log["PopLogFolder"]();
    return false;}
    Log["PopLogFolder"](); 
    
            
//    //THEN 5
//    Log["AppendFolder"]("THEN:No new IMT/Pretreatment tests should be Processed"); //Added Sample Processing Verification - Muru
//    var OrderDetails = "FT259953_247523_247524_IMTPretreatment3";
//    if(!ThenVerifyNewIMTPretreatmentTestNotProcessing(OrderDetails)){
//        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
//       GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
//      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "F");
//      Log["PopLogFolder"]();
//    return false;}
//    Log["PopLogFolder"](); 
//    
    //POSTRUN
    Log["AppendFolder"]("POSTRUN: Fill Supplies and Exit")
    var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){     
    Log["Error"]("Unable to Fill supplies and POSTRUN Failed")
    Log["PopLogFolder"]()
    return(false)}
    Log["PopLogFolder"]()
    
    															 
    //Result.xml -Pass
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP03_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidBelowThresLotOBSNotExp", "P");

}

/*------ US259973, US259974, US259976, US259977, US247570, US247571, US259381, US259382 ------*/
function US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired(){
  

  //Initialize Variables
  var AlertTestDataColName = "IMTPreLoadedAtleastOneTestEnabledLotOBSExpired";


    //USER STORY
    LogHighlight("Scenario : Verify Supplies when  Lot/OBS Expired")
    Log.Message("FEATURE: 259953 - IMT Sensor")
    Log.Message("US259973 : OBS Expiration for IMT Sensor");
    Log.Message("US259974 : Lot Expiration for IMT Sensor");
    Log.Message("US259976 : Prevent Use when IMT Sensor Lot has expired");
    Log.Message("US259977 : Prevent Use when IMT Sensor OBS has expired");
    
    Log.Message("FEATURE: 247523 - IMT Bulk System Fluids") 
    Log.Message("US247570 : Lot Expiration for IMT System Fluids "); 
    Log.Message("US247571 : OBS Expiration for IMT System Fluids"); 
    
    Log.Message("FEATURE: 247524 - Pretreatment Consumable") 
    Log.Message("US259381 : Prevent Use when Pretreatment Lot has expired");
    Log.Message("US259382 : Prevent Use when Pretreatment OBS has expired");       
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: IMT and Pretreatment fluids are loaded on the system");
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN : Atleast one IMT and Pretreatment test is enabled");
    Log["PopLogFolder"]()
    
    //GIVEN 3
    Log.AppendFolder("GIVEN 4: Lot and OBS Expired");
     //Run the RoundTrip Query to ensure no error in all supplies
    var DBExcelSheet = "RoundTrip";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    
    //Run Testcase specific query
    var DBExcelSheet="IMTPreLoadedTestEnabledLotOBSExp";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
        Log["PopLogFolder"]();
        return false;}  
             
    //Launch and Login to ARM to reflect DB changes
    Log.AppendFolder("Restart and Login to ARM to reflect DB changes");
  //  ShutDownARM();
    InitializeHydra()
  //  aqUtils["Delay"](5000,"Wait for shutdown");
  //  LaunchAndLoginHydra()     
    Log["PopLogFolder"]()   
    
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()

    //THEN 1
    Log.AppendFolder("THEN : Fluid volume/Lot/OBS display as 0");
    Log["PopLogFolder"]()
    
    //THEN 2
    Log.AppendFolder("THEN :LOT Expiration should display the expired date");
    if(!THENVerifyPretreatmentAndIMTWithVolumeAndLotDataDB()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 3
    Log.AppendFolder("THEN :OBS should display 0 days");
    if(!THENVerifyPretreatmentAndIMTWithOBSExpirationData()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 4
    Log.AppendFolder("THEN :Visual indication on the UI (ex: highlighting in Red) that the LOT/OBS has expired");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForLotAndOBS(boolFlag)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)     
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("THEN:NO alert should be displayed for LOT/OBS expiration.");
    if(!ThenNoAlertDisplayed(AlertTestDataColName)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)     
      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
      Log["PopLogFolder"]();
    return false;}
    Log["PopLogFolder"]();    
    
    
    
	 
    //THEN 5
    Log.AppendFolder("THEN : Operator event log generated for LOT/OBS below user threshold ");
    var thresholdIndicator="Expired"
    if(!THENVerifyOperatorEventLogWhenOBSBelowThreshold(thresholdIndicator)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()		    
    
        
//    //THEN 6
//    Log["AppendFolder"]("THEN:No new IMT/Pretreatment tests should be Processed"); //Added Sample Processing Verification - Muru
//    var OrderDetails = "FT259953_247523_247524_IMTPretreatment2";
//    if(!ThenVerifyNewIMTPretreatmentTestNotProcessing(OrderDetails)){
//        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
//        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
//      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "F");
//      Log["PopLogFolder"]();
//    return false;}
//    Log["PopLogFolder"](); 																			  
														

 
    //POSTRUN
    Log["AppendFolder"]("POSTRUN: Fill Supplies and Exit")
    var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){     
    Log["Error"]("Unable to Fill supplies and POSTRUN Failed")
    Log["PopLogFolder"]()
    return(false)}
    Log["PopLogFolder"]()
    
       
    //Result.xml -Pass
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP08_GWT_01_IMTPreLoadedAtleastOneTestEnabledLotOBSExpired", "P");

}

//Bhawya
/*------ US259967, US259968, US259978, US259377, US259378 ------*/
function US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp(){

    //USER STORY
    LogHighlight("Scenario : Verify Supplies when Fluid Above Threshold and Lot/OBS Not expired")
    Log.Message("FEATURE: 259953 - IMT Sensor")
    Log.Message("US259967 : Track/Record OBS remaining for IMT Sensor");
    Log.Message("US259968 : Track/Record number of tests remaining for IMT Sensor"); 
    Log.Message("US259978 : Display Lot Expiration for IMT Sensor"); 
    
    Log.Message("FEATURE: 247523 - IMT Bulk System Fluids") 
    Log.Message("US259377 : Display Lot Expiration for IMT System Fluid"); 
    Log.Message("US259378 : Display OnBoard Stability Remaining for IMT system fluid"); 
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: IMT and Pretreatment fluids are loaded on the system");
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN 2 : Atleast one IMT and Pretreatment test is enabled");
    Log["Warning"]("There is an error in 'All Tests' screen")
    Log["PopLogFolder"]() 
        
    //GIVEN 3
    Log.AppendFolder("GIVEN 3: Lot and OBS Not Expired");
    var DBExcelSheet="IMTPreLoadedTestEnabledFluidAboveThresholdLotOBSNotExp";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}            
    Log["PopLogFolder"]()
    
    //GIVEN 4
    Log.AppendFolder("GIVEN 4: Fluid level is above Threshold");
    if(!GIVENFluidLevelAboveBelowThresolhdDB("Above Threshold")){
        ReportTestStatusToResultXML("InventorySuppliesIMTSensorIMTBulkSystemFluids", "US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}
        
    //Launch and Login to ARM to reflect DB changes
    Log.AppendFolder("Restart and Login to ARM to reflect DB changes");
    ShutDownARM();
    aqUtils["Delay"](5000,"Wait for shutdown");
    LaunchAndLoginHydra()     
    Log["PopLogFolder"]()
      
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()

    //THEN 1 ,2 & 3
    Log.AppendFolder("THEN 1: Actual Fluid volume should display in percentage of 5% along with LOT and OBS expiration data");
    Log["PopLogFolder"]()
    Log.AppendFolder("THEN 2:  IMT sensor tests should display the count of IMT tests remaining");
    Log["PopLogFolder"]()
    Log.AppendFolder("THEN 3:  Lot expiraton date should be dispalyed.");
    if(!THENVerifyPretreatmentAndIMTWithVolumeAndLotDataDB()){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 4
    Log.AppendFolder("THEN 4:  OBS remaining days should be displayed.");
    Log["Warning"]("Currently not capturing OBS")
    Log["PopLogFolder"]()

    //Result.xml -Pass
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP05_GWT_05_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresLotOBSNotExp", "P");

}

//Ramitha
/*------ US259971, US259972, US284821, US259379, US259383, US259384, US247567, US247572, US247573, US259375, US259376, US247535, US247536, US247537, US247538------*/
function US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold()
{
    //Initialize Variables
    var AlertTestDataColName = "IMTPreLoadedFluidAboveThresAndLotOBSBelowThreshold";
    
    //USER STORY
    LogHighlight("Scenario : Verify Supplies when Fluid Above Threshold  and Lot/OBS below threshold")
    Log.Message("FEATURE: 259953 - IMT Sensor")
      Log.Message("US259971 : Meets/Below user configured Lot Expiration alert threshold for IMT Sensor");
      Log.Message("US259972 : Meets/Below user configured OBS Expiration alert threshold for IMT Sensor");
      Log.Message("US284821 : Persistence of IMT Sensor data across reboots");
     
    Log.Message("FEATURE: 247523 - IMT Bulk System Fluids") 
      Log.Message("US247567 : Track/Report Amount Remaining for IMT System Fluid"); 
      Log.Message("US247572 : Meets/Below user configured Lot Expiration alert threshold for IMT System Fluid"); 
      Log.Message("US247573 : Meets/Below user configured OBS Expiration alert threshold for IMT System Fluid"); 
      Log.Message("US259375 : Prevent Use when IMT System Fluid Lot has expired"); 
      Log.Message("US259376 : Prevent Use when IMT System Fluid OBS has expired"); 
    
    Log.Message("FEATURE: 247524 - Pretreatment Consumable") 
      Log.Message("US259379 :  Track/Report fluid left in Pretreatment bottle");    
      Log.Message("US259383 :  Display Lot Expiration for Pretreatment");   
      Log.Message("US259384 :  Display OnBoard Stability Remaining for Pretreatment");     
      Log.Message("US247535 :  Meets/Below user configured Lot Expiration alert threshold for Pretreatment ");   
      Log.Message("US247536 :  Meets/Below user configured OBS Expiration alert threshold for Pretreatment ");  
      Log.Message("US247537 :  Lot Expiration for Pretreatment ");    
      Log.Message("US247538 :  OBS Expiration for Pretreatment ");   
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: IMT and Pretreatment fluids are loaded on the system");
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN : Atleast one IMT and Pretreatment test is enabled");
    Log["PopLogFolder"]()    
        
    //GIVEN 3
    Log.AppendFolder("GIVEN 4: Lot and OBS meets or goes below Threshold");
    
    //Run the RoundTrip Query to ensure no error in all supplies
    var DBExcelSheet = "RoundTrip";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    
    //Run Testcase specific query
    var DBExcelSheet="IMTPreLoadedTestEnabledFluidAboveThresholdLotOBSBelowThreshold";
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
        
    //GIVEN 4
    Log.AppendFolder("GIVEN : Fluid level goes above Threshold");
    if(!GIVENFluidLevelAboveBelowThresolhdDB("Above Threshold")){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("InventorySuppliesIMTSensorIMTBulkSystemFluids", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //Launch and Login to ARM to reflect DB changes
    Log.AppendFolder("Restart and Login to ARM to reflect DB changes");
  //  ShutDownARM();
    InitializeHydra()
  //  aqUtils["Delay"](5000,"Wait for shutdown");
  //  LaunchAndLoginHydra()     
    Log["PopLogFolder"]() 
      
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()

    //THEN 1
    Log.AppendFolder("THEN : Fluid volume should display in percentage of 5% along with LOT value");
    if(!THENVerifyPretreatmentAndIMTWithVolumeAndLotDataDB()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 2
    Log.AppendFolder("THEN : Operator event log generated for LOT/OBS below user threshold ");
	var thresholdIndicator="Not Expired"
    if(!THENVerifyOperatorEventLogWhenOBSBelowThreshold(thresholdIndicator)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    Log.AppendFolder("THEN : Alert is displayed that the fluid LOT/OBS is below user threshold");
    if(!THENVerifyAlertForSuppliesBelowThreshold(AlertTestDataColName)){
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
      Log["PopLogFolder"]();
    return false;}
    Log["PopLogFolder"]();   
 

    
    //THEN 7
    Log.AppendFolder("THEN : Upon restart the application, all the fluid data should be restored ");
    var boolFlag = true;
    if(!THENVerifyFluidDataRestoredAfterApplicationRestart()){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
//    
//        //THEN 5
//    Log["AppendFolder"]("THEN:No new IMT/Pretreatment tests should be Processed"); //Added Sample Processing Verification - Muru
//    var OrderDetails = "FT259953_247523_247524_IMTPretreatment4";
//    if(!ThenVerifyNewIMTPretreatmentTestNotProcessing(OrderDetails)){
//        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
//        GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet) 
//      ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "F");
//      Log["PopLogFolder"]();
//    return false;}
//    Log["PopLogFolder"](); 
    
    
  
    //POSTRUN
    Log["AppendFolder"]("POSTRUN: Fill Supplies and Exit")
    var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
    if(!GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet)){     
    Log["Error"]("Unable to Fill supplies and POSTRUN Failed")
    Log["PopLogFolder"]()
    return(false)}
    Log["PopLogFolder"]()


    //Result.xml -Pass
    ReportTestStatusToResultXML("Supplies Overview", "US_GROUP15_GWT_01_IMTPreLoadedAtleastOneTestEnabledFluidAboveThresAndLotOBSBelowThreshold", "P");

}



//******************************************************************
//         GWT's [FEATURE -225699 - ExpiredReagentUsage]         
//******************************************************************

/*------ US225831------*/
function US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled()
{
    //USER STORY
    Log.Message("FEATURE: 225699 - Expired Reagent Usage")
    Log.Message("US225831 : Indication of the pack Lot Expiration when a CH reagent pack is expired");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: CH reagent Pack is loaded");
    if(!GivenCHReagentIsLoaded())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //WHEN 
    Log.AppendFolder("WHEN : All the required reagent Packs expired");
    if(!WhenExpireCHReagentPack())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN 2: Work order is already scheduled for that CH reagent pack");
    if(!GivenCHWorkOrderScheduled())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //THEN 1
    Log.AppendFolder("THEN : Reagent packs are displayed as Lot Expired on the Reagent Overview screen ");
    if(!ThenCHReagentPackExpired())
    {
        ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //THEN 2
    Log.AppendFolder("THEN : Order that is already created and scheduled should get processed with the expired reagent ");
    if(!ThenPatientOrderShouldGetProcessed())
    {
        ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()

    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "P");
}

/*------  US225829, US225830, US225831, US225832------*/
function US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled()
{
    //USER STORY
    Log.Message("FEATURE: 225699 - Expired Reagent Usage");
    Log.Message("US225829 : Indication of the pack Lot Expiration when reagent pack expires before any tests");
    Log.Message("US225830 : Indication of the pack Lot Expiration when reagent pack expires before any tests");
    Log.Message("US225831 : Indication of the pack Lot Expiration when a CH reagent pack is expired");
    Log.Message("US225832 : Indication of the pack Lot Expiration when an identified CH reagent pack in the reagent drawer expires before being loaded into the reagent compartment");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled", "I");
    //InitializeMetaDataHYDRA();
    
    //GIVEN 
    Log.AppendFolder("GIVEN : CH reagent Pack is loaded");
    if(!GivenCHReagentIsLoaded())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //WHEN 1
    Log.AppendFolder("WHEN : All the required reagent Packs expired");
    if(!WhenExpireCHReagentPack())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //WHEN 2
    Log.AppendFolder("WHEN 2: A new work order is created");
    if(!WhenWorkOrderCreated())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //THEN 1
    Log.AppendFolder("THEN : Reagent packs are displayed as Lot Expired on the Reagent Overview screen ");
    if(!ThenCHReagentPackExpired())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]();
    
    //THEN 2
    Log.AppendFolder("THEN : New order for the expired reagents should not get processed and flagged as No consumables or No Primary");
    if(!ThenPatientOrderShouldNotGetProcessed())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP04_GWT_02_CHExpiredReagentPackWithWorkOrderNotScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()

    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_01_CHExpiredReagentPackWithWorkOrderScheduled", "P");
}

/*------ US225831------*/
function US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled()
{
    //USER STORY
    Log.Message("FEATURE: 225699 - Expired Reagent Usage")
    Log.Message("US225831 : Indication of the pack Lot Expiration when a CH reagent pack is expired");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled", "I");

    //GIVEN 1
    Log.AppendFolder("GIVEN 1: IM reagent Pack is loaded");
    if(!GivenIMReagentIsLoaded())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //WHEN 
    Log.AppendFolder("WHEN : All the required reagent Packs expired");
    if(!WhenExpireIMReagentPack())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //GIVEN 2
    Log.AppendFolder("GIVEN 2: Work order is already scheduled for that CH reagent pack");
    if(!GivenIMWorkOrderScheduled())
    {
        ReportTestStatusToResultXML("Inventory_ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //THEN 1
    Log.AppendFolder("THEN : Reagent packs are displayed as Lot Expired on the Reagent Overview screen ");
    if(!ThenIMReagentPackExpired())
    {
        ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()
    
    //THEN 2
    Log.AppendFolder("THEN : Order that is already created and scheduled should get processed with the expired reagent ");
    if(!ThenIMPatientOrderShouldGetProcessed())
    {
        ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled", "F");
        Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()

    //Result.xml -Pass
    ReportTestStatusToResultXML("ReagentOverview_ExpiredReagentUsage", "US_GROUP01_GWT_03_IMExpiredReagentPackWithWorkOrderScheduled", "P");
}

//*------US225831------*/
function US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled(){

    //USER STORY
    Log.Message("FEATURE: 225699 - ExpiredReagentUsage")
    Log.Message("US225831 : Indication of the pack Lot Expiration when a IM reagent pack is expired");
    Log.Message("US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled")

    //Result.xml - In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : IM Primary/Ancillary reagent Packs are loaded and Work order is already scheduled for those reagent packs");
  
    if(!GivenIMPrimaryAncillaryreagentPacksloaded()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled", "F");
		Log["PopLogFolder"]()
        return false
        }
        
    if(!GivenWorkorderisalreadyscheduled()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()

    //WHEN
    Log.AppendFolder("WHEN : One of the required reagent Pack is expired ");
    if(!WHENAtleastonereagentpackisexpired()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();

    //THEN
    Log.AppendFolder("THEN : Expired Reagent packs is displayed as Lot Expired on the Reagent Overview screen");
    if(!THENReagentPackIsDisplayedasLotAExpired()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN *****
    Log.AppendFolder("THEN : Order that is already created and scheduled should get processed with the expired reagent");
   
    if(!THENPatientorderprocessedwithexpiredReagent()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "F");
    Log["PopLogFolder"]()
     return false
    }
    Log["PopLogFolder"]() 
       
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP01_GWT_04_IM_AtleastoneExpiredReagentOrderScheduled", "P");

}

//*------US225831, US225828, US225829, US225830------*/
function US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled(){

    //USER STORY
    Log.Message("FEATURE: 225699 - ExpiredReagentUsage")
    Log.Message("US225828: Indication of the pack Lot Expiration when IA reagent pack has expired before being loaded")
    Log.Message("US225829: Indication of the pack Lot Expiration when reagent pack expires before any tests")
    Log.Message("US225830: Indication of the pack Lot Expiration when reagent pack expires before any tests")
    Log.Message("US225831 : Indication of the pack Lot Expiration when a IM reagent pack is expired");
    Log.Message("US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled")

    //Result.xml - In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : IM Primary/Ancillary reagent Packs are loaded ");
  
    if(!GivenIMPrimaryAncillaryreagentPacksloaded()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
        }
        
    if(!GivenWorkorderisnotscheduled_05()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()

    //WHEN
    Log.AppendFolder("WHEN : All the required reagent Packs expired ");
    if(!WHENAllreagentpacksareexpired()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();

    //THEN
    Log.AppendFolder("THEN : Reagent packs are displayed as 'Lot Expired' on the Reagent Overview screen");
    if(!THENReagentPackIsDisplayedasLotAExpired()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN *****
    Log.AppendFolder("THEN : New order for the expired reagents should not get processed and flagged as No consumables or No Primary/Ancillary");
    if(!THENReagentShouldGetFlaggedAsNoConsumablesOrNoPrimary()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "F");
    //Log["Warning"]("Not Implemented")
    Log["PopLogFolder"]()
     return false
    }
    Log["PopLogFolder"]()
       
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_05_IM_AllExpiredReagentOrderNotScheduled", "P");
}

//*------US225831, US225828, US225829, US225830------*/
function US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled(){

    //USER STORY
    Log.Message("FEATURE: 225699 - ExpiredReagentUsage")
    Log.Message("US225828: Indication of the pack Lot Expiration when IA reagent pack has expired before being loaded")
    Log.Message("US225829: Indication of the pack Lot Expiration when reagent pack expires before any tests")
    Log.Message("US225830: Indication of the pack Lot Expiration when reagent pack expires before any tests")
    Log.Message("US225831 : Indication of the pack Lot Expiration when a IM reagent pack is expired");
    Log.Message("US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled")

    //Result.xml - In Progress
    ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled", "I");
    
    //GIVEN
    Log.AppendFolder("GIVEN : IM Primary/Ancillary reagent Packs are loaded");
  
    if(!GivenIMPrimaryAncillaryreagentPacksloaded()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
        }
        
    if(!GivenWorkorderisnotscheduled_06()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
        }
    Log["PopLogFolder"]()

    //WHEN
    Log.AppendFolder("WHEN : All the required reagent Packs expired ");
    if(!WHENAtleastonereagentpackisexpired()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]();

    //THEN
    Log.AppendFolder("THEN : Expired Reagent packs is displayed as Lot Expired on the Reagent Overview screen");
    if(!THENReagentPackIsDisplayedasLotAExpired()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled", "F");
		Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN *****
    Log.AppendFolder("THEN : New order for the expired reagents should not get processed and flagged as No consumables or No Primary/Ancillary");
    if(!THENReagentShouldGetFlaggedAsNoConsumablesOrNoPrimary()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled", "F");
    //Log["Warning"]("Not Implemented")
    Log["PopLogFolder"]()
     return false
    }
    Log["PopLogFolder"]()
       
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOvw_ExpiredReagentUsage", "US_GROUP04_GWT_06_IM_AtleastoneExpiredReagentOrderNotScheduled", "P");

}

//Ramitha-- Loading/Unloading CH reagent packs

/*------ US225949, US225946, US248752 ------*/
function US_GROUP03_GWT_01_CHReagentLoadedIntoCompartment(){

    //USER STORY
    Log.Message("FEATURE: 225953 - Loading/Unloading CH reagent packs")
    Log.Message("US225949 : Identify loaded CH reagent packs after powerup");
    Log.Message("US225946 : Load a valid CH reagent pack into an empty slot");
    Log.Message("US248752 : Load a valid and not expired CH reagent pack into an available CH drawer position");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_01_CHReagentLoadedIntoCompartment", "I");

    //GIVEN 
    Log.AppendFolder("GIVEN : Hydra Module in Scanning state"); //Checking Hydra module is in Ready state
    if(!GivenHydraInReadyState()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_01_CHReagentLoadedIntoCompartment", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : Operator loads a new CH Reagent pack or Paired Pack(Usable) with a valid Barcode and lot not expired");
    if(!WhenCHReagentPackLoaded()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_01_CHReagentLoadedIntoCompartment", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 
    Log.AppendFolder("THEN : The newly added reagent pack is loaded into the reagent compartment and is available for use");
    if(!ThenCCReagentPackLoadedIntoCompartment()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_01_CHReagentLoadedIntoCompartment", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_01_CHReagentLoadedIntoCompartment", "P");

}

/*------ US225950 ------*/
function US_US225950_GWT_04_UnloadCHReagentFromCompartmentToDrawer(){

    //USER STORY
    Log.Message("FEATURE: 225953 - Loading/Unloading CH reagent packs")
    Log.Message("US225950 : Request to unload a CH reagent pack");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "I");
    
    //Prerequisite-- Load CH reagent
    Log.AppendFolder("Prerequisite : Operator loads a new CH Reagent pack or with a valid Barcode and lot not expired");
    if(!WhenCHReagentPackLoaded()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN1
    Log.AppendFolder("GIVEN : Hydra module is in scanning mode "); //Checking Hydra module is in Ready state
    if(!GivenHydraInReadyState()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN2
    Log.AppendFolder("GIVEN : Reagent pack is not in use"); 
    if(!GivenCHReagentPackNotInUse()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN3
    Log.AppendFolder("GIVEN : Drawer capacity is not full"); 
    if(!GivenCHDrawerCapacityNotFull()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : operator request to unload CH reagent pack");
    if(!WhenOperatorRequestToUnloadCHReagent()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 
    Log.AppendFolder("THEN : module should unload the pack from the reagent compartment into empty slot of the drawer");
    if(!ThenCHReagentPackUnloadedToDrawer()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP01_GWT_04_UnloadCHReagentFromCompartmentToDrawer", "P");

}

/*------ US225951 ------*/
function US_US225951_GWT_05_LoadedCHReagentExpiredAndUnLoaded(){

    //USER STORY
    Log.Message("FEATURE: 225953 - Loading/Unloading CH reagent packs")
    Log.Message("US225951 : Automatically recognize an empty or expired CH reagent");
    Log.Message("US225944 : Prevent loading an expired (lot or OBS) or depleted CH reagent that was previously in this Atellica system");
    Log.Message("US225945 : Load an empty or expired CH reagent pack that was previously in other module");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "I");
    
    //Prerequisite-- Load CH reagent
    Log.AppendFolder("Prerequisite : Operator loads a new CH Reagent pack or with a valid Barcode and lot not expired");
    if(!WhenCHReagentPackLoaded()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN1
    Log.AppendFolder("GIVEN : Hydra module is in scanning mode "); //Checking Hydra module is in Ready state
    if(!GivenHydraInReadyState()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN2
    Log.AppendFolder("GIVEN : Drawer capacity is not full"); 
    if(!GivenCHDrawerCapacityNotFull()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : A loaded CH reagent pack is expired");
    if(!WhenLoadedCHReagentPackIsExpired()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 
    Log.AppendFolder("THEN : module should automatically unload the pack from the reagent compartment into empty slot of the drawer");
    if(!ThenCHReagentPackUnloadedToDrawer()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "P");

}

/*------ US225944 ------*/
function US_US225944_GWT_06_EmptyCHReagentNotLoaded(){

    //USER STORY
    Log.Message("FEATURE: 225953 - Loading/Unloading CH reagent packs")
    Log.Message("US225951 : Automatically recognize an empty or expired CH reagent");
    Log.Message("US225944 : Prevent loading an expired (lot or OBS) or depleted CH reagent that was previously in this Atellica system");
    Log.Message("US225945 : Load an empty or expired CH reagent pack that was previously in other module");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "I");
    
    //Prerequisite-- Load CH reagent
    Log.AppendFolder("Prerequisite : Operator loads a new CH Reagent pack or with a valid Barcode and lot not expired");
    if(!WhenCHReagentPackLoaded()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN1
    Log.AppendFolder("GIVEN : Hydra module is in scanning mode "); //Checking Hydra module is in Ready state
    if(!GivenHydraInReadyState()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //GIVEN2
    Log.AppendFolder("GIVEN : Drawer capacity is not full"); 
    if(!GivenCHDrawerCapacityNotFull()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : Operator tries loading an empty pack that was previously used in Atellica system");
    if(!WhenLoadEmptyCHReagentPackPreviouslyUsed()){
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 
    Log.AppendFolder("THEN : Module rejects loading of the reagent in the compartment from the drawer");
    if(!ThenModuleRejectsLoadingIntoCompartment()){ 
        ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("Loading/Unloading CH reagent packs", "US_GROUP03_GWT_05_ExpiredOrEmptyCHReagentLoad", "P");

}

function US225842_GWT_01_IAReagentPackUnusableDead()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225700 - Display Reagent Remaining")
    Log.Message("US225842 : IA Primary Reagent Loaded For Unusable/Dead");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_01_IAReagentPackUnusableDead", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : Operator loaded a IA reagent pack");
    if(!GivenIAPrimaryReagenLoadedForUnusableDead())
    {
      ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_01_IAReagentPackUnusableDead", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : Reagent status is unusable");
    if(!WhenIAReagentUnusable())
    {
      ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_01_IAReagentPackUnusableDead", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Reagent details should display below status and flag for respective errors Empty for depleted reagent");
    if(!ThenIAReagentDetailsForErrorAndFlag())
    {
      ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_01_IAReagentPackUnusableDead", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_01_IAReagentPackUnusableDead", "P");
    
    //TO DO - add teardown for reagent which is used for lot expired- reset db to not expire lot
}

function US225842_GWT_02_CCReagentPackUnusableDead()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    Log.Message("FEATURE: 225700 - Display Reagent Remaining")
    Log.Message("US225842 : CC Reagent Loaded For Unusable/Dead")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_02_CCReagentPackUnusableDead", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : Operator loaded a CC reagent pack");
    if(!GivenCCReagenLoadedForUnusableDead())
    {
      ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_02_CCReagentPackUnusableDead", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : Reagent status is unusable");
    if(!WhenCCReagentUnusable())
    {
      ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_02_CCReagentPackUnusableDead", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Reagent details should display below status and flag for respective errors Empty for depleted reagent");
    if(!ThenCCReagentDetailsForErrorAndFlag())
    {
      ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_02_CCReagentPackUnusableDead", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Display Reagent Remaining", "US225842_GWT_02_CCReagentPackUnusableDead", "P");
    
    //TO DO - add teardown for reagent which is used for lot expired- reset db to not expire lot
}

//*******************************************************************************************************************************************************
//FEATURE: 225934 Load Unload Reagents
//*******************************************************************************************************************************************************

function US_GROUP02_GWT_02_IMBadReadReagentManualentrywindow()
{
    //USER STORY
    LogHighlight("Scenario : ModulestatescanningDoorclosedBadReadManualID")
    Log.Message("FEATURE: 225934 Load Unload Reagents");
    Log.Message("US225943 : US: Manual Reagent information entry");
    Log.Message("US225942 : US: Unreadable Pack");
              
    //Result.xml -In Progress
    ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_IMBadReadReagentManualentrywindow", "I"); 

    Log.AppendFolder("GIVEN : Hydra Module in Scanning state"); //Checking Hydra module is in Ready state
    if(!GivenHydraInReadyState()){
        ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_IMBadReadReagentManualentrywindow", "F"); 
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : Operator loads a Reagent with a bad Barcode for IM ");
    if(!LoadIMPrimaryReagentBadbarcode()){
        ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_IMBadReadReagentManualentrywindow", "F"); 
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //THEN 1
    Log.AppendFolder("THEN : The Manual ID Entry window is displayed for badbarcode for IM");
    if(!THENVerifyManualIDEntrywindowforIM()){
       ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_IMBadReadReagentManualentrywindow", "F"); 
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
 
    //THEN 2
    Log.AppendFolder("Then : EventLog is generated");
    if(!ThenEventLogGeneratedforReagentswappedforIM()){
       ReportTestStatusToResultXML("IA Primary Reagent Mixing", "US_GROUP03_GWT_02_ReagantMixingMeetsWarning", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();

  //Result.xml -Pass    
     ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_IMBadReadReagentManualentrywindow", "P"); 
}

//-- Loading/Unloading Reagents
function US_GROUP02_GWT_02_CHBadReadReagentManualentrywindow(){

    //USER STORY
    LogHighlight("Scenario : ModulestatescanningDoorclosedBadReadManualID")
    Log.Message("FEATURE: 225934 Load Unload Reagents");
    Log.Message("US225943 : US: Manual Reagent information entry");
    Log.Message("US225942 : US: Unreadable Pack");

    //Result.xml -In Progress
    ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_CHBadReadReagentManualentrywindow", "I");

    //GIVEN 
    Log.AppendFolder("GIVEN : Hydra Module in Scanning state"); //Checking Hydra module is in Ready state
    if(!GivenHydraInReadyState()){
        ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_CHBadReadReagentManualentrywindow", "F");
		Log["PopLogFolder"]()
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : Operator loads a Reagent with a bad Barcode for IM ");
    if(!LoadCHReagentBadbarcode()){
        ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_CHBadReadReagentManualentrywindow", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()   

    //THEN 1
    Log.AppendFolder("THEN : The Manual ID Entry window is displayed for badbarcode for CH");        
        if(!THENVerifyManualIDEntrywindowforCH()){        
        ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_CHBadReadReagentManualentrywindow", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()	
    
    //THEN 2
    Log.AppendFolder("Then : EventLog is generated");
    if(!ThenEventLogGeneratedforReagentswappedforCH()){
       ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_CHBadReadReagentManualentrywindow", "F");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]();
        	   
    //Result.xml -Pass
    ReportTestStatusToResultXML("LoadUnloadReagents", "US_GROUP02_GWT_02_CHBadReadReagentManualentrywindow", "P");

}

//******************************************************************************
//       GWT's [FEATURE : 247522 - Bulk System Fluids w/ Reservoirs ]
//******************************************************************************
//Shahana
/*------ US247546 ------*/
function US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired()
{
    //Initialize variables
    var DBExcelColName = "FT247522_GWT_01";
    var FluidVol = "0";
    var strOBSValue = "0 d 0 h";
    var boolFlag = true;
    var DBPatientColName = "FT247522_Group1_GWT01";
    var arrType = new Array("VolumePercent","LotExpirationDate","OBS");
    var Returnval=true;
    
    //USER STORY
    LogHighlight("Scenario : SystemFluidVolEmptyReserveVolFullLotOBSExpired")
    Log["Message"]("FEATURE: 247522 - Bulk System Fluids w/ Reservoirs");
    Log["Message"]("MIT : 328959");
    Log["Message"]("US247546 : Track/Report Amount of Remaining for Bulk System Fluid w/ reservoirs");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "I");
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : IM and CH fluids are loaded on the system");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
     //GIVEN 2
    Log["AppendFolder"]("GIVEN : Actual Fluid volume is empty, Reserve volume is full, Lot/OBS is expired and reserve sensor is ON");
    if(!GivenUpdateSystemFluidsBasedOnParameter(DBExcelColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN
    Log["AppendFolder"]("WHEN : Operator navigates to Supplies Overview Screen");
    if(!WHENOperatorChecksForSupplies())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 1
    Log["AppendFolder"]("THEN : Fluid volume should be displayed as 0%");
    if(!ThenFluidVolumeDisplayedBasedOnParameter(FluidVol))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : LOT Expiration should display the expired date.OBS should display 0 Days 0 Hours");
    if(!ThenLotOBSDisplayedBasedOnParameter(DBExcelColName,strOBSValue))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : There should be a visual indication on the UI (ex: highlighting in Red) that the Volume is depleted and LOT/OBS has expired.");
    if(!ThenVisualIndicationDisplayedBasedOnParameter(DBExcelColName,boolFlag,arrType))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : No alert should be displayed for Inventory");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 5
    Log["AppendFolder"]("THEN : Operator event log generated for LOT/OBS expiration");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 6
    Log["AppendFolder"]("THEN : CH/IM tests should not get processed");
    if(!ThenCHIMTestShouldNotBeProcessed(DBPatientColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    if(Returnval==false)
    {
        return false;
    }
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_SystemFluidVolEmptyReserveVolFullLotOBSExpired", "P");
        return true;
    }       
}

/*------ US247549 ------*/   
function US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired()
{
    //Initialize variables
    var DBExcelColName = "FT247522_GWT_02";
    var FluidVol = "0";
    var strOBSValue = "0 d 0 h";
    var boolFlag = true;
    var DBPatientColName = "FT247522_Group1_GWT02";
    var arrType = new Array("LotExpirationDate","OBS");
    var Returnval=true;
    
    //USER STORY
    LogHighlight("Scenario : SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired")
    Log.Message("FEATURE: 247522 - Bulk System Fluids w/ Reservoirs");
    Log.Message("MIT : 328961");
    Log.Message("US247549 : Bulk System Fluid bottle (w/ reservoir) is depleted");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : IM and CH fluids are loaded on the system");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
     //GIVEN 2
    Log.AppendFolder("GIVEN : Actual Fluid volume is above threshold, Reserve volume is full, Lot/OBS is expired and reserve sensor is ON");
    if(!GivenUpdateSystemFluidsBasedOnParameter(DBExcelColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN
    Log.AppendFolder("WHEN : Operator navigates to Supplies Overview Screen");
    if(!WHENOperatorChecksForSupplies())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 1
    Log["AppendFolder"]("THEN : Fluid volume should be displayed as 0%");
    if(!ThenFluidVolumeDisplayedBasedOnParameter(FluidVol))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : LOT Expiration should display the expired date.OBS should display 0 Days 0 Hours");
    if(!ThenLotOBSDisplayedBasedOnParameter(DBExcelColName,strOBSValue))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : There should be a visual indication on the UI (ex: highlighting in Red) that the LOT/OBS has expired.");
    if(!ThenVisualIndicationDisplayedBasedOnParameter(DBExcelColName,boolFlag,arrType))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : No alert should be displayed for Inventory");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 5
    Log["AppendFolder"]("THEN : Operator event log generated for LOT/OBS expiration");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 6
    Log["AppendFolder"]("THEN : CH/IM tests should not get processed");
    if(!ThenCHIMTestShouldNotBeProcessed(DBPatientColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    if(Returnval==false)
    {
        return false;
    }
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_02_SystemFluidVolAboveThresholdReserveVolFullLotOBSExpired", "P");
        return true;
    }
}

/*------ US247551, US247552, US268971, US268972, US268973, US268974 ------*/      
function US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired()
{
    //Initialize variables
    var DBExcelColName = "FT247522_GWT_03";
    var FluidVol = "0";
    var strOBSValue = "79 d 23 h";
    var boolFlag = true;
    var DBPatientColName = "FT247522_Group6_GWT03";
    var arrType = new Array("VolumePercent");
    var Returnval=true;
    
    //USER STORY
    LogHighlight("Scenario : SystemFluidVolEmptyReserveVolFullLotOBSExpired")
    Log.Message("FEATURE: 247522 - Bulk System Fluids w/ Reservoirs");
    Log.Message("MIT : 328962");
    Log.Message("US247551 : Lot Expiration for Bulk System Fluid w/ reservoir");
    Log.Message("US247552 : OBS Expiration for Bulk System Fluid w/ reservoir");
    Log.Message("US268971 : Prevent Use when Bulk System Fluid w/ reservoir Lot has expired");
    Log.Message("US268972 : Prevent Use when Bulk System Fluid w/ reservoir OBS has expired");
    Log.Message("US268973 : Display Lot Expiration for Bulk System Fluid w/ reservoir");
    Log.Message("US268974 : Display OnBoard Stability Remaining for Bulk System fluid w/ reservoir");
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : IM and CH fluids are loaded on the system");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
     //GIVEN 2
    Log.AppendFolder("GIVEN : Actual Fluid volume is empty, Reserve volume is empty, Lot/OBS is Not expired and reserve sensor is OFF");
    var DBExcelColname="FT247522_GWT_03";
    if(!GivenUpdateSystemFluidsBasedOnParameter(DBExcelColname))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //WHEN
    Log.AppendFolder("WHEN : Operator navigates to Supplies Overview Screen");
    if(!WHENOperatorChecksForSupplies())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 1
    Log["AppendFolder"]("THEN : Fluid volume should be displayed as 0%");
    if(!ThenFluidVolumeDisplayedBasedOnParameter(FluidVol))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : LOT Expiration should be displayed. OBS remaining days and hours should be displayed.");
    if(!ThenLotOBSDisplayedBasedOnParameter(DBExcelColName,strOBSValue))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : There should be a visual indication on the UI (ex: highlighting in Red) that the Volume is depleted.");
    if(!ThenVisualIndicationDisplayedBasedOnParameter(DBExcelColName,boolFlag,arrType))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : No alert should be displayed for Inventory");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 5
    Log["AppendFolder"]("THEN : Operator event log generated for fluid volume depletion");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 6
    Log["AppendFolder"]("THEN : CH/IM tests should not get processed");
    if(!ThenCHIMTestShouldNotBeProcessed(DBPatientColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    if(Returnval==false)
    {
        return false;
    }
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP06_GWT_03_SystemFluidVolEmptyReserveVolEmptyLotOBSNotExpired", "P");
        return true;
    }
}


//SHRUTIKA
//***************************************************************************************************
// Feature : 278988 -Sample Tips
// US Covered :278992
//*************************************************************************************************
function GWT278988_14_SampleTips()
{
   
    
    AlertTestDataColName = "GWT278988_14_SampleTips"
    
   //USER STORY
    LogHighlight("Scenario : Verify Supplies - TIPS: TIP TRAY1 Not Loaded and TIP TRAY2 IN USE")    
    Log.Message("FEATURE: 278988 - Sample Tips")
    Log.Message("US278992 : Tests for Supplies -Configure Alert Threshold for Sample Tips");    
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Sample Tips", "GWT278988_14_SampleTips", "I");

    //GIVEN *****
    
    Log["AppendFolder"]("GIVEN : Tray2 is loaded and Tray1 is not loaded");
    if(!GivenTray2IsLoadedAndTray1IsNotLoaded())
    {
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet)     
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_14_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log["AppendFolder"]("WHEN : Tips count meets or below threshold and Tray2 In Use and Tray1 Not InUse");
    if(!WhenTipsCountMeetsOrBelowThresholdAndTray2InUseAndTray1NotInUse())
    {
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet)       
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_14_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    
    // Verify Alert for TIPS Threshold trigger
    Log["AppendFolder"]("THEN:Alert is displayed that the TIPS COUNT is below user threshold.");
    if(!THENVerifyAlertForSuppliesBelowThreshold(AlertTestDataColName)){
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet) 
      ReportTestStatusToResultXML("Supplies Overview", "GWT278988_14_SampleTips", "F");
      Log["PopLogFolder"]();
    return false;}
    Log["PopLogFolder"](); 
    
    
    //Verify EventLog for TIPS Threshold trigger
    Log.AppendFolder("THEN : Operator event log generated for TIPS Count below/meets Threshold ");
    //var thresholdIndicator="Not Depleted"
    var Scenario = "GWT278988_14_SampleTips"
    if(!THENVerifyOperatorEventLogWhenTIPSCountMeetThreshold(Scenario)){
        var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
        PostRun_ExecuteRoundTripQuery(DBExcelSheet) 
        ReportTestStatusToResultXML("Supplies Overview", "GWT278988_14_SampleTips", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()		
    
    
    Log["AppendFolder"]("THEN : Samples should get processed till TIPS Are Depleted");
    if(!ThenVerifyTray1AndTray2BehaviorAndAlertAndOperatorLogsAndSampleAspirationUntilTipsAreDepleted())
    {
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet) 
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_14_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
      
    //POSTRUN
    Log["AppendFolder"]("POSTRUN: Fill Supplies and Exit")
    var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
    if(!PostRun_ExecuteRoundTripQuery(DBExcelSheet)){     
    Log["Error"]("Unable to Fill supplies and POSTRUN Failed")
    Log["PopLogFolder"]()
    return(false)}
    Log["PopLogFolder"]()

    //Result.xml -Pass
    ReportTestStatusToResultXML("Sample Tips", "GWT278988_14_SampleTips", "P");
}

//SHRUTIKA
//***************************************************************************************************
// Feature : 278988 -Sample Tips
// US Covered :US278990,US278997
//*************************************************************************************************
function GWT278988_16_SampleTips()
{
  
   //USER STORY
    LogHighlight("Scenario : Verify Supplies - TIPS: TIP TRAY1 and TRAY2 Loaded")    
    Log.Message("FEATURE: 278988 - Sample Tips")
    Log.Message("US278990 : Tests for Supplies -Track Sample Tips Inventory");    
    Log.Message("US278997 : Tests for Supplies -Sample Tip Tray Drawer In Use"); 
    

   
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "I");

    //GIVEN *****
    Log["AppendFolder"]("GIVEN : Tray1 and Tray2 are loaded");
    if(!GivenTray1AndTray2IsLoaded())
    {
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet)     
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log["AppendFolder"]("WHEN : Tips count is above threshold and Tray1 is InUse and gets depleted after sometime");
    if(!WhenTipsCountAboveThreshold())
    {
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet)  
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
//    THEN  - ******Muru - Below THEN part is not needed Hence Commented******
//    LogHighlight("THEN : Based on sample aspiration, Tray 1 should display the count of remaining tips along with the indication InUse on the user interface");
//    if(!ThenVerifyTray1DisplaysTipsCountRemainingBasedOnAspirationAndInUse())
//    {
//      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
//      PostRun_ExecuteRoundTripQuery(DBExcelSheet)  
//      ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "F");
//      Log["PopLogFolder"]()
//      return false
//    }
//    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("THEN : Tray 2 should display tips remaining in this tray. It should NOT display InUse");
    if(!ThenVerifyTray2RemainingCountAndNotInUSE())
    {
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet)  
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    Log["AppendFolder"]("THEN : After Tray 1 gets depleted, the system should switch to Tray 2 and display the count of remaining tips based on the aspiration along with the indication InUse on the user interface")
    if(!ThenVerifySystemSwtichedToTray2AfterTray1Depletes())
    {
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet)  
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    Log["AppendFolder"]("THEN : After tray 2 gets depleted, Tray should display status as EMPTY");
    if(!ThenAfterTray2GetsDepletedTray2ShownAsEmpty()){
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet)  
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
    Log["AppendFolder"]("THEN : Alert should not be generated for TIPS Trays depletion ");
    AlertTestDataColName = "GWT278988_16_SampleTips"
    if(THENVerifyAlertForSuppliesBelowThreshold(AlertTestDataColName)){     //Alert not present should be verified, hence not condition is removed
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet) 
      ReportTestStatusToResultXML("Supplies Overview", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]();
    return false;}
    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("THEN : Event log should be generated for TIP Trays depletion");
    var Colname = "GWT278988_16_SampleTips"
    if(!THENVerifyOperatorEventLogWhenTIPSCountMeetThreshold(Colname)){
      var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
      PostRun_ExecuteRoundTripQuery(DBExcelSheet) 
      ReportTestStatusToResultXML("Supplies Overview", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]();
      return false;}     
    Log["PopLogFolder"]()
    
     Log["AppendFolder"]("THEN : After both trays are EMPTY, sample aspiration should be stopped and should NOT process IM tests");
    if(!ThenVerifySampleNotAspiratedWithTIPSEmpty())
    {
      Log["Message"]("TO DO - Not yet seen in dry run")
      ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "F");
      Log["PopLogFolder"]()
      return false
    }
		Log["PopLogFolder"]()
    
     //POSTRUN
    Log["AppendFolder"]("POSTRUN: Fill Supplies and Exit")
    var DBExcelSheet = "RoundTrip"; //Execute PostRun - Fill the supplies and Exit    
    if(!PostRun_ExecuteRoundTripQuery(DBExcelSheet)){     
    Log["Error"]("Unable to Fill supplies and POSTRUN Failed")}
    Log["PopLogFolder"]()
    
        //Result.xml -Pass
    ReportTestStatusToResultXML("Sample Tips", "GWT278988_16_SampleTips", "P");


}


//Amar


function US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired()
{
    //Initialize variables
    var DBExcelColName="FT247522_GWT_08";
    var FluidVol="0";
    var strOBSValue="79 d 23 h";
    var boolFlag=true;
    var DBPatientColName="FT247522_Group1_GWT08";
    var arrType = new Array("VolumePercent");
    var Returnval=true;
    
    InitializeMetaDataHYDRA();  

    //USER STORY
    LogHighlight("Scenario : SystemFluidVolEmptyReserveVolFullLotOBSNotExpired")
    Log.Message("FEATURE: 247522 - Bulk System Fluids w/ Reservoirs");
    Log.Message("MIT : 328958");
//  Log.Message("US247546 : Track/Report Amount of Remaining for Bulk System Fluid w/ reservoirs");
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "I");
    
   //GIVEN 1
    Log.AppendFolder("GIVEN : IM and CH fluids are loaded on the system");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //GIVEN 2
    Log.AppendFolder("GIVEN : Actual Fluid volume is empty, Reserve volume is full, Lot/OBS is not expired and reserve sensor is OFF");
    if(!GivenUpdateSystemFluidsBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
                       
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
    
    //THEN 1
    Log["AppendFolder"]("THEN : Fluid volume should be displayed as 0%");
    if(!ThenFluidVolumeDisplayedBasedOnParameter(FluidVol))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : LOT Expiration should display the expired date.OBS should display 0 Days 0 Hours");
    if(!ThenLotOBSDisplayedBasedOnParameter(DBExcelColName,strOBSValue))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
         Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : There should be a visual indication on the UI (ex: highlighting in Red) that the Volume is depleted and LOT/OBS has expired.");
    if(!ThenVisualIndicationDisplayedBasedOnParameter(DBExcelColName,boolFlag,arrType))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
          Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : No alert should be displayed for Inventory");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
         Returnval=false;   
    } 
    Log["PopLogFolder"]();
    
//    //THEN 5 Event log not generaating for volume depleted annd obs not expired
//    Log["AppendFolder"]("THEN : Operator event log generated for LOT/OBS expiration");
//    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
//    {
//         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
//         Returnval=false;
//    } 
//    Log["PopLogFolder"]();
    
    //THEN 6
    Log["AppendFolder"]("THEN : CH/IM tests should not be processed");
    if(!ThenCHIMTestShouldNotBeProcessed(DBPatientColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "F");
         Returnval=false;
    } 
    Log["PopLogFolder"]();
    if(Returnval==false)
    {
        return false;
    }
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_08_SystemFluidVolEmptyReserveVolFullLotOBSNotExpired", "P");
        return true;
    }  
   }
   
function US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired()
{
//Initialize variables
    var DBExcelColName="FT247522_GWT_10";
    var FluidVol="5";
    var strOBSValue="79 d 23 h";
    var boolFlag=true;
    var DBPatientColName="FT247522_Group1_GWT10";
    var arrType = new Array("VolumePercent");
    var Returnval=true;
    InitializeMetaDataHYDRA();  

    //USER STORY
    LogHighlight("Scenario : SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired")
    Log.Message("FEATURE: 247522 - Bulk System Fluids w/ Reservoirs");
    Log.Message("MIT : 328958");
//    Log.Message("US247546 : Track/Report Amount of Remaining for Bulk System Fluid w/ reservoirs");
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : IM and CH fluids are loaded on the system");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
    
    //GIVEN 2
    Log.AppendFolder("GIVEN : Actual Fluid volume is below Threshold, Reserve volume is full, Lot/OBS is not expired and reserve sensor is OFF");
    if(!GivenUpdateSystemFluidsBasedOnParameter(DBExcelColName))
    {
          ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
                       
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
      ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
    
    
    //THEN 1
    Log.AppendFolder("THEN : Fluid volume should display in percentage of 5% along with LOT");
    if(!ThenFluidVolumeDisplayedBasedOnParameter(FluidVol)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
         Returnval=false;
         }
    Log["PopLogFolder"]()
    
    //THEN 2
    Log["AppendFolder"]("THEN : LOT Expiration should be displayed. OBS remaining days and hours should be displayed.");
    if(!ThenLotOBSDisplayedBasedOnParameter(DBExcelColName,strOBSValue))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : There should be a visual indication on the UI (ex: highlighting in Red) that the Volume is below user threshold.");
    if(!ThenVisualIndicationDisplayedBasedOnParameter(DBExcelColName,boolFlag,arrType))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : Alert should be displayed for Inventory");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 5
    Log["AppendFolder"]("THEN : Operator event log generated for LOT/OBS below user threshold");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
     
     //THEN 6
    Log["AppendFolder"]("THEN : CH/IM tests should not get processed");
    if(!ThenCHIMTestShouldNotBeProcessed(DBPatientColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    if(Returnval==false)
    {
        return false;
    }
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "P");
        return true;
    }       

}   

function US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired()
{
//Initialize variables
    var DBExcelColName="FT247522_GWT_06";
    var FluidVol="50";
    var strOBSValue="79 d 23 h";
    var boolFlag=true;
    var DBPatientColName="FT247522_Group1_GWT06";
//    var arrType = new Array("VolumePercent");
    var Returnval=true;
    InitializeMetaDataHYDRA();    
    
    
    //USER STORY
    LogHighlight("Scenario : SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired")
    Log.Message("FEATURE: 247522 - Bulk System Fluids w/ Reservoirs");
    Log.Message("MIT : 328958");
//    Log.Message("US247546 : Track/Report Amount of Remaining for Bulk System Fluid w/ reservoirs");
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired", "I");
    
    //GIVEN 1
        Log.AppendFolder("GIVEN 1: IM and CH fluids are loaded on the system");
        if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired", "F");
        Log["PopLogFolder"]();
        return false;}             
        Log["PopLogFolder"]()
                
    //GIVEN 2
    Log.AppendFolder("GIVEN 4: Fluid level is above Threshold and Lot and OBS Not Expired");
    var DBExcelSheet="IMTPreLoadedTestEnabledFluidBelowThresholdLotOBSNotExp";
    if(!GivenUpdateSystemFluidsBasedOnParameter(DBExcelColName)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
    
    //WHEN
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()
    
    //THEN 1
    Log["AppendFolder"]("THEN : Fluid volume should be displayed as 5%");
    if(!ThenFluidVolumeDisplayedBasedOnParameter(FluidVol)){
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired", "F");
         Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : LOT Expiration should display the expired date.OBS remaining days should be displayed");
     if(!ThenLotOBSDisplayedBasedOnParameter(DBExcelColName,strOBSValue))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : CH/IM tests should get processed");
    if(!ThenCHIMTestShouldNotBeProcessed(DBPatientColName))
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_10_SystemFluidVolBelowThresReserveVolFullLotOBSNotExpired", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    if(Returnval==false)
    {
        return false;
    }
    else
    {
        //Result.xml -Pass
          ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_SystemFluidVolAboveThresReserveVolFullLotOBSNotExpired", "P");
        return true;
    }       
    
}


//******************************************************************************
//          GWT : 225712 : On-board reagent inventory tracking
//******************************************************************************

function US225902_GWT_05_UnloadLoadDisabledIMCHReagent()
{
    //USER STORY
    InitializeMetaDataHYDRA();
    LogHighlight("Verify Reagent Status when Disabled IM/CH Reagent Reloaded")
    Log.Message("FEATURE: On-board reagent inventory tracking")
    Log.Message("US225902 : Information to manage and direct workorders to individual reagent packs")
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "I");

    //GIVEN *****
    Log.AppendFolder("GIVEN : A Loaded IM/CH reagent pack is Disabled");
    if(!GivenIMCHReagentPackDisabled())
    {
      ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
    //WHEN *****
    Log.AppendFolder("WHEN : Operator unloads and reloads the same Reagent Pack into IM module");
    if(!WhenIAReagentPackUnloadedAndReloaded())
    {
      ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "F");
      Log["PopLogFolder"]()
      return false
    }
    Log["PopLogFolder"]()
    
      //THEN 1
      Log.AppendFolder("THEN : The pack Disabled state is persisted");
      if(!THENVerifyPackDisabledStatePersisted())
      {
        ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "F");
        Log["PopLogFolder"]()
        return false
      }
      Log["PopLogFolder"]()
	
      //THEN 2
      Log.AppendFolder("THEN : Reagent Loading screen now displays it as an unusable pack");
      if(!THENVerifyReagentLoadingScreen())
      {
        ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "F");
        Log["PopLogFolder"]()
        return false
      }
      Log["PopLogFolder"]()
	
      //THEN 3
      Log.AppendFolder("THEN : As an unusable pack, no new tests are scheduled to use it");
      if(!THENVerifySystemBlocksNewTest())
      {
        ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "F");
        Log["PopLogFolder"]()
        return false
      }
      Log["PopLogFolder"]()
	
		
      //THEN 4
      Log.AppendFolder("THEN : Any currently scheduled or running tests assigned to use the pack continue to run to completion");
      if(!THENVerifyScheduledTestsRunToCompletion())
      {
        ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "F");
        Log["PopLogFolder"]()
        return false
      }
      Log["PopLogFolder"]()
	
	
      //THEN 5
      Log.AppendFolder("THEN : Inventory and time based criteria continue to be monitored and applied");
      if(!THENVerifyInventoryDetails())
      {
        ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "F");
        Log["PopLogFolder"]()
        return false
      }
      Log["PopLogFolder"]()
	
      //Result.xml -Pass
      ReportTestStatusToResultXML("InventoryTracking", "US225902_GWT_05_UnloadLoadDisabledIMCHReagent", "P");
    
}

//******************************************************************************
//         GWT's [FEATURE : 284207 - Sample Tip Waste]         
//******************************************************************************
//Ramitha
function US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold()
{
    //USER STORY
    LogHighlight("Scenario : TipsWasteBinNotFullBelowThreshold")
    Log.Message("FEATURE: 284207 Tips Waste"); 
    Log.Message("US284269: Tips Waste Bin is below threshold and there is sufficient capacity")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT1";
    var DBlogText="Tips waste below threshold"
    var WasteType="Tips";
    var WasteStatus="OK";
    var DBPatientColName="FT284207TW_GWT1";
    var Returnval=true;
    InitializeMetaDataHYDRA();   
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold", "I");
    
    //GIVEN 1
   Log.AppendFolder("GIVEN : Tips Waste Drawer is Present");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold", "F");
                Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Tips waste bin is closed,not full and is below threshold");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Tips status should display as OK");
     if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
   // if(!ThenWastestatusDisplayed(Tipstatus)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
   
     //THEN 2
    Log["AppendFolder"]("THEN : IM tests should be processed");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_TipsWasteBinNotFullBelowThreshold", "P");
        return true;   }       
}

/*------ US284210 ------*/
function US_GROUP01_GWT_02_03_SampleTipWasteBinNotFullMeetsOrAboveThreshold()
{
    //USER STORY
    LogHighlight("Scenario : SampleTipWasteBinNotFullMeets/AboveThreshold")
    Log.Message("FEATURE: 284207 - Sample Tip Waste"); 
    Log.Message("US284270: Alert for Sample Tip Waste based on user configured threshold")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT3";
    var DBlogText="Tip waste meets/above threshold"
    var WasteType="Tips";
    var WasteStatus="Almost Full";
    var boolFlag=true;
    var DBPatientOrdColName="FT284207TW_GWT3";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "I");
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : Sample Tip Waste Drawer is Present");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log["AppendFolder"]("WHEN: Sample Tip waste bin is closed and bin is not full and Sample tip waste is meets/above the threshold");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log["AppendFolder"]("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log["AppendFolder"]("THEN : Tip/Cuvette  waste status is Above threshold");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){  
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
    //THEN 2
    Log["AppendFolder"]("THEN : An alert is generated notifying the operator the waste configured threshold has been met");
    if(ThenAlertStatusForInventoryBasedOnParameter()){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "F");
        Returnval=false; } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : Event is logged in the Operator’s event log");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName)) {
         ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "F");
        Returnval=false; } 
    Log["PopLogFolder"]();
     
     //THEN 4
    Log["AppendFolder"]("THEN : System continous to aspirate IM tests");
    if(!WHENSystemAspiratesIMReagent(DBPatientOrdColName)){ 
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else {
        //Result.xml -Pass
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_02_SampleTipWasteBinNotFullMeetsOrAboveThreshold", "P");
        return true;}       
}

function US_GROUP01_GWT_04_TipsWasteBinFull()
{
    //USER STORY
    LogHighlight("Scenario : TipsWasteBinFull")
    Log.Message("FEATURE: 284207 Tips Waste"); 
    Log.Message("US284211: Tips Waste Bin is full")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT4";
    var DBlogText="Tips waste bin Full"
    var WasteType="Tips";
    var WasteStatus="Full";
    var DBPatientColName="FT284207TW_GWT4";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_04_TipsWasteBinFull", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Tips Waste Drawer is Present");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
                Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Tips waste bin is closed and full");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Tips status should display as Full");
  if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
    
    //THEN 2
    Log["AppendFolder"]("THEN : Operator event log generated indicating that the Tips waste is full. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
     
     //THEN 3
    Log["AppendFolder"]("THEN : System stops aspiration of New IM tests. ");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  //Todo:Amar--  System continues to process IM Tests
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : Alert should be displayed that aspiration for IM tests has stopped.");
    if(ThenAlertStatusForInventoryforaboveThreshold())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
  //THEN 5
    Log["AppendFolder"]("THEN : An event is logged in the Operator’s event log indicating that sample aspiration is stopped. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_TipsWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();  
    
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_TipsWasteBinFull", "P");
        return true;   }       
}

function US_GROUP01_GWT_05_TipsWasteBinnotpresent()
{
    //USER STORY
    LogHighlight("Scenario : TipsWasteBinFull")
    Log.Message("FEATURE: 284207 Tips Waste"); 
    Log.Message("US284426: US: Track Tips in reservoir when Tips Waste Bin is removed")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT5";
    var DBlogText="Tips waste bin Reservoir Full"
    var WasteType="Tips";
    var WasteStatus="Not present, on reserve";
    var DBPatientColName="FT284207TW_GWT5";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Tips Waste Drawer is closed and bin is removed");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "F");
                Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Tips waste bin is not replaced and reservior is not full");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Tips status should display as Bin Not Present, On Reserve");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
//    
//    //THEN 2
//    Log["AppendFolder"]("THEN : Sw tracks the tip waste in reservior. ");
//    //Need to automate
//   // if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
//    {
//         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "F");
//        Returnval=false;
//    } 
//    Log["PopLogFolder"]();
//     
//     //THEN 3
    Log["AppendFolder"]("THEN : System continues to aspirate IM tests without interruption  ");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
        
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_TipsWasteBinnotpresent", "P");
        return true;   }       
}

function US_GROUP01_GWT_06_TipsWasteBinReservoirFull()
{
    //USER STORY
    LogHighlight("Scenario : TipsWasteBinFull")
    Log.Message("FEATURE: 284207 Tips Waste"); 
    Log.Message("US284431: Tips Waste Bin Removed and Reservoir is Full")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT6";
    var DBlogText="Tips waste bin Reservoir Full"
    var WasteType="Tips";
    var WasteStatus="On reserve, Full";
    var DBPatientColName="FT284206TW_GWT6";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Tips Waste Drawer is closed and waste bin is removed");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
                Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Tips waste waste bin is not replaced.Tip Reservoir reached max capacity");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Tips_Waste", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Tips status should display as Reserve Full");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
    
    //THEN 2
    Log["AppendFolder"]("THEN : Operator event log generated indicating that the Tip/Tips waste is full. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
     
     //THEN 3
    Log["AppendFolder"]("THEN : System stops aspiration of New IM tests. ");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : Alert should be displayed that aspiration for IM tests has stopped.");
    if(ThenAlertStatusForInventoryforaboveThreshold())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
  //THEN 5
    Log["AppendFolder"]("THEN : An event is logged in the Operator’s event log indicating that sample aspiration is stopped. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();  
    
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_TipsWasteBinReservoirFull", "P");
        return true;   }       
}

/*------284437 ------*/
function US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes()
{
    //USER STORY
    LogHighlight("Scenario : SampleTipWasteBinEmptiedAndOperatorSelectsYesInThePopup")
    Log.Message("FEATURE: 284207 - Sample Tip Waste"); 
    Log.Message("US284270: Accurately Track Tip Waste when tip waste bin has been returned to the system")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT7";
    var DBlogText="Tip waste below threshold"
    var WasteType="Tips";
    var DBColNameReservoirCount="FT284206CW_GWT_GetReservoirCount";
    var DBColNameWasteCount="FT284206CW_GWT_GetWasteCount";
    var WasteStatus = "OK";
    var boolFlag=true;
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "I");
    
    //Prerequisite: Set and Get the reservoir count and waste count from DB
    Log["AppendFolder"]("Prerequisite: update tips reservoir count and waste count in DB");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("Prerequisite: fetch tips reservoir count from DB");
    var ReservoirCount = GetReservoirWasteCountFromDB(DBColNameReservoirCount,WasteType);
    if(!ReservoirCount){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]() 
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : Sample Tip Waste Drawer is closed, Tip waste bin is removed and then replaced");    
    if(!GivenWasteDrawerClosed(WasteType)){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 
    Log["AppendFolder"]("WHEN: operator selects Yes (the Waste bin was emptied) ");
    if(!WhenOperatorSelectsYesInTheConfirmationPopup()){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log["AppendFolder"]("THEN : Operator response is logged in Audit Trail");
    Log["Message"]("Audit Trail log is not yet implemented");
    Log["PopLogFolder"]()      
    
    //THEN 2 and THEN 3
    Log["AppendFolder"]("THEN : SW tracks the Tip/Cuvette waste in the  waste bin");
    Log["PopLogFolder"]();
    Log["AppendFolder"]("THEN : New Tip/Cuvette waste count = number of Tips/Cuvette in the reservoir");
    if(!ThenCompareWasteCountFromDBAndReservoirCountPriorPopup(DBColNameWasteCount,ReservoirCount,WasteType)) {
         ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Returnval=false; } 
    Log["PopLogFolder"]();
     
     //THEN 4
    Log["AppendFolder"]("THEN : The Tip/Cuvette Waste Status is re-evaluated:If below threshold, Waste Status = “OK” (Alert is removed)");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){ 
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else {
        //Result.xml -Pass
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "P");
        return true;}       
}

/*------284437 ------*/
function US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo()
{
    //USER STORY
    LogHighlight("Scenario : SampleTipWasteBinNotEmptiedAndOperatorSelectsNoInThePopup")
    Log.Message("FEATURE: 284207 - Sample Tip Waste"); 
    Log.Message("US284270: Accurately Track Tip Waste when tip waste bin has been returned to the system")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT7";
    var DBlogText="Tip waste below threshold";
    var WasteType="Tips";
    var DBColNameReservoirCount="FT284206CW_GWT_GetReservoirCount";
    var DBColNameWasteCount="FT284206CW_GWT_GetWasteCount";
    var WasteStatus = "OK";
    var boolFlag=true;
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "I");
    
    //Prerequisite: Set and Get the reservoir count and waste count from DB
    Log["AppendFolder"]("Prerequisite: update tips reservoir count and waste count in DB");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("Prerequisite: fetch tips reservoir count from DB");
    var ReservoirCount = GetReservoirWasteCountFromDB(DBColNameReservoirCount,WasteType);
    if(!ReservoirCount){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]() 
    
    Log["AppendFolder"]("Prerequisite: fetch tips waste bin count from DB");
    var WasteBinCount = GetWasteBinCountFromDB(DBColNameWasteCount,WasteType);
    if(!WasteBinCount){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : Sample Tip Waste Drawer is closed, Tip waste bin is removed and then replaced");    
    if(!GivenWasteDrawerClosed(WasteType)){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 
    Log["AppendFolder"]("WHEN: operator selects No (Did not empty the Waste bin) ");
    if(!WhenOperatorSelectsNoInTheConfirmationPopup()){
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log["AppendFolder"]("THEN : Operator response is logged in Audit Trail");
    Log["Message"]("Audit Trail log is not yet implemented");
    Log["PopLogFolder"]()      
    
    //THEN 2 and THEN 3
    Log["AppendFolder"]("THEN : SW tracks the Tip/Cuvette waste in the  waste bin");
    Log["PopLogFolder"]();
    Log["AppendFolder"]("THEN : New cuvette waste count = number of cuvettes in the bin prior to removal from the system + number of cuvettes in the reservoir.");
    if(!ThenCompareWasteAndReservoirCountPriorPopup(DBColNameWasteCount,WasteBinCount,ReservoirCount,WasteType)) {
         ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "F");
        Returnval=false; } 
    Log["PopLogFolder"]();
     
     //THEN 4
    Log["AppendFolder"]("THEN : The Cuvette Waste Status is re-evaluated:If cuvette waste count is below threshold, Cuvette Waste Status = “OK” (Alert is removed)");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){ 
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else {
        //Result.xml -Pass
        ReportTestStatusToResultXML("Sample Tip Waste", "US_GROUP01_GWT_08_SampleTipWasteBinNotEmptiedAndOperatorSelectsNo", "P");
        return true;}       
}



//******************************************************************************
//         GWT's [FEATURE : 284206 - Cuvette Waste]         
//******************************************************************************

/*------ US284209 ------*/
function US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold()
{
    //USER STORY
    LogHighlight("Scenario : CuvetteWasteBinNotFullBelowThreshold")
    Log.Message("FEATURE: 284206 Cuvette Waste"); 
    Log.Message("US284209: Cuvette Waste Bin is below threshold and there is sufficient capacity")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT1";
    var DBlogText="Cuvette waste below threshold"
    var WasteType="Cuvettes";
    var WasteStatus="OK";
    var DBPatientColName="FT284206CW_GWT1";
    var Returnval=true;
    InitializeMetaDataHYDRA();   
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Cuvette Waste Drawer is Present");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Cuvette waste bin is closed,not full and is below threshold");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Cuvette status should display as OK");
     if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
   // if(!ThenWastestatusDisplayed(Cuvettestatus)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
   
     //THEN 2
    Log["AppendFolder"]("THEN : IM tests should be processed");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_01_CuvetteWasteBinNotFullBelowThreshold", "P");
        return true;   }       
}

function US_GROUP01_GWT_02_03_CuvetteWasteBinMeetsAboveThreshold()
{
    //USER STORY
    LogHighlight("Scenario : CuvetteWasteBinNotFullMeetsAboveThreshold")
    Log.Message("FEATURE: 284206 Cuvette Waste"); 
    Log.Message("US284210:Alert for Cuvette Waste Bin based on user configured threshold")    
    
    //Initialize variables
    var DBExcelColName="FT284206CW_GWT3";
    var DBlogText="Cuvette waste as configured Threshold"
    var WasteType="Cuvettes";
    var WasteStatus="Almost Full";
    var DBPatientColName="FT284206CW_GWT3";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Cuvette Waste Drawer is Present");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Cuvette waste bin is closed,not full and waste is meets/above the threshold");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_03_CuvetteWasteBinNotFullBelowThreshold", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Cuvette status should display as Almost Full");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
    //THEN 2
    Log["AppendFolder"]("THEN : Alert should be displayed for Inventory");
    if(ThenAlertStatusForInventoryforaboveThreshold())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 3
    Log["AppendFolder"]("THEN : Operator event log generated for LOT/OBS below user threshold");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
     
     //THEN 4
    Log["AppendFolder"]("THEN : continous to aspirate IM tests.");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_03_CuvetteWasteBinFull", "P");
        return true;   }       
}

function US_GROUP01_GWT_04_CuvetteWasteBinFull()
{
    //USER STORY
    LogHighlight("Scenario : CuvetteWasteBinFull")
    Log.Message("FEATURE: 284206 Cuvette Waste"); 
    Log.Message("US284211: Cuvette Waste Bin is full")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT4";
    var DBlogText="Cuvette waste bin Full"
    var WasteType="Cuvettes";
    var WasteStatus="Full";
    var DBPatientColName="FT284206CW_GWT4";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Cuvette Waste Drawer is Present");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Cuvette waste bin is closed and full");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Cuvette status should display as Full");
  if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
    
    //THEN 2
    Log["AppendFolder"]("THEN : Operator event log generated indicating that the Cuvette waste is full. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
     
     //THEN 3
    Log["AppendFolder"]("THEN : System stops aspiration of New IM tests. ");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  //Todo:Amar--  System continues to process IM Tests
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : Alert should be displayed that aspiration for IM tests has stopped.");
    if(ThenAlertStatusForInventoryforaboveThreshold())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
  //THEN 5
    Log["AppendFolder"]("THEN : An event is logged in the Operator’s event log indicating that sample aspiration is stopped. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();  
    
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_04_CuvetteWasteBinFull", "P");
        return true;   }       
}

function US_GROUP01_GWT_05_CuvetteWasteBinnotpresent()
{
    //USER STORY
    LogHighlight("Scenario : CuvetteWasteBinnotpresent")
    Log.Message("FEATURE: 284206 Cuvette Waste"); 
    Log.Message("US284426: US: Track Cuvettes in reservoir when Cuvette Waste Bin is removed")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT5";
    var DBlogText="Cuvette waste bin Reservoir Full"
    var WasteType="Cuvettes";
    var WasteStatus="Not present, on reserve";
    var DBPatientColName="FT284206CW_GWT5";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Cuvette Waste Drawer is closed and bin is removed");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Cuvette waste bin is not replaced and reservior is not full");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Cuvette status should display as Bin Not Present, On Reserve");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
//    
//    //THEN 2
//    Log["AppendFolder"]("THEN : Sw tracks the tip waste in reservior. ");
//    //Need to automate
//   // if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
//    {
//         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "F");
//        Returnval=false;
//    } 
//    Log["PopLogFolder"]();
//     
//     //THEN 3
    Log["AppendFolder"]("THEN : System continues to aspirate IM tests without interruption  ");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
        
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_05_CuvetteWasteBinnotpresent", "P");
        return true;   }       
}

function US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull()
{
    //USER STORY
    LogHighlight("Scenario : CuvetteWasteBinReservoirFull")
    Log.Message("FEATURE: 284206 Cuvette Waste"); 
    Log.Message("US284431: Cuvette Waste Bin Removed and Reservoir is Full")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT6";
    var DBlogText="Cuvette waste bin Reservoir Full"
    var WasteType="Cuvettes";
    var WasteStatus="On reserve, Full";
    var DBPatientColName="FT284206CW_GWT6";
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "I");
    
    //GIVEN 1
    Log.AppendFolder("GIVEN : Cuvette Waste Drawer is closed and waste bin is removed");
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 1
    Log.AppendFolder("When: Cuvette waste waste bin is not replaced.Tip Reservoir reached max capacity");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()   
                       
    //WHEN 2
    Log.AppendFolder("WHEN : Navigates to supplies screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log.AppendFolder("THEN : Cuvette status should display as Reserve Full");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
        Returnval=false;}
    Log["PopLogFolder"]()      
    
    
    //THEN 2
    Log["AppendFolder"]("THEN : Operator event log generated indicating that the Tip/Cuvette waste is full. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
     
     //THEN 3
    Log["AppendFolder"]("THEN : System stops aspiration of New IM tests. ");
    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    //THEN 4
    Log["AppendFolder"]("THEN : Alert should be displayed that aspiration for IM tests has stopped.");
    if(ThenAlertStatusForInventoryforaboveThreshold())
    {
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();
    
  //THEN 5
    Log["AppendFolder"]("THEN : An event is logged in the Operator’s event log indicating that sample aspiration is stopped. ");
    if(!ThenOperatorEventLogGeneratedBasedOnParameter(DBExcelColName))
    {
         ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "F");
        Returnval=false;
    } 
    Log["PopLogFolder"]();  
    
    if(Returnval==false){
        return false;}
    else
    {
        //Result.xml -Pass
        ReportTestStatusToResultXML("SuppliesOverview_BulkSystemFluids", "US_GROUP01_GWT_06_CuvetteWasteBinReservoirFull", "P");
        return true;   }       
}

function US_GROUP01_GWT_07_SampleCuvetteWasteBinEmptiedAndOperatorSelectsYes()
{
    //USER STORY
    LogHighlight("Scenario : SampleCuvetteWasteBinEmptiedAndOperatorSelectsYesInThePopup")
    Log.Message("FEATURE: 284207 - Sample Tip Waste"); 
    //Log.Message("US284270: Accurately Track Tip Waste when tip waste bin has been returned to the system")   
   Log.Message("US284433: Accurately Track Cuvette waste when cuvette waste bin has been returned to the system ")

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT7";
    var DBlogText="Tip waste below threshold"
    var WasteType="Cuvettes";
    var DBColNameReservoirCount="FT284206CW_GWT_GetReservoirCount";
    var DBColNameWasteCount="FT284206CW_GWT_GetWasteCount";
    var WasteStatus = "OK";
    var boolFlag=true;
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "I");
    
    //Prerequisite: Set and Get the reservoir count and waste count from DB
    Log["AppendFolder"]("Prerequisite: Update Cuvetted reservoir count and waste count in DB");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
         ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("Prerequisite: Fetch Cuvettes reservoir count from DB");
    var ReservoirCount = GetReservoirWasteCountFromDB(DBColNameReservoirCount,WasteType);
    if(!ReservoirCount){
         ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]() 
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : Sample Cuvette Waste Drawer is closed, Cuvette waste bin is removed and then replaced");    
    if(!GivenWasteDrawerClosed(WasteType)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 
    Log["AppendFolder"]("WHEN: operator selects Yes (The Waste bin was emptied) ");
    if(!WhenOperatorSelectsYesInTheConfirmationPopup()){
         ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log["AppendFolder"]("THEN : Operator response is logged in Audit Trail");
    Log["Message"]("Audit Trail log is not yet implemented");
    Log["PopLogFolder"]()      
    
    //THEN 2 and THEN 3
    Log["AppendFolder"]("THEN : SW tracks the Tip/Cuvette waste in the  waste bin");
    Log["PopLogFolder"]();
    Log["AppendFolder"]("THEN : New Tip/Cuvette waste count = number of Tips/Cuvette in the reservoir");
    if(!ThenCompareWasteCountFromDBAndReservoirCountPriorPopup(DBColNameWasteCount,ReservoirCount,WasteType)) {
          ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Returnval=false; } 
    Log["PopLogFolder"]();
     
     //THEN 4
    Log["AppendFolder"]("THEN : The Tip/Cuvette Waste Status is re-evaluated:If below threshold, Waste Status = “OK” (Alert is removed)");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){ 
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else {
        //Result.xml -Pass
         ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "P");
        return true;}       
}

function US_GROUP01_GWT_08_SampleCuvetteWasteBinNotEmptiedAndOperatorSelectsNo()
{
    //USER STORY
    LogHighlight("Scenario : SampleCuvetteWasteteBinEmptiedAndOperatorSelectsNoInThePopup")
    Log.Message("FEATURE: 284207 - Sample Tip Waste"); 
    Log.Message("US284433: Accurately Track Cuvette waste when cuvette waste bin has been returned to the system")    

    //Initialize variables
    var DBExcelColName="FT284206CW_GWT7";
    var DBlogText="Cuvette waste below threshold";
    var WasteType="Cuvettes";
    var DBColNameReservoirCount="FT284206CW_GWT_GetReservoirCount";
    var DBColNameWasteCount="FT284206CW_GWT_GetWasteCount";
    var WasteStatus = "OK";
    var boolFlag=true;
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
     ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "I");
    
    //Prerequisite: Set and Get the reservoir count and waste count from DB
    Log["AppendFolder"]("Prerequisite: Update Cuvettes reservoir count and waste count in DB");
    if(!WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
    
    Log["AppendFolder"]("Prerequisite: Fetch Cuvettes reservoir count from DB");
    var ReservoirCount = GetReservoirWasteCountFromDB(DBColNameReservoirCount,WasteType);
    if(!ReservoirCount){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]() 
    
    Log["AppendFolder"]("Prerequisite: Fetch Cuvettes waste bin count from DB");
    var WasteBinCount = GetWasteBinCountFromDB(DBColNameWasteCount,WasteType);
    if(!WasteBinCount){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : Sample Cuvettes Waste Drawer is closed, Cuvettes waste bin is removed and then replaced");    
    if(!GivenWasteDrawerClosed(WasteType)){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN 
    Log["AppendFolder"]("WHEN: operator selects No (Did not empty the Waste bin) ");
    if(!WhenOperatorSelectsNoInTheConfirmationPopup()){
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()      
    
    //THEN 1
    Log["AppendFolder"]("THEN : Operator response is logged in Audit Trail");
    Log["Message"]("Audit Trail log is not yet implemented");
    Log["PopLogFolder"]()      
    
    //THEN 2 and THEN 3
    Log["AppendFolder"]("THEN : SW tracks the Tip/Cuvette waste in the  waste bin");
    Log["PopLogFolder"]();
    Log["AppendFolder"]("THEN : New cuvette waste count = number of cuvettes in the bin prior to removal from the system + number of cuvettes in the reservoir.");
    if(!ThenCompareWasteAndReservoirCountPriorPopup(DBColNameWasteCount,WasteBinCount,ReservoirCount,WasteType)) {
         ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Returnval=false; } 
    Log["PopLogFolder"]();
     
     //THEN 4
    Log["AppendFolder"]("THEN : The Cuvette Waste Status is re-evaluated:If cuvette waste count is below threshold, Cuvette Waste Status = “OK” (Alert is removed)");
    if(!ThenWasteStatusDisplayed(WasteStatus,WasteType)){ 
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else {
        //Result.xml -Pass
        ReportTestStatusToResultXML("Cuvette_Waste", "US_GROUP01_GWT_07_SampleTipWasteBinEmptiedAndOperatorSelectsYes", "P");
        return true;}       
}

//******************************************************************************
//     Scenarios [FEATURE : 247557 - Supplies Miscellaneous Functionality]              
//******************************************************************************

function US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists()
{
    //Initialize variables
    var DBExcelColName="FT247522_GWT_08";
      
    InitializeMetaDataHYDRA();  

    //USER STORY
    LogHighlight("Scenario : A1C Test is Enabled System Reebooted and verifying Bulk Consumables values")
    Log.Message("FEATURE: 247557 - Supplies Miscellaneous Functionality");
    Log.Message("US: Persistence of System Fluid data Across Reboots");
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "I");
    
   
//   //Precondition
//    Log.AppendFolder("Precondition: Pretreatment fluid is loaded on the system and operator has used it to process A1c test");
//    if(!WHENSystemAspiratesIMReagent(DBPatientColName)){  
//        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
//        Returnval=false;} 
//    Log["PopLogFolder"]();
   
   //GIVEN 1
    Log.AppendFolder("GIVEN : A1c test is Enabled");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
        
   //WHEN 1
    Log.AppendFolder("WHEN :The system is rebooted ");
    if(!InitializeHydra()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
                         
    //WHEN 2
    Log.AppendFolder("WHEN :The system is rebooted and Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()         
   
    //THEN 1 Pret
    Log["AppendFolder"]("THEN : Paramters values should be displayed for Pretreatment");
    if(!ThenVolumeLotExpDateOBSLotIDforPrtTreatfluids(DBExcelColName))
    {
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();     
        return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : Verify alert is displayed or not for Inventory");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"](); 
        return false;   
    } 
    Log["PopLogFolder"](); 
    
     //Result.xml -Pass
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_01_A1CTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "P");
        
   }
  
function US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists()
{
    //Initialize variables
    var DBExcelColName="FT247522_GWT_08";
    //var Returnval=true;
    
    InitializeMetaDataHYDRA();  

    //USER STORY
    LogHighlight("Scenario : Atleast 1 IMT Test (Na,K,Cl)is Enabled and System Reebooted and verifying Bulk Consumables values")
    Log.Message("FEATURE: 247557 - Supplies Miscellaneous Functionality");
    Log.Message("US: Persistence of System Fluid data Across Reboots");
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "I");
    
   
   //Precondition
    Log.AppendFolder("Precondition: Pretreatment fluid is loaded on the system");
    Log["Message"]("IMT fluids are loaded on the system")
    Log["PopLogFolder"]();
   
   //GIVEN 1
    Log.AppendFolder("GIVEN : Atleast 1 IMT Test (Na,K,Cl)is Enabled ");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
        
   // WHEN 1
    Log.AppendFolder("WHEN :The system is rebooted ");
    if(!InitializeHydra()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
                         
    //WHEN 2
    Log.AppendFolder("WHEN :The system is rebooted and Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
           
    //THEN 1 IMT
    Log["AppendFolder"]("THEN : Paramters values should be displayed for IMT");
    if(!ThenVolumeLotExpDateOBSLotIDforIMTfluids(DBExcelColName))
    {
         ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
         Log["PopLogFolder"]();
         return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
     Log["AppendFolder"]("THEN : Verify Alerts displayed as per the current conditions.");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
         ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "F");
         Log["PopLogFolder"]();
         return false;
    } 
    Log["PopLogFolder"](); 
    
        //Result.xml -Pass
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_03_IMTTestisEnabled_SystemRebooted_BulkConsumablesvaluespersists", "P");  
   }   
   
function US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists()
{
    //Initialize variables
    var DBExcelColName="FT247522_GWT_08";
    //var Returnval=true;
    
    InitializeMetaDataHYDRA();  

    //USER STORY
    LogHighlight("Scenario : CH System fluids are loaded on the system and System Reebooted and verifying Bulk Consumables values")
    Log.Message("FEATURE: 247557 - Supplies Miscellaneous Functionality");
    Log.Message("US: Persistence of System Fluid data Across Reboots");
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "I");
     
   //GIVEN 1
    Log.AppendFolder("GIVEN : CH System fluids are loaded on the system");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
        
   //WHEN 1
    Log.AppendFolder("WHEN :The system is rebooted ");
    if(!InitializeHydra()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
                         
    //WHEN 1
    Log.AppendFolder("WHEN :The system is rebooted and Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
           
    //THEN 1 IMT
    Log["AppendFolder"]("THEN : Paramters values should be displayed for CH");
    if(!ThenVolumeLotExpDateOBSLotIDforCHfluids(DBExcelColName))
    {
         ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
         Log["PopLogFolder"]();
         return false;
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : Verify Alerts displayed as per the current conditions.");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
         ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
         Log["PopLogFolder"]();
         return false;   
    } 
    Log["PopLogFolder"]();   
        
    //Result.xml -Pass
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_05_CHSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "P");

   }   
   
function US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists()
{
    //Initialize variables
    var DBExcelColName="FT247522_GWT_08";
        
    InitializeMetaDataHYDRA();  

    //USER STORY
    LogHighlight("Scenario : IM System fluids are loaded on the system and System Reebooted and verifying Bulk Consumables values")
    Log.Message("FEATURE: 247557 - Supplies Miscellaneous Functionality");
    Log.Message("US: Persistence of System Fluid data Across Reboots");
        
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "I");
       
   //GIVEN 1
    Log.AppendFolder("GIVEN : IM System fluids are loaded on the system");
    if(!GivenIMAndCHBulkFluidsLoaded())
    {
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
		    Log["PopLogFolder"]();
        return false;
    } 
    Log["PopLogFolder"]();
        
    //WHEN 1
    Log.AppendFolder("WHEN :The system is rebooted ");
    if(!InitializeHydra()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
                         
    //WHEN 2
    Log.AppendFolder("WHEN :The system is rebooted and Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()   
           
    //THEN 1 IMT
    Log["AppendFolder"]("THEN : Paramters values should be displayed for IM");
    if(!ThenVolumeLotExpDateOBSLotIDforIMfluids(DBExcelColName))
    {
         ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
         Log["PopLogFolder"]();
         return false;          
    } 
    Log["PopLogFolder"]();
    
    //THEN 2
    Log["AppendFolder"]("THEN : Verify Alerts displayed as per the current conditions.");
    if(ThenAlertStatusForInventoryBasedOnParameter())
    {
         ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "F");
         Log["PopLogFolder"]();
         return false;   
    } 
    Log["PopLogFolder"](); 
        //Result.xml -Pass
        ReportTestStatusToResultXML("Supplies_Miscellaneous_Functionality", "US_247556_GWT_06_IMSystemFluidsloaded_SystemRebooted_BulkConsumablesvaluespersists", "P");
        
   }   
   



//******************************************************************************
//         GWT's [FEATURE -316568 : Liquid Waste         
//******************************************************************************
//Bhawya
/*------ US317279 ------*/
function US317279_GWT_01_ProcessTestWhenPrimaryWasteReservoirLevelFullSensorOFF(){

    //USER STORY
    LogHighlight("Scenario : Process Test When Primary Waste Reservoir Level Full SensorOFF")
    Log.Message("FEATURE: 316568 - Liquid waste")
    Log.Message("US317279 : Sufficient Liquid Waste Capacity")
    
    //Initialize Datafile and XMLS
    InitializeMetaDataHYDRA();
    
    //Result.xml -In Progress
    ReportTestStatusToResultXML("Inventory_SuppliesOvw_LiquidWaste", "US317279_GWT_01_ProcessTestWhenPrimaryWasteReservoirLevelFullSensorOFF", "I");

    //GIVEN
    Log.AppendFolder("GIVEN : Operator schedules tests for processing");
    if(!GIVENOperatorSchedulesTest()){
        ReportTestStatusToResultXML("Inventory_SuppliesOvw_LiquidWaste", "US317279_GWT_01_ProcessTestWhenPrimaryWasteReservoirLevelFullSensorOFF", "F");
        Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()


    //WHEN
    Log.AppendFolder("WHEN : Primary or Secondary Waste Reservoir Level Full Sensor is Off (Liquid Waste is < 50% full)");
    if(!WHENPrimaryWasteReservoirLevelFullSensorOFF()){
        ReportTestStatusToResultXML("Inventory_SuppliesOvw_LiquidWaste", "US225839_GWT_01_IAPrimaryCHInventory", "F");
		    Log["PopLogFolder"]();
        return false;
    }
    Log["PopLogFolder"]()


    //THEN
    var scenario ="US317279_GWT_01_LiquidWaste"
    Log.AppendFolder("THEN : The tests are processed by the system");
    if(!ThenVerifyPatientOrder(scenario)){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US225839_GWT_01_IAPrimaryCHInventory", "F");
        Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //THEN
    Log.AppendFolder("THEN : Additional test orders will be scheduled by the system.");
    if(!THENVerifyNewTestsScheduled()){
        ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US225839_GWT_01_IAPrimaryCHInventory", "F");
        Log["PopLogFolder"]()
        return false
    }
    Log["PopLogFolder"]()
    
    //Result.xml -Pass
    ReportTestStatusToResultXML("Inventory_ReagentOvw_DisplayReagentRemaining", "US225839_GWT_01_IAPrimaryCHInventory", "P");

}

//***************************************************************************************************
//         GWT's [USERSTORY: 287524 - Alert once if multiple thresholds are met on the same supply]         
//***************************************************************************************************
function US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMTPretreatment()
{
    //USER STORY
    LogHighlight("Scenario : Acknowledge volume below threshold alert and verify visual indication")
    Log.Message("US287524: Alert once if multiple thresholds are met on the same supply")    

    //Initialize variables
    var Returnval=true;
    AlertTestDataColName="US287524_IMTPretreatment_LotBelowThresAlert";
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
     ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "I");
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : Either of the below supplies are loaded on the system: a. IMT Sensor b. IMT fluids c. Pretrearment is Loaded");    
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //GIVEN 2
    Log["AppendFolder"]("GIVEN : At least one IMT Test or A1c test is enabled");        
    Log["PopLogFolder"]();
    
    //GIVEN 3
    Log["AppendFolder"]("GIVEN : Sample Remaining(for IMT Sensor)or Volume(IMT and Pretreatment)meets or goes below or goes below user configured warning threshold and alert is displayed to user for Volume for a specific supply(Ex: Pretreatment)");    
    if(!GivenVolumeBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN1 
    InitializeHydra();
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN2
    Log["AppendFolder"]("WHEN: User acknowledges the volume alert)");
    if(!WhenUserAcknowledgesAlert()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]() 
    
    //WHEN3    
    Log["AppendFolder"]("WHEN: OBS Expiration for the same specific supply is above threshold");
    Log["PopLogFolder"]() 
    Log["AppendFolder"]("WHEN: Lot Expiration meets or goes below or goes below user defined threshold for the specific supply after some time");
    if(!WhenLotBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()        
    
    //THEN 1
    Log["AppendFolder"]("THEN : Some visual indication should be displayed on the User Interface that the volume threshold has met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForFluidVolume(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    //THEN 2
    Log["AppendFolder"]("THEN : Visual indication should be seen for LOT expiration met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForLot(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()
     
     //THEN 3
    Log["AppendFolder"]("THEN : NO alert should be displayed for Lot Expiration meeting warning threshold for the same specific supply");
    if(!ThenNoAlertDisplayed(AlertTestDataColName)){ 
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        return false;} 
    Log["PopLogFolder"]();
    
        //Result.xml -Pass
    ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "P");
    return true;  
}

function US_287524_GWT_02_VolAlertNotAcknowledgedAndLotOBSBelowThresForIMTPretreatment()
{
    //USER STORY
    LogHighlight("Scenario : Acknowledge volume below threshold alert and verify visual indication")
    Log.Message("US287524: Alert once if multiple thresholds are met on the same supply")    

    //Initialize variables
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
     ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "I");
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : Either of the below supplies are loaded on the system: a. IMT Sensor b. IMT fluids c. Pretrearment is Loaded");    
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //GIVEN 2
    Log["AppendFolder"]("GIVEN : At least one IMT Test or A1c test is enabled");        
    Log["PopLogFolder"]();
    
    //GIVEN 3
    Log["AppendFolder"]("GIVEN : Sample Remaining(for IMT Sensor)or Volume(IMT and Pretreatment)meets or goes below or goes below user configured warning threshold and alert is displayed to user for Volume for a specific supply(Ex: Pretreatment)");    
    if(!GivenVolumeBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN1 
    InitializeHydra();
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN2    
    Log["AppendFolder"]("WHEN: Both Lot and OBS Expiration meets or goes below user defined Warning threshold and user does not acknowledge the earlier alert for volume");
    if(!WhenLotAndOBSBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()        
    
    //THEN 1
    Log["AppendFolder"]("THEN : Alert should be displayed to the operator for the specific supply. In this case, the system doesn't know what the alert is for as all the 3 thresholds have met at the same time.");
    if(!THENVerifyAlertsForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    //THEN 2
    Log["AppendFolder"]("THEN : In addition to the alert, some visual indication should be displayed on the User Interface as all three for Volume, LOT and OBS have met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForLotAndOBS(boolFlag) && !THENVerifyVisualIndicationForFluidVolume(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()
     
        //Result.xml -Pass
    ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "P");
    return true;      
}

function US_287524_GWT_03_AcknowledgeVolAlertAndOBSBelowThresForIMTPretreatment()
{
    //USER STORY
    LogHighlight("Scenario : Acknowledge volume below threshold alert and verify visual indication")
    Log.Message("US287524: Alert once if multiple thresholds are met on the same supply")    

    //Initialize variables
    var Returnval=true;
    AlertTestDataColName="US287524_IMTPretreatment_OBSBelowThresAlert";
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
     ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "I");
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : IM/CH bulk fluids are loaded");    
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //GIVEN 2
    Log["AppendFolder"]("GIVEN : Volume meets or goes below user configured warning threshold and alert is displayed to user for Volume");    
    if(!GivenVolumeBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN1 
    InitializeHydra();
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN2
    Log["AppendFolder"]("WHEN: User acknowledges the volume alert)");
    if(!WhenUserAcknowledgesAlert()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]() 
    
    //WHEN3    
    Log["AppendFolder"]("WHEN: Lot Expiration is above threshold");
    Log["PopLogFolder"]() 
    Log["AppendFolder"]("WHEN: OBS Expiration meets or goes below user defined threshold after some time");
    if(!WhenOBSBelowThresLotAboveThres()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()        
    
    //THEN 1
    Log["AppendFolder"]("THEN : Some visual indication should be displayed on the User Interface that the volume threshold has met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForFluidVolume(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    //THEN 2
    Log["AppendFolder"]("THEN : Visual indication should be seen for OBS expiration met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForOBS(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()
     
     //THEN 3
    Log["AppendFolder"]("THEN : NO alert should be displayed for OBS expiration meeting warning threshold for the specific supply.");
    if(!ThenNoAlertDisplayed(AlertTestDataColName)){ 
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Returnval=false;} 
    Log["PopLogFolder"]();
    
    if(Returnval==false){
        return false;}
    else {
        //Result.xml -Pass
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "P");
        return true;}       
}

function US_287524_GWT_06_VolAlertNotAcknowledgedAndLotOBSBelowThresForIMCHBulkFluids()
{
    //USER STORY
    LogHighlight("Scenario : Acknowledge volume below threshold alert and verify visual indication")
    Log.Message("US287524: Alert once if multiple thresholds are met on the same supply")    

    //Initialize variables
    var Returnval=true;
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
     ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "I");
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : IM/CH Bulk Fluid is loaded");    
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //GIVEN 3
    Log["AppendFolder"]("GIVEN : Volume meets or goes below user configured warning threshold and alert is displayed to user for Volume");    
    if(!GivenVolumeBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN1
    InitializeHydra(); 
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN2    
    Log["AppendFolder"]("WHEN: Both Lot and OBS Expiration meets or goes below user defined Warning threshold and user does not acknowledge the earlier alert for volume");
    if(!WhenLotAndOBSBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()        
    
    //THEN 1
    Log["AppendFolder"]("THEN : Alert should be displayed to the operator for the specific supply. In this case, the system doesn't know what the alert is for as all the 3 thresholds have met at the same time.");
    if(!THENVerifyAlertsForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    //THEN 2
    Log["AppendFolder"]("THEN : In addition to the alert, some visual indication should be displayed on the User Interface as all three for Volume, LOT and OBS have met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForLotAndOBS(boolFlag) && !THENVerifyVisualIndicationForFluidVolume(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()

        //Result.xml -Pass
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "P");
        return true;     
}

function US_287524_GWT_08_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMCHBulkFluids()
{
    //USER STORY
    LogHighlight("Scenario : Acknowledge volume below threshold alert and verify visual indication")
    Log.Message("US287524: Alert once if multiple thresholds are met on the same supply")    

    //Initialize variables
    var Returnval=true;
    AlertTestDataColName="US287524_IMCHBulkFluids_LotBelowThresAlert";
    InitializeMetaDataHYDRA();  
        
    //Result.xml -In Progress
     ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_08_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMCHBulkFluids", "I");
    
    //GIVEN 1
    Log["AppendFolder"]("GIVEN : IM/CH bulk fluids are loaded");    
    if(!GivenIMAndCHBulkFluidsLoaded()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_08_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMCHBulkFluids", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //GIVEN 2
    Log["AppendFolder"]("GIVEN : Volume meets or goes below user configured warning threshold and alert is displayed to user for Volume");    
    if(!GivenVolumeBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_08_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMCHBulkFluids", "F");
		    Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]();
    
    //WHEN1 
    InitializeHydra();
    Log.AppendFolder("WHEN : Operator Navigates to Supplies overview screen");
    if(!WHENOperatorChecksForSupplies()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_08_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMCHBulkFluids", "F");
        Log["PopLogFolder"]();
        return false;}
    Log["PopLogFolder"]()
    
    //WHEN2
    Log["AppendFolder"]("WHEN: User acknowledges the volume alert)");
    if(!WhenUserAcknowledgesAlert()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_08_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMCHBulkFluids", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]() 
    
    //WHEN3    
    Log["AppendFolder"]("WHEN: OBS Expiration for the same specific supply is above threshold");
    Log["PopLogFolder"]() 
    Log["AppendFolder"]("WHEN: Lot Expiration meets or goes below or goes below user defined threshold for the specific supply after some time");
    if(!WhenLotBelowThreshold()){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;}             
    Log["PopLogFolder"]()        
    
    //THEN 1
    Log["AppendFolder"]("THEN : Some visual indication should be displayed on the User Interface that the volume threshold has met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForFluidVolume(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()    
    
    //THEN 2
    Log["AppendFolder"]("THEN : Visual indication should be seen for LOT expiration met.");
    var boolFlag = true;
    if(!THENVerifyVisualIndicationForLot(boolFlag)){
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        Log["PopLogFolder"]();
        return false;} 
    Log["PopLogFolder"]()
     
     //THEN 3
    Log["AppendFolder"]("THEN : NO alert should be displayed for Lot Expiration meeting warning threshold for the same specific supply");
    if(!ThenNoAlertDisplayed(AlertTestDataColName)){ 
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_01_AcknowledgeVolBelowThresAlertAndVerifyVisualIndication", "F");
        return false;} 
    Log["PopLogFolder"]();
    
        //Result.xml -Pass
        ReportTestStatusToResultXML("Supplies Overview", "US_287524_GWT_08_AcknowledgeVolBelowThresAlertAndVerifyVisualIndicationForIMCHBulkFluids", "P");
        return true;      
}

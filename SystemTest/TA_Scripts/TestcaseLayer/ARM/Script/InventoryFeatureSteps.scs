//USEUNIT Authentication
//USEUNIT StepDefinitionHydra
//USEUNIT CommonUtilities
//USEUNIT TCNativeLibraries
//USEUNIT WorkflowNavigator

/*-------
 BHAWYA 
 -------*/
//******************************************************************
//         FEATURE 1 : 225700 - DisplayReagentRemaining
//******************************************************************

var OBSvalueBeforeUnload;

function WHENOperatorNavigatesToReagentOverviewScreen(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //StepDefinition - Navigate to reagent Overview
        res =StepOperatorNavigatesToReagentOverviewScreen();
        if(!res){
            Returnval = false;}
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENDisplayReagentRemaining(){
    try
    {   
        //Initialize Variables
        var Returnval = true;
        var res;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","DisplayReagentRemaining");
        dataCount = arrTestData.length

        //StepDefinition -Iterate for all Reagent types
        for(i =0 ;i<dataCount ; i++){
            dictColumn=arrTestData[i];
            res =StepVerifyDisplayReagentRemaining(dictColumn["Item"]("ReagentName"),dictColumn["Item"]("ReagentType"),dictColumn["Item"]("InventoryUnit"))
            if(!res){
                Returnval =false}
        }     
         
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenOperatorLoadsCHReagent()
{
    try
    { 
        InitializeMetaDataHYDRA();
        //Initialize Variables
        var Returnval = true;
        
        //Read Test data - Reagent name
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP04_GWT_03_CH");
        var dictColumn=arrTestData2[0];
        var RgtType=dictColumn["Item"]("ReagentType")
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode = dictColumn["Item"]("Barcode");
        var Position = dictColumn["Item"]("Position");
        var LotNumber = dictColumn["Item"]("Lot");
        
        //Read data - CH Diagnostics Sequence
        arrTestDataCC = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");
        dictColumnCC=arrTestDataCC[0];
        var MechNameCC = dictColumnCC["Item"]("MechanismName")
        var SeqNameCC = dictColumnCC["Item"]("SeqName")
        
        if(!StepHydraReagentIsLoaded(Assay,LotNumber,Barcode,Position,RgtType,MechNameCC,SeqNameCC))
        {
          Log["Error"]("CC Reagent Loading Failed")
          Returnval = false;
        }  
        
        if(!StepResumeHydraToReady())
        {
          Log["Error"]("Failed to resume Hydra to Ready")
          Returnval = false;
        }   
        
        //return
        return Returnval;
             
    }
    catch(exp)
    {
        Log["Error"]("Exception : "+exp.description) ;
        return false;
    }
}

function WhenCHReagentStatusIsUsable()
{
  try
  {
        //Initialize Variables
        var Returnval = false;
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UsableCHReagent");
        var dictColumnNew=arrTestData[0];
        var ReagentName=dictColumnNew["Item"]("ReagentName");
        var PackStatus=dictColumnNew["Item"]("PackStatus");
        
        var arrTestDataCH = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP04_GWT_03_CH");  
        var dictColumnCH = arrTestDataCH[0];
        var LotCH = dictColumnCH["Item"]("Lot"); 
        
        //Get Pack Status from UI
        var CHPackStatus=StepGetCHReagentPackStatus(ReagentName,LotCH);
        
        var arrPackStatus=PackStatus["split"](";") ;
        for(var i=0;i<arrPackStatus["length"];i++)
        {
            if(arrPackStatus[i]==CHPackStatus)
            {
              Returnval = true;
              break;
            }
        }
        
        if(Returnval==true)
        {
          Log["Checkpoint"](ReagentName+" is a usable Reagent Pack");
        }
        else
        {
          Log["Error"](ReagentName+" is NOT usable Reagent Pack");
        }
        
        //return
        return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  }
}

function WHENSystemAspiratesCHReagent()
{
  try
  {
        //Initialize Variables
        var Returnval = true;
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225700_Group4_GWT03");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
        var SampleStatus = dictColumn["Item"]("SampleStatus")
                
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP04_GWT_03_CH");
        var dictColumn1=arrTestData2[0];
        var Assay = dictColumn1["Item"]("ReagentName")
        var LotNumber = dictColumn1["Item"]("Lot");
        
        //Read Test data - Reagent
        var arrTestDataR = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UsableCHReagent");
        var dictColumnNew=arrTestDataR[0];
        var ReagentName=dictColumnNew["Item"]("ReagentName");
        
        //GetInventoryCountValue
        ReagentCount=StepGetInventoryCountValueAsPerLot(Assay,LotNumber)
        if(ReagentCount==false)
        {
          Log["Error"]("Failed to fetch inventory count value")
          return false;
        }
        
        //Check CH subsystem is in OK status
        if(!StepVerifySubsystemIsOK("CH"))
        {
          Log["Error"]("CH subsystem status in error state")
          return false;
        }
        
        //Create patient order
        if(!StepCreatePatientOrderHydra(SID1,Specimen1,Priority1,Analyzer1,Assay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          return false;
        }
        
        //Load sample
        if(!StepLoadSamples(SID1))
        {
          Log["Error"]("Load Sample Failed")
          return false;
        }
        
        //check if sample aspirated
        if(!StepCheckSampleStatus(SID1,SampleStatus))
        {
          Log["Error"]("Sample Aspiration Failed")
          return false; 
        }
        
        //return
        return ReagentCount;
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  } 
}

function ThenSystemShouldDisplayCHReagentCount(BeforeaAspirationCHReagentCount)
{
  try
  {
        //Initialize Variables
        var TotalWellCount=0;
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UsableCHReagent");
        var dictColumnNew=arrTestData[0];
        var ReagentName=dictColumnNew["Item"]("ReagentName");
        var ReagentType=dictColumnNew["Item"]("ReagentType");
        var InventoryUnit=dictColumnNew["Item"]("InventoryUnit");
        
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP04_GWT_03_CH");
        var dictColumn=arrTestData2[0];
        var RgtType=dictColumn["Item"]("ReagentType")
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode = dictColumn["Item"]("Barcode");
        var Position = dictColumn["Item"]("Position");
        var LotNumber = dictColumn["Item"]("Lot");
        
        //Get Inventory Count Value From Reagent Grid 
        AfterAspirationReagentCount=StepGetInventoryCountValueAsPerLot(Assay,LotNumber);
        if(AfterAspirationReagentCount==false)
        {
          Log["Error"]("Failed to fetch Well count value from ReagentGrid")
          return false;
        }
        
        //Get Well Count Value From Reagent Details 
        WellArray=StepGetWellCountValueFromCHReagentDetailsAsPerLot(Assay,LotNumber);
        if(WellArray==false)
        {
          Log["Error"]("Failed to fetch Well count value from Reagent Details")
          return false;
        }
        
        //summing up the counts in CH well packs
        for(i=0;i<WellArray.length;i++)
        {
          TotalWellCount=TotalWellCount+WellArray[i];
        }
        
        //Verify if the Total Well counts is equal to Inventory count in Grid
        if(TotalWellCount==AfterAspirationReagentCount)
        {
          Log["Message"]("Total Well count from Reagent Details is equal to Inventory count in Grid");
        }
        
        //Verify if Test count is the unit
        if(!StepVerifyHydraReagentInventoryUnit(Assay,LotNumber,InventoryUnit))
        {
          Log["Error"]("Failed to fetch Test Count unit")
          return false;
        }
        
        //Compare if count value decremented
        if(aqConvert["StrToInt"](BeforeaAspirationCHReagentCount)==(aqConvert["StrToInt"](AfterAspirationReagentCount)+1))
        {
          Log["Message"]("Inventory count decremented by 1 after aspiration; working as expected");
          return true;
        }
        else
        { 
          Log["Error"]("Inventory count NOT decremented after aspiration");
          return false;
        }
        
        
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  }
}

function GivenIAPrimaryPackIsUsedBy1Test()
{
  try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Read Test data - Reagent name
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_04_IM");  
        var dictColumnIA = arrTestDataIA[0];
        var AssayIA = dictColumnIA["Item"]("ReagentName");
        var BarcodeIA = dictColumnIA["Item"]("Barcode"); 
        var PositionIA = dictColumnIA["Item"]("Position"); 
        var ReagentTypeIA = dictColumnIA["Item"]("ReagentType");
        var LotIA = dictColumnIA["Item"]("Lot"); 
        
        //Read data - IM Diagnostics Sequence
        arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnIM=arrTestDataIM[0];
        var MechNameIM = dictColumnIM["Item"]("MechanismName")
        var SeqNameIM = dictColumnIM["Item"]("SeqName")
        var TypeOfReagent=dictColumnIM["Item"]("ReagentType")
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225700_Group3_GWT04a");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
        var SampleStatus = dictColumn["Item"]("SampleStatus")
        
        //Read Test data - Reagent
        var arrTestDataR = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UsableIMReagent");
        var dictColumnNew=arrTestDataR[0];
        var ReagentName=dictColumnNew["Item"]("ReagentName");
        
        //Check if IM reagent loaded
        if(!StepHydraReagentIsLoaded(AssayIA,LotIA,BarcodeIA,PositionIA,ReagentTypeIA,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Reagent Loading Failed")
          return false;
        }  
        
        if(!StepResumeHydraToReady())
        {
          Log["Error"]("Failed to resume Hydra to Ready")
          return false;
        }   
        
        //Check IM subsystem is in OK status
        if(!StepVerifySubsystemIsOK("IM"))
        {
          Log["Error"]("IM subsystem status in error state")
          return false;
        }
        
        //Create patient order
        if(!StepCreatePatientOrderHydra(SID1,Specimen1,Priority1,Analyzer1,Assay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          return false;
        }
        
        //Load sample
        if(!StepLoadSamples(SID1))
        {
          Log["Error"]("Load Sample Failed")
          return false;
        }
        
        //check if sample aspirated
        if(!StepCheckSampleStatus(SID1,SampleStatus))
        {
          Log["Error"]("Sample Aspiration Failed")
          return false; 
        }
        
        //GetInventoryCountValue
        ReagentCount=StepGetInventoryCountValueAsPerLot(AssayIA,LotIA);
        if(ReagentCount==false)
        {
          Log["Error"]("Failed to fetch inventory count value")
          return false;
        }
        
        //return
        return ReagentCount;
             
    }
    catch(exp)
    {
        Log["Error"]("Exception : "+exp.description) ;
        return false;
    }
}

function WhenIMReagentStatusIsUsable(ReagentColName)
{
  try
  {
        //Initialize Variables
        var Returnval = false;
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UsableIMReagent");
        var dictColumnNew=arrTestData[0];
        var ReagentName=dictColumnNew["Item"]("ReagentName");
        var PackStatus=dictColumnNew["Item"]("PackStatus");
        
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents",ReagentColName);  
        var dictColumnIA = arrTestDataIA[0];
        var LotIA = dictColumnIA["Item"]("Lot");
        
        //Get Pack Status from UI
        var IMPackStatus=StepGetIMReagentPackStatus(ReagentName,LotIA);
        
        var arrPackStatus=PackStatus["split"](";") ;
        for(var i=0;i<arrPackStatus["length"];i++)
        {
            if(arrPackStatus[i]==IMPackStatus)
            {
              Returnval = true;
              break;
            }
        }
        
        if(Returnval==true)
        {
          Log["Checkpoint"](ReagentName+" is a usable Reagent Pack");
        }
        else
        {
          Log["Error"](ReagentName+" is NOT usable Reagent Pack");
        }
        
        //return
        return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  }
}

function WHENSystemAspiratesIMReagent(PatientOrderColName)
{
  try
  {
        //Initialize Variables
        var Returnval = true;
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder",PatientOrderColName);
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
        var SampleStatus = dictColumn["Item"]("SampleStatus")
        
        
        //Check IM subsystem is in OK status
        if(!StepVerifySubsystemIsOK("IM"))
        {
          Log["Error"]("IM subsystem status in error state")
          return false;
        }
        
        //Create patient order
        if(!StepCreatePatientOrderHydra(SID1,Specimen1,Priority1,Analyzer1,Assay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          return false;
        }
        
        //Load sample
        if(!StepLoadSamples(SID1))
        {
          Log["Error"]("Load Sample Failed")
          return false;
        }
        
        //check if sample aspirated
        if(!StepCheckSampleStatus(SID1,SampleStatus))
        {
          Log["Error"]("Sample Aspiration Failed")
          return false; 
        }
        
        //return
        Log["Checkpoint"]("System successfully aspirated IM Reagent");
        return true;
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  } 
}

function ThenSystemShouldDisplayIMReagentCount(BeforeaAspirationIMReagentCount,ReagentColName)
{
  try
  {
        //Initialize Variables
        var TotalWellCount=0;
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UsuableIMReagent");
        var dictColumnNew=arrTestData[0];
        var ReagentName=dictColumnNew["Item"]("ReagentName");
        var ReagentType=dictColumnNew["Item"]("ReagentType");
        var InventoryUnit=dictColumnNew["Item"]("InventoryUnit");
        
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents",ReagentColName);
        var dictColumn=arrTestData2[0];
        var RgtType=dictColumn["Item"]("ReagentType")
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode = dictColumn["Item"]("Barcode");
        var Position = dictColumn["Item"]("Position");
        var LotNumber = dictColumn["Item"]("Lot");
        
        //Get Inventory Count Value From Reagent Grid 
        AfterAspirationReagentCount=StepGetInventoryCountValueAsPerLot(Assay,LotNumber);
        if(AfterAspirationReagentCount==false)
        {
          Log["Error"]("Failed to fetch Inventory count from Reagent Grid")
          return false;
        }
        
        //Get Count Value From Reagent Details 
        Count=StepGetCountValueFromReagentDetailsAsPerLot(Assay,LotNumber);
        if(Count==false)
        {
          Log["Error"]("Failed to fetch Inventory count value from Reagent Details")
          return false;
        }    
        
        //Verify if the Count from Reagent Details is equal to Inventory count in Grid
        if(Count==AfterAspirationReagentCount)
        {
          Log["Checkpoint"]("Count from Reagent Details is equal to Inventory count in Reagents Grid");
        }
        
        //Verify if Test count is the unit
        if(!StepVerifyHydraReagentInventoryUnit(Assay,LotNumber,InventoryUnit))
        {
          Log["Error"]("Failed to fetch Test Count unit")
          return false;
        }
        
        //Compare if count value decremented
        if(aqConvert["StrToInt"](BeforeaAspirationIMReagentCount)==(aqConvert["StrToInt"](AfterAspirationReagentCount)+1))
        {
          Log["Checkpoint"]("Inventory count decremented by 1 after aspiration; working as expected");
          return true;
        }
        else
        { 
          Log["Error"]("Inventory count NOT decremented after aspiration");
          return false;
        }
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  } 
}

function GivenIAPrimaryPackIsUsedByMoreThan1Test()
{
  try
  {
        //Initialize Variables
        var Returnval = true;
        
         //Read Test data - Reagent name
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_05_IM");  
        var dictColumnIA = arrTestDataIA[0];
        var AssayIA = dictColumnIA["Item"]("ReagentName");
        var BarcodeIA = dictColumnIA["Item"]("Barcode"); 
        var PositionIA = dictColumnIA["Item"]("Position"); 
        var ReagentTypeIA = dictColumnIA["Item"]("ReagentType");
        var LotIA = dictColumnIA["Item"]("Lot"); 
        
        //Read data - IM Diagnostics Sequence
        arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnIM=arrTestDataIM[0];
        var MechNameIM = dictColumnIM["Item"]("MechanismName");
        var SeqNameIM = dictColumnIM["Item"]("SeqName");
        var TypeOfReagent=dictColumnIM["Item"]("ReagentType");
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225700_Group3_GWT05a");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay");
        var arrAssay=Assay1["split"](";");
        var Specimen1 = dictColumn["Item"]("Specimen");
        var arrSpecimen=Specimen1["split"](";");
        var Priority1 = dictColumn["Item"]("Priority");
        var arrPriority=Priority1["split"](";");
        var Analyzer1 = dictColumn["Item"]("Analyzer");
        var arrAnalyzer=Analyzer1["split"](";");
        var SID1 = dictColumn["Item"]("SampleId");
        var arrSID=SID1["split"](";");
        var SampleStatus = dictColumn["Item"]("SampleStatus");
        var arrSampleStatus=SampleStatus["split"](";");
        
        //Read Test data - Reagent
        var arrTestDataR = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UsableIMReagent");
        var dictColumnNew=arrTestDataR[0];
        var ReagentName=dictColumnNew["Item"]("ReagentName");
        
        //Check if IM reagent loaded
        if(!StepHydraReagentIsLoaded(AssayIA,LotIA,BarcodeIA,PositionIA,ReagentTypeIA,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Reagent Loading Failed")
          return false;
        }  
        
//        if(!StepResumeHydraToReady())
//        {
//          Log["Error"]("Failed to resume Hydra to Ready")
//          return false;
//        }   
        
        //Check IM subsystem is in OK status
        if(!StepVerifySubsystemIsOK("IM"))
        {
          Log["Error"]("IM subsystem status in error state")
          return false;
        }
        
        //Create patient order
        for(i=0;i<2;i++)
        {
          if(!StepCreatePatientOrderHydra(arrSID[i],arrSpecimen[i],arrPriority[i],arrAnalyzer[i],arrAssay[i])) 
          {
            Log["Error"]("Create Patient order Failed")
            return false;
          }
        }
        
        //Load sample
        for(i=0;i<2;i++)
        {
          if(!StepLoadSamples(arrSID[i]))
          {
            Log["Error"]("Load Sample Failed")
            return false;
          }
        }
        
        //check if sample aspirated
        for(i=0;i<2;i++)
        {
          if(!StepCheckSampleStatus(arrSID[i],arrSampleStatus[i]))
          {
            Log["Error"]("Sample Aspiration Failed")
            return false; 
          }
        }
        
        //GetInventoryCountValue
        ReagentCount=StepGetInventoryCountValueAsPerLot(AssayIA,LotIA);
        if(ReagentCount==false)
        {
          Log["Error"]("Failed to fetch OBS value")
          return false;
        }

        //return
        return ReagentCount;
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  } 
}

function GivenLoadIAPrimaryAndPrimaryWashReagent()
{
  try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Read Test data - Reagent name
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumn=arrTestData[0];
        var AssayPrimary = dictColumn["Item"]("ReagentName")
        
        var arrTestData1 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadPW3Reagent");
        var dictColumn1=arrTestData1[0];
        var AssayPrimaryWash= dictColumn1["Item"]("ReagentName")
        
        //Read data - IM Diagnostics Sequence
        arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnIM=arrTestDataIM[0];
        var MechNameIM = dictColumnIM["Item"]("MechanismName")
        var SeqNameIM = dictColumnIM["Item"]("SeqName")
        var TypeOfReagent=dictColumnIM["Item"]("ReagentType")
        
        //Check if IM primary reagent loaded
        if(!StepReagentIsLoaded(AssayPrimary,TypeOfReagent,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Primary Reagent Loading Failed")
          return false;
        }  

        //Check if IM Primary wash reagent loaded
        if(!StepReagentIsLoaded(AssayPrimaryWash,TypeOfReagent,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Primary wash Reagent Loading Failed")
          return false;
        } 
        
        if(!StepResumeHydraToReady())
        {
          Log["Error"]("Failed to resume Hydra to Ready")
          return false;
        }
           
        //GetInventoryCountValue for IA primary
        var arrReagent = new Array();
        ReagentCountPrimary=StepGetInventoryCountValueFromReagentGrid(AssayPrimary);
        if(ReagentCountPrimary==false)
        {
          Log["Error"]("Failed to fetch reagent count value for IA primary")
        }else
          arrReagent[0]= ReagentCountPrimary;
               
        //GetInventoryCountValue for Primary wash
        ReagentCountPrimaryWash=StepGetInventoryCountValueFromReagentGrid(AssayPrimaryWash);
        if(ReagentCountPrimaryWash==false)
        {
          Log["Error"]("Failed to fetch reagent count value for IA Primary wash")
        }else
          arrReagent[1]= ReagentCountPrimaryWash; 
        
        //return
        return arrReagent;
             
    }
    catch(exp)
    {
        Log["Error"]("Exception : "+exp.description) ;
        return false;
    }
}

function GivenLoadIAPrimaryIAAncDiluentAncWashReagent()
{
  try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Read Test data - Reagent name
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumn=arrTestData[0];
        var AssayPrimary = dictColumn["Item"]("ReagentName")
        
        var arrTestData1 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAPW3Reagent");
        var dictColumn1=arrTestData1[0];
        var AssayAncWash = dictColumn1["Item"]("ReagentName")
        
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadMDil2Reagent");
        var dictColumn2=arrTestData2[0];
        var AssayAncillary = dictColumn2["Item"]("ReagentName")
        
        //Read data - IM Diagnostics Sequence
        arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnIM=arrTestDataIM[0];
        var MechNameIM = dictColumnIM["Item"]("MechanismName")
        var SeqNameIM = dictColumnIM["Item"]("SeqName")
        var TypeOfReagentIM=dictColumnIM["Item"]("ReagentType")
        
        arrTestDataSeqIAAnc = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq3");
        dictColumnSeqIAAnc=arrTestDataSeqIAAnc[0];
        var MechNameSeqIAAnc = dictColumnSeqIAAnc["Item"]("MechanismName")
        var SeqNameIAAnc = dictColumnSeqIAAnc["Item"]("SeqName")
        var TypeOfReagentIAAnc=dictColumnIM["Item"]("ReagentType")
        
        //Check if IM primary reagent loaded
        if(!StepReagentIsLoaded(AssayPrimary,TypeOfReagentIM,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Primary Reagent Loading Failed")
          return false;
        }  
        
        //Check if IM ancillary reagent loaded
        if(!StepReagentIsLoaded(AssayAncillary,TypeOfReagentIAAnc,MechNameSeqIAAnc,SeqNameIAAnc))
        {
          Log["Error"]("IM Ancillary Reagent Loading Failed")
          return false;
        } 
        
        //Check if IM ancillary wash reagent loaded
        if(!StepReagentIsLoaded(AssayAncWash,TypeOfReagentIAAnc,MechNameSeqIAAnc,SeqNameIAAnc))
        {
          Log["Error"]("IM Ancillary Reagent Loading Failed")
          return false;
        } 
        
        if(!StepResumeHydraToReady())
        {
          Log["Error"]("Failed to resume Hydra to Ready")
          return false;
        }
           
        //GetInventoryCountValue for IA primary
        var arrReagent = new Array();
        ReagentCountPrimary=StepGetInventoryCountValueFromReagentGrid(AssayPrimary);
        if(ReagentCountPrimary==false)
        {
          Log["Error"]("Failed to fetch reagent count value for IA primary")
        }else
          arrReagent[0]= ReagentCountPrimary;
               
        //GetInventoryCountValue for IA ancillary
        ReagentCountAncillary=StepGetInventoryCountValueFromReagentGrid(AssayAncillary);
        if(ReagentCountAncillary==false)
        {
          Log["Error"]("Failed to fetch reagent count value for IA ancillary")
        }else
          arrReagent[1]= ReagentCountAncillary; 
          
        //GetInventoryCountValue for IA ancillary wash
        ReagentCountAncWash=StepGetInventoryCountValueFromReagentGrid(AssayAncWash);
        if(ReagentCountAncWash==false)
        {
          Log["Error"]("Failed to fetch reagent count value for IA ancillary wash")
        }else
          arrReagent[2]= ReagentCountAncWash;
        
        //return
        return arrReagent;
             
    }
    catch(exp)
    {
        Log["Error"]("Exception : "+exp.description) ;
        return false;
    }
}

function GivenLoadIAAncAndAncWashReagent()
{
  try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Read Test data - Reagent name
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadMDil2Reagent");
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        
        var arrTestData1 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAPWReagent");
        var dictColumn1=arrTestData1[0];
        var Assay1 = dictColumn1["Item"]("ReagentName")
        
        //Read data - IM Diagnostics Sequence
        arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnIM=arrTestDataIM[0];
        var MechNameIM = dictColumnIM["Item"]("MechanismName")
        var SeqNameIM = dictColumnIM["Item"]("SeqName")
        var TypeOfReagent=dictColumnIM["Item"]("ReagentType")
        
        //Check if IM primary reagent loaded
        if(!StepReagentIsLoaded(Assay,TypeOfReagent,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Primary Reagent Loading Failed")
          return false;
        }  
        
        //Check if IM ancillary reagent loaded
        if(!StepReagentIsLoaded(Assay1,TypeOfReagent,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Ancillary Reagent Loading Failed")
          return false;
        } 
        
        if(!StepResumeHydraToReady())
        {
          Log["Error"]("Failed to resume Hydra to Ready")
          return false;
        }
           
        //GetInventoryCountValue
        ReagentCount=StepGetInventoryCountValueFromReagentGrid(Assay1);
        if(ReagentCount==false)
        {
          Log["Error"]("Failed to fetch reagent count value")
          return false;
        }  
        //return
        return ReagentCount;
             
    }
    catch(exp)
    {
        Log["Error"]("Exception : "+exp.description) ;
        return false;
    }
}

function GivenIMAndCHReagentLoaded()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        // Load AFP- IA reagent
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumnIA=arrTestDataIA[0];
        var TypeOfReagentIA=dictColumnIA["Item"]("ReagentType")
        var AssayIA = dictColumnIA["Item"]("ReagentName")
        // Load Alb- CC reagent
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAlbReagent");
        var dictColumnCC=arrTestDataCC[0];
        var TypeOfReagentCC=dictColumnCC["Item"]("ReagentType")
        var AssayCC = dictColumnCC["Item"]("ReagentName")
        
        //Read data - CH Diagnostics Sequence
        arrTestDataSeqCC = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");
        dictColumnSeqCC=arrTestDataSeqCC[0];
        var MechNameSeqCC = dictColumnSeqCC["Item"]("MechanismName")
        var SeqNameSeqCC = dictColumnSeqCC["Item"]("SeqName")
        //Read data - IA Primary Diagnostics Sequence
        arrTestDataSeqIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnSeqIA=arrTestDataSeqIA[0];
        var MechNameSeqIA = dictColumnSeqIA["Item"]("MechanismName")
        var SeqNameSeqIA = dictColumnSeqIA["Item"]("SeqName")
        
        //Load IA Reagent 
        if(!StepReagentIsLoaded(AssayIA,TypeOfReagentIA,MechNameSeqIA,SeqNameSeqIA))
        {
          Log["Error"]("IA primary Reagent Loading Failed")
          Returnval = false;
        }        
 
        //Load CC Reagent 
        if(!StepReagentIsLoaded(AssayCC,TypeOfReagentCC,MechNameSeqCC,SeqNameSeqCC))
        {
          Log["Error"]("CC Reagent Loading Failed")
          Returnval = false;
        }
        
        if(!StepResumeHydraToReady())
            Returnval = false; 
        //return
        return Returnval
             
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenReagentDetailsForStatusAndFlag(IAStatusAndFlag)
{
  try{
  //Initialize Variables
  var Returnval = true;
        
  //Initialize XMLs
  InitializeMetaDataHYDRA();
        
  //Read Test data
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra",IAStatusAndFlag);
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("ReagentName")
  var LotNo = dictColumn["Item"]("LotNo")
  
  var ReagentDisableReagentLotErrorInfo = dictColumn["Item"]("ReagentDisableLotErrorInfo")
  var arrDisableReagentLotErrorInfo = ReagentDisableReagentLotErrorInfo["split"](";")
  var Barcode = arrDisableReagentLotErrorInfo[0]// last 6 digits of barcode
  var SequenceNo = aqString["SubString"](Barcode,aqString["GetLength"](Barcode)-6,6)
  
  if(!StepVerifyReagentPackErrorIconMessage(Assay,"HYDRA",arrDisableReagentLotErrorInfo[1],SequenceNo,LotNo))
  {
    Log["Error"]("Empty depleted reagent flag is not shown as expected")
    return false;
  }
  
  //-- TO DO- Status "Error" and flag 'Pack inactive' --- Not implemented
  //-- TO DO- Status "Error" and flag 'No master curve' --- Not implemented
  //-- TO DO- Status "Error" and flag 'Missing test definition --- Not implemented
  //-- TO DO- Status "Error" and flag 'Use for inventory TDef missing' --- Not implemented
  //-- TO DO- Status "Error" and flag 'Invalid Barcode/Bad read' when pack unidentified  --- Not implemented
	//-- TO DO- add method to verify pack status for these errors - verify status in reagent details grid
     }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    } 
}

function WhenReagentIsUnusableRecoverable(){
 try
    { 
        //Initialize Variables
        var Returnval = true;
        var res;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
         //Read Test data
        // Load AFP- IA reagent
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumnIA=arrTestDataIA[0];
        var AssayIA = dictColumnIA["Item"]("ReagentName")
        // Load Alb- CC reagent
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAlbReagent");
        var dictColumnCC=arrTestDataCC[0];
        var AssayCC = dictColumnCC["Item"]("ReagentName")
           
        //StepDefinition - Navigate to reagent Overview
        if(!StepOperatorNavigatesToReagentOverviewScreen()){
            Returnval = false;}
            
        if(!StepDisableReagentLotForUnusableRecoverable(AssayIA)){
            Returnval = false;}
            
        if(!StepDisableReagentLotForUnusableRecoverable(AssayCC)){
            Returnval = false;}
            
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenOperatorLoadsCHAndIAPrimaryReagentPack()
{
  try
  {
        InitializeMetaDataHYDRA();
        //Initialize Variables
        var ReturnvalIM = true;
        var ReturnvalCH = true;
        
        //Read Test data - IM Reagent name
        var arrTestDataIM = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_01_IM");
        var dictColumnIM = arrTestDataIM[0];
        var AssayIM = dictColumnIM["Item"]("ReagentName");
        var BarcodeIM = dictColumnIM["Item"]("Barcode");
        var PositionIM = dictColumnIM["Item"]("Position");
        var LotNumberIM = dictColumnIM["Item"]("Lot");
        
        //Read Test data - CH Reagent name
        var arrTestDataCH = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_01_CH");
        var dictColumnCH = arrTestDataCH[0];
        var AssayCH = dictColumnCH["Item"]("ReagentName");
        var BarcodeCH = dictColumnCH["Item"]("Barcode");
        var PositionCH = dictColumnCH["Item"]("Position");
        var LotNumberCH = dictColumnCH["Item"]("Lot");
        
        //Read data - IM Diagnostics Sequence
        arrTestDataDiag = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnDiag=arrTestDataDiag[0];
        var MechNameIM = dictColumnDiag["Item"]("MechanismName");
        var SeqNameIM = dictColumnDiag["Item"]("SeqName");
        var TypeOfReagentIM=dictColumnDiag["Item"]("ReagentType");
        
        //Read data - CH Diagnostics Sequence
        arrTestDataCHSeq = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");
        dictColumnCHSeq=arrTestDataCHSeq[0];
        var MechNameCH = dictColumnCHSeq["Item"]("MechanismName")
        var SeqNameCH = dictColumnCHSeq["Item"]("SeqName")
        var TypeOfReagentCH=dictColumnCHSeq["Item"]("ReagentType")
        
        //Load IM reagent
        if(!StepHydraReagentIsLoaded(AssayIM,LotNumberIM,BarcodeIM,PositionIM,TypeOfReagentIM,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Reagent Loading Failed")
          ReturnvalIM = false;
        } 
        
        //Load CH reagent
        if(!StepHydraReagentIsLoaded(AssayCH,LotNumberCH,BarcodeCH,PositionCH,TypeOfReagentCH,MechNameCH,SeqNameCH))
        {
          Log["Error"]("CH Reagent Loading Failed")
          ReturnvalCH = false;
        } 
        
        //return
        if(ReturnvalIM == true && ReturnvalCH == true)
        {
            Log["Checkpoint"]("CH and IM pack status displayed as expected");
            return true;
        }
        else if(ReturnvalIM == false && ReturnvalCH == false)
        {
            Log["Error"]("Failed to get expected outcome")
            return false;
        }
        else
        {
            Log["Error"]("Partially working")
            return true;
        } 
  }
  catch(exp)
  {
      Log["Error"]("Exception : "+exp.description) ;
      return false;
  }
}

function WhenCHAndIMReagentStatusIsUnusable()
{
  try
  {
        InitializeMetaDataHYDRA();
        //Initialize Variables
        var ReturnvalIM = false;
        var ReturnvalCH = false;
        
        //Read Test data - CH Reagent
        var arrTestDataCH = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableAlbReagent");
        var dictColumnCH=arrTestDataCH[0];
        var ReagentNameCH=dictColumnCH["Item"]("ReagentName");
        var PackStatusCH=dictColumnCH["Item"]("PackStatus");
        
        //Read Test data - IM Reagent
        var arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableAFPReagent");
        var dictColumnIM = arrTestDataIM[0];
        var ReagentNameIM = dictColumnIM["Item"]("ReagentName");
        var PackStatusIM = dictColumnIM["Item"]("PackStatus");
        
        //Read Test Data - IM barcode details
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_01_IM");  
        var dictColumnIA = arrTestDataIA[0];
        var AssayIA = dictColumnIA["Item"]("ReagentName");
        var BarcodeIA = dictColumnIA["Item"]("Barcode"); 
        var ReagentTypeIA = dictColumnIA["Item"]("ReagentType");
        var LotIA = dictColumnIA["Item"]("Lot");  
        
        //Read Test Data - CH barcode details
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_01_CH");  
        var dictColumnCC = arrTestDataCC[0];
        var AssayCC = dictColumnCC["Item"]("ReagentName");
        var BarcodeCC = dictColumnCC["Item"]("Barcode"); 
        var ReagentTypeCC = dictColumnCC["Item"]("ReagentType");
        var LotCC = dictColumnCC["Item"]("Lot");   
        
        //Read Test Data - DB query
        arrTestData1 = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","PackStatusAsEmpty");
        dictColumn1=arrTestData1[0];
        strQuery1 = dictColumn1["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        //IM query
        QueryModified1 = aqString["Replace"](strQuery1, "$Barcode", "'"+BarcodeIA+"'", false);
        
        //CH query
        QueryModified2 = aqString["Replace"](strQuery1, "$Barcode", "'"+BarcodeCC+"'", false);
    
        //StepDefinition - Update IM reagent empty in DB
        if(!StepUpdateDB(QueryModified1,strConString))
            ReturnvalIM = false; 
        else
        {
            Log["Checkpoint"](AssayIA+" reagent status is empty - updated successfully in DB");
            ReturnvalIM = true; 
        }
        
        //StepDefinition - Update CH reagent empty in DB
        if(!StepUpdateDB(QueryModified2,strConString))
            ReturnvalCH = false; 
        else
        {
            Log["Checkpoint"](AssayCC+" reagent status is empty - updated successfully in DB");
            ReturnvalIM = true; 
        }
        
        //CH and IM DB update failed
        if(ReturnvalIM == false && ReturnvalCH == false)
            return false;
        
        //Restarting Hydra to reflectDB changes
        if(!InitializeHydra())
          return false;
        
         ReturnvalIM = false;
         ReturnvalCH = false; 
          
        //verify if CH available
        if(StepVerifyHydraReagentIsLoadedAndEnabled(ReagentNameCH,LotCC))
        {
            //Get CH Pack Status from UI
            var CHPackStatus=StepGetCHReagentPackStatus(ReagentNameCH,LotCC);
        
            //Compare if CH Pack Status on UI is unusable
            var arrPackStatusCH=PackStatusCH["split"](";") ;
            for(var i=0;i<arrPackStatusCH["length"];i++)
            {
                if(arrPackStatusCH[i]==CHPackStatus)
                {
                  ReturnvalCH = true;
                  break;
                }
            }
        
            //Log message - CH reagent
            if(ReturnvalCH==true)
            {
              Log["Checkpoint"](ReagentNameCH+" is an unusable CH Reagent Pack");
            }
            else
            {
              Log["Error"](ReagentNameCH+" is NOT unusable CH Reagent Pack");
            }
        }
        else
        {
          ReturnvalCH = false;
        }
        
        //Step uncheck selected reagent
        if(!StepUncheckAllSelectedAssayFromReagentGrid())
        {
            Log["Error"]("Failed to uncheck IM reagent from Reagent Grid")
            return false;
        }
        
        //verify if IM available
        if(StepVerifyHydraReagentIsLoadedAndEnabled(ReagentNameIM,LotIA))
        {
            //Get IM Pack Status from UI
            var IMPackStatus=StepGetIMReagentPackStatus(ReagentNameIM,LotIA);
        
            //Compare if IM Pack Status on UI is unusable
            var arrPackStatusIM=PackStatusIM["split"](";") ;
            for(var i=0;i<arrPackStatusIM["length"];i++)
            {
                if(arrPackStatusIM[i]==IMPackStatus)
                {
                  ReturnvalIM = true;
                  break;
                }
            }
        
            //Log message - IM reagent
            if(ReturnvalIM==true)
            {
              Log["Checkpoint"](ReagentNameIM+" is an unusable IM Reagent Pack");
            }
            else
            {
              Log["Error"](ReagentNameIM+" is NOT unusable IM Reagent Pack");
            }
        }
        else
        {
          ReturnvalIM = false;
        }
        
        //Step uncheck selected reagent
        if(!StepUncheckAllSelectedAssayFromReagentGrid())
        {
            Log["Error"]("Failed to uncheck IM reagent from Reagent Grid")
            return false;
        }
        
        //return
        if(ReturnvalIM == true && ReturnvalCH == true)
        {
            Log["Checkpoint"]("CH and IM pack status displayed as expected");
            return true;
        }
        else if(ReturnvalIM == false && ReturnvalCH == false)
        {
            Log["Error"]("CH and IM pack status NOT displayed as expected");
            return false;
        }
        else
        {
           if(ReturnvalIM == true){
            Log["Checkpoint"]("IM pack status displayed as expected");
            Log["Error"]("CH pack status NOT displayed as expected - Partially working");}
            
            if(ReturnvalCH == true){
            Log["Checkpoint"]("CH pack status displayed as expected, but IM pack status NOT displayed as expected");           
            Log["Error"]("IM pack status NOT displayed as expected - Partially working");}
            return true;
        }
  }
  catch(exp)
  {
      Log["Error"]("Exception : "+exp.description) ;
      return false;
  }
}

function ThenSystemShouldDisplayCHAndIMReagentCount()
{
    try
  {     
        //Initialize variables
        var ReturnvalIM = false;
        var ReturnvalCH = false;
        var TotalWellCount = 0;
        
        //Read Test data - IM
        var arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableAFPReagent");
        var dictColumnIM = arrTestDataIM[0];
        var ReagentNameIM = dictColumnIM["Item"]("ReagentName");
        var ReagentTypeIM = dictColumnIM["Item"]("ReagentType");
        var InventoryUnitIM = dictColumnIM["Item"]("InventoryUnit");
        
        //Read Test data - CH
        var arrTestDataCH = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableAlbReagent");
        var dictColumnCH = arrTestDataCH[0];
        var ReagentNameCH = dictColumnCH["Item"]("ReagentName");
        var ReagentTypeCH = dictColumnCH["Item"]("ReagentType");
        var InventoryUnitCH = dictColumnCH["Item"]("InventoryUnit");
        
        //Read Test data - IM Reagent name
        var arrTestDataIM = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_01_IM");
        var dictColumnIM = arrTestDataIM[0];
        var AssayIM = dictColumnIM["Item"]("ReagentName");
        var LotNumberIM = dictColumnIM["Item"]("Lot");
        
        //Read Test data - CH Reagent name
        var arrTestDataCH = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_01_CH");
        var dictColumnCH = arrTestDataCH[0];
        var AssayCH = dictColumnCH["Item"]("ReagentName");
        var LotNumberCH = dictColumnCH["Item"]("Lot");
        
        //verify if IM available
        if(StepVerifyHydraReagentIsLoadedAndEnabled(AssayIM,LotNumberIM))
        {
            //Get IM Inventory Count Value From Reagent Grid 
            IMReagentCount=StepGetInventoryCountValueAsPerLot(AssayIM,LotNumberIM);
        
            //Get IM Count Value From Reagent Details 
            IMCount=StepGetCountValueFromReagentDetailsAsPerLot(AssayIM,LotNumberIM);  
        
            //Verify for IM if the Total Well counts is equal to Inventory count in Grid
            if(IMCount == IMReagentCount)
            {
                Log["Checkpoint"]("IM Count from Reagent Details is equal to IM Inventory count in Grid");
                ReturnvalIM = true;
            }
            else 
            {
                Log["Error"]("IM Count from Reagent Details is NOT equal to IM Inventory count in Grid");
                ReturnvalIM = false;
            }
        
            //Verify for IM if Test count is the unit
            if(!StepVerifyHydraReagentInventoryUnit(ReagentNameIM,LotNumberIM,InventoryUnitIM))
            {
                Log["Error"]("Failed to fetch IM Test Count unit")
                ReturnvalIM = false;
            }
        }
        else
        {
          ReturnvalIM = false;
        }
        
        //Step uncheck selected reagent
        if(!StepUncheckAllSelectedAssayFromReagentGrid())
        {
            Log["Error"]("Failed to uncheck IM reagent from Reagent Grid")
            ReturnvalIM = false;
        }
        
        //Verify if CH available
        if(StepVerifyHydraReagentIsLoadedAndEnabled(AssayCH,LotNumberCH))
        {
            //Get CH Inventory Count Value From Reagent Grid 
            CHReagentCount=StepGetInventoryCountValueAsPerLot(AssayCH,LotNumberCH);
        
            //Get CH Well Count Value From Reagent Details 
            WellArray=StepGetWellCountValueFromCHReagentDetailsAsPerLot(AssayCH,LotNumberCH)

            //summing up the counts in CH well packs
            for(i=0;i<WellArray.length;i++)
            {
                TotalWellCount = TotalWellCount + WellArray[i];
            }
        
            //Verify for CH if the Total Well counts is equal to Inventory count in Grid
            if(TotalWellCount == CHReagentCount)
            {
                Log["Checkpoint"]("Total CH Well count from Reagent Details is equal to Inventory count in Grid");
                ReturnvalCH = true;
            }
            else 
            {
                Log["Error"]("CH Count from Reagent Details is NOT equal to CH Inventory count in Grid");
                ReturnvalCH = false;
            }
        
            //Verify if Test count is the unit      
            if(!StepVerifyHydraReagentInventoryUnit(ReagentNameCH,LotNumberCH,InventoryUnitCH))
            {
              Log["Error"]("Failed to fetch CH Test Count unit")
              ReturnvalCH = false;
            } 
        }
        else
        {
          ReturnvalCH = false;
        }   
        
        //Step uncheck selected reagent
        if(!StepUncheckAllSelectedAssayFromReagentGrid())
        {
            Log["Error"]("Failed to uncheck CH reagent from Reagent Grid")
            ReturnvalCH = false;
        }
        
        if(ReturnvalIM == true && ReturnvalCH == true)
        {
          Log["Checkpoint"]("CH and IM Inventory Count value and units displayed as expected");
          return true;
        }
        else
        {
          Log["Error"]("Failed to get Inventory Count value and units as expected");
          return false;
        }
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  } 
}

function GivenOperatorLoadsIMAncIMAncWashIMDilIMPriWashReagentPack()
{
  try
  {
        InitializeMetaDataHYDRA();
        //Initialize Variables
        var Returnval = new Array();
        Returnval[0] = true;
        Returnval[1] = true;
        Returnval[2] = true;
        
        //Read Test data - IM Primary Wash
        var arrTestDataPW = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_02_PWash");
        var dictColumnPW = arrTestDataPW[0];
        var AssayPW = dictColumnPW["Item"]("ReagentName");
        var BarcodePW = dictColumnPW["Item"]("Barcode");
        var PositionPW = dictColumnPW["Item"]("Position");
        var LotNumberPW = dictColumnPW["Item"]("Lot");
        
        //Read Test data - IM Ancillary/ IM Diluent
        var arrTestDataAnc = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_02_Anc");
        var dictColumnAnc = arrTestDataAnc[0];
        var AssayAnc = dictColumnAnc["Item"]("ReagentName");
        var BarcodeAnc = dictColumnAnc["Item"]("Barcode");
        var PositionAnc = dictColumnAnc["Item"]("Position");
        var LotNumberAnc = dictColumnAnc["Item"]("Lot");
        
        //Read Test data - IM Ancillary Wash
        var arrTestDataAncWash = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","FT225700_GROUP03_GWT_02_AncWash");
        var dictColumnAncWash = arrTestDataAncWash[0];
        var AssayAncWash = dictColumnAncWash["Item"]("ReagentName");
        var BarcodeAncWash = dictColumnAncWash["Item"]("Barcode");
        var PositionAncWash = dictColumnAncWash["Item"]("Position");
        var LotNumberAncWash = dictColumnAncWash["Item"]("Lot");
        
        //Read data - IM Primary Diagnostics Sequence
        arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnIM = arrTestDataIM[0];
        var MechNameIM = dictColumnIM["Item"]("MechanismName");
        var SeqNameIM = dictColumnIM["Item"]("SeqName");
        var TypeOfReagentIM=dictColumnIM["Item"]("ReagentType");
        
        //Read data - IM Ancillary Diagnostics Sequence
        arrTestDataIMAnc = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq3");
        dictColumnIMAnc = arrTestDataIMAnc[0];
        var MechNameIMAnc = dictColumnIMAnc["Item"]("MechanismName");
        var SeqNameIMAnc = dictColumnIMAnc["Item"]("SeqName");
        var TypeOfReagentIMAnc = dictColumnIMAnc["Item"]("ReagentType");
        
        //Load IM Primary Wash
        if(!StepHydraReagentIsLoaded(AssayPW,LotNumberPW,BarcodePW,PositionPW,TypeOfReagentIM,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Primary Wash Loading Failed")
          Returnval[0] = false;
        } 
        
        //Load IM Ancillary / IM Diluent 
        if(!StepHydraReagentIsLoaded(AssayAnc,LotNumberAnc,BarcodeAnc,PositionAnc,TypeOfReagentIMAnc,MechNameIMAnc,SeqNameIMAnc))
        {
          Log["Error"]("IM Ancillary /IM Diluent Loading Failed")
          Returnval[1] = false;
        } 
        
        //Load IM Ancillary Wash
        if(!StepHydraReagentIsLoaded(AssayAncWash,LotNumberAncWash,BarcodeAncWash,PositionAncWash,TypeOfReagentIMAnc,MechNameIMAnc,SeqNameIMAnc))
        {
          Log["Error"]("IM Ancillary Wash Loading Failed")
          Returnval[2] = false;
        }     


        
        //checking for overall status
        var count=0;
        for(k=0;k<Returnval["length"];k++)
        {
          if(Returnval[k]==true)
          count=count+1;       
        }
        if(count==0)
        {
            Log["Error"]("Failed to get expected outcome");
            return false;
        }
        else if(count==Returnval["length"])
        {
            Log["Checkpoint"]("Working as expected");
            return true;
        }
        else
        {
            Log["Error"]("Partially working");
            return true;
        }
  }
  catch(exp)
  {
        Log.Error(exp.description) ; 
        return false;
  }
}

function WhenReagentStatusIsUnusable()
{
  try
  {
        //Initialize Variables
        var Returnval = new Array();
        var ReturnvalPW = true;
        var ReturnvalAnc = true;
        var ReturnvalAW = true;
        var j = 0;
      
        //Read Test data - IM Primary Wash
        var arrTestDataPW = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadPW3Reagent");
        var dictColumnPW = arrTestDataPW[0];
        var BarcodePW = dictColumnPW["Item"]("Barcode"); 
        
        //Read Test data - Unusable IM Primary Wash
        var arrTestDataPW1 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusablePW3Reagent");
        var dictColumnPW1 = arrTestDataPW1[0];
        var ReagentNamePW1 = dictColumnPW1["Item"]("ReagentName");
        var PackStatusPW1 = dictColumnPW1["Item"]("PackStatus");
        var ReagentTypePW1 = dictColumnPW1["Item"]("ReagentType");
        
        //Read Test data - IM Ancillary/IM Diluent
        var arrTestDataAnc = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadMDil2Reagent");
        var dictColumnAnc = arrTestDataAnc[0];
        var BarcodeAnc = dictColumnAnc["Item"]("Barcode"); 
        
        //Read Test data - Unusable IM Ancillary/IM Diluent
        var arrTestDataAnc1 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableMDil2Reagent");
        var dictColumnAnc1 = arrTestDataAnc1[0];
        var ReagentNameAnc1 = dictColumnAnc1["Item"]("ReagentName");
        var PackStatusAnc1 = dictColumnAnc1["Item"]("PackStatus");
        var ReagentTypeAnc1 = dictColumnAnc1["Item"]("ReagentType");
        
        //Read Test data - IM Ancillary Wash
        var arrTestDataAW = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAPW2Reagent");
        var dictColumnAW = arrTestDataAW[0];
        var BarcodeAW = dictColumnAW["Item"]("Barcode"); 
        
        //Read Test data - Unusable IM Ancillary Wash
        var arrTestDataAW1 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableAPW2Reagent");
        var dictColumnAW1 = arrTestDataAW1[0];
        var ReagentNameAW1 = dictColumnAW1["Item"]("ReagentName");
        var PackStatusAW1 = dictColumnAW1["Item"]("PackStatus");
        var ReagentTypeAW1 = dictColumnAW1["Item"]("ReagentType");
         
        //Read Test Data - DB query
        arrTestData1 = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","PackStatusAsEmpty");
        dictColumn1=arrTestData1[0];
        strQuery = dictColumn1["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        //IM Primary Wash query
        QueryModified1 = aqString["Replace"](strQuery, "$Barcode", "'"+BarcodePW+"'", false);
        
        //IM Ancillary/IM Diluent query
        QueryModified2 = aqString["Replace"](strQuery, "$Barcode", "'"+BarcodeAnc+"'", false);
        
        //IM Ancillary Wash query
        QueryModified3 = aqString["Replace"](strQuery, "$Barcode", "'"+BarcodeAW+"'", false);
    
        //StepDefinition - Update IM Primary Wash empty in DB
        if(!StepUpdateDB(QueryModified1,strConString))
        {
            Log["Error"](" DB update failed for : "+ReagentNamePW1);
            ReturnvalPW = false; 
        }
        else
            Log["Checkpoint"](ReagentNamePW1+" status is empty - updated successfully in DB");
        
        //StepDefinition - Update IM Ancillary/IM Diluent empty in DB
        if(!StepUpdateDB(QueryModified2,strConString))
        {
            Log["Error"](" DB update failed for : "+ReagentNameAnc1);
            ReturnvalAnc = false; 
        }
        else
            Log["Checkpoint"](ReagentNameAnc1+" status is empty - updated successfully in DB");
        
        //StepDefinition - Update IM Ancillary Wash empty in DB
        if(!StepUpdateDB(QueryModified3,strConString))
        {
            Log["Error"](" DB update failed for : "+ReagentNameAW1);
            ReturnvalAW = false; 
        }
        else
            Log["Checkpoint"](ReagentNameAW1+" status is empty - updated successfully in DB");
        
        //if all DB update failed
        if(ReturnvalPW == false && ReturnvalAnc == false && ReturnvalAW == false)
            return false;
        
        //Restarting Hydra to reflect DB changes
        if(!InitializeHydra())
          return false;
        
        //initialize array
        var ReagentName = new Array();
        ReagentName[0] = ReagentNamePW1;
        ReagentName[1] = ReagentNameAnc1;
        ReagentName[2] = ReagentNameAW1;
        
        var ReagentType = new Array();
        ReagentType[0] = ReagentTypePW1;
        ReagentType[1] = ReagentTypeAnc1;
        ReagentType[2] = ReagentTypeAW1;
        
        var PackStatus = new Array();
        PackStatus[0] = PackStatusPW1;
        PackStatus[1] = PackStatusAnc1;
        PackStatus[2] = PackStatusAW1;
        
        for(i=0;i<ReagentName["length"];i++)
        {
            Log["AppendFolder"]("Checking Pack Status for : "+ReagentName[i]);
            
            //verify if reagent available
            if(StepVerifyReagentLoaded(ReagentName[i],ReagentType[i]))
            {
                //Get Pack Status from UI
                var IMPackStatus=StepGetIMReagentPackStatus(ReagentName[i]);
        
                //Compare if Pack Status on UI is unusable
                var arrPackStatusIM=PackStatus[i]["split"](";") ;
                for(var j=0;j<arrPackStatusIM["length"];j++)
                {
                    if(arrPackStatusIM[j]==IMPackStatus)
                    {
                      Returnval[i] = true;
                    }
                }
        
                //Log message - IM reagent
                if(Returnval[i]==true)
                {
                  Log["Checkpoint"](ReagentName[i]+" is an unusable IM Reagent Pack");
                }
                else
                {
                  Log["Error"](ReagentName[i]+" is NOT unusable IM Reagent Pack");
                  Returnval[i] = false;
                }
            }
            else
            {
                Log["Error"](ReagentName[i]+" is NOT available");
                Returnval[i] = false;
            }
            
            //Step uncheck selected reagent
            if(!StepUncheckAllSelectedAssayFromReagentGrid())
            {
                Log["Error"]("Failed to uncheck IM reagent from Reagent Grid")
                return false;
            }
            Log["PopLogFolder"]();
        }//end of for loop
        
        //checking for overall status
        var count=0;
        for(k=0;k<Returnval["length"];k++)
        {
          if(Returnval[k]==true)
          count=count+1;       
        }
        if(count==0)
        {
            Log["Error"]("Failed to get expected outcome");
            return false;
        }
        else if(count==Returnval["length"])
        {
            Log["Checkpoint"]("Working as expected");
            return true;
        }
        else
        {
            Log["Error"]("Partially working");
            return true;
        }
  }
  catch(exp)
  {
        Log.Error(exp.description) ; 
        return false;
  }
}

function ThenSystemShouldDisplayRemainingInventoryValueAsmLUnit()
{
  try
  {     
        //Initialize Variables
        var Returnval = new Array();
        
        //Read Test data - Unusable IM Primary Wash
        var arrTestDataPW1 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusablePW3Reagent");
        var dictColumnPW1 = arrTestDataPW1[0];
        var ReagentNamePW1 = dictColumnPW1["Item"]("ReagentName");
        var ReagentTypePW1 = dictColumnPW1["Item"]("ReagentType");
        var InventoryUnitPW1 = dictColumnPW1["Item"]("InventoryUnit");
        
        //Read Test data - Unusable IM Ancillary/IM Diluent
        var arrTestDataAnc1 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableMDil2Reagent");
        var dictColumnAnc1 = arrTestDataAnc1[0];
        var ReagentNameAnc1 = dictColumnAnc1["Item"]("ReagentName");
        var ReagentTypeAnc1 = dictColumnAnc1["Item"]("ReagentType");
        var InventoryUnitAnc1 = dictColumnAnc1["Item"]("InventoryUnit");
        
        //Read Test data - Unusable IM Ancillary Wash
        var arrTestDataAW1 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnusableAPW2Reagent");
        var dictColumnAW1 = arrTestDataAW1[0];
        var ReagentNameAW1 = dictColumnAW1["Item"]("ReagentName");
        var ReagentTypeAW1 = dictColumnAW1["Item"]("ReagentType");
        var InventoryUnitAW1 = dictColumnAW1["Item"]("InventoryUnit");
        
        //initialize array
        var ReagentName = new Array();
        ReagentName[0] = ReagentNamePW1;
        ReagentName[1] = ReagentNameAnc1;
        ReagentName[2] = ReagentNameAW1;
        
        var ReagentType = new Array();
        ReagentType[0] = ReagentTypePW1;
        ReagentType[1] = ReagentTypeAnc1;
        ReagentType[2] = ReagentTypeAW1;
        
        var InventoryUnit = new Array();
        InventoryUnit[0] = InventoryUnitPW1;
        InventoryUnit[1] = InventoryUnitAnc1;
        InventoryUnit[2] = InventoryUnitAW1;
        
        for(i=0;i<ReagentName["length"];i++)
        {
            Log["AppendFolder"]("Checking Inventory for : "+ReagentName[i]);
        
            //verify if IM available
            if(StepVerifyReagentLoaded(ReagentName[i],ReagentType[i]))
            {        
                //Get Inventory Count Value From Reagent Grid 
                InventoryCount=StepGetInventoryCountValueFromReagentGrid(ReagentName[i]);
        
                //Get Well Count Value From Reagent Details 
                Count=StepGetCountValueFromIMReagentDetails(ReagentName[i]);   
        
                //Verify if the Total Well counts is equal to Inventory count in Grid
                if(Count==InventoryCount)
                {
                  Log["Checkpoint"]("Count from Reagent Details is equal to Inventory count in Grid");
                  Returnval[i] = true;
                }
                else 
                {
                  Log["Error"]("IM Count from Reagent Details is NOT equal to IM Inventory count in Grid");
                  Returnval[i] = false;
                }
        
                //Verify if Test count is the unit
                if(!StepVerifyDisplayReagentRemaining(ReagentName[i],ReagentType[i],InventoryUnit[i]))
                {
                  Log["Error"]("Failed to fetch Test Count unit")
                  Returnval[i] = false;
                }
            }
            else
            {
                Log["Error"](ReagentName[i] + "Reagent unavailable");
                Returnval[i] = false;
            }
        
            //Step uncheck selected reagent
            if(!StepUncheckAllSelectedAssayFromReagentGrid())
            {
                Log["Error"]("Failed to uncheck IM reagent from Reagent Grid")
                return false;
            }
            Log["PopLogFolder"]();
        }//end of for loop
       
        //checking for overall status
        var ReturnCount=0;
        for(k=0;k<Returnval["length"];k++)
        {
          if(Returnval[k]==true)
          ReturnCount = ReturnCount + 1;       
        }
        if(ReturnCount == Returnval["length"])
        {
            Log["Checkpoint"]("Working as expected")
            return true;
        }
        else 
        {
            Log["Error"]("Failed to get expected outcome")
            return false;
        }
  }
  catch(exp)
  {
    Log["Error"]("Exception : "+exp.description) ;
    return false;
  } 
}

//******************************************************************
//         FEATURE 2 : 284141 - EnableDisableReagentPack
//******************************************************************
function GivenOperatorNavigatesToReagentOverviewScreen(){
    try
    { 
    
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //StepDefinition - Navigate to reagent Overview
        res =StepOperatorNavigatesToReagentOverviewScreen();
        if(!res){
            Returnval = false}
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenReagentPackIsEnabled(dictColumn){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
                    
        //StepDefinition - Verify Reagent Pack is Enabled
        res =StepVerifyReagentPackIsEnabled(dictColumn["Item"]("ReagentName"));
        if(!res){
            Returnval =false;}
                
         //Close Log
        Log["PopLogFolder"]()
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function WHENUserDisablesReagentPack(dictColumn){
    try
    { 
    
        //Initialize Variables
        var Returnval = true;
        var res
    
        //Initialize XMLs
        InitializeMetaDataHYDRA();

        //StepDefinition - DisableReagentPack
        res =StepDisableReagentPack(dictColumn["Item"]("ReagentName"),dictColumn["Item"]("ReagentType"));
        if(!res){
            Returnval =false;}
                
         //Close Log
        Log["PopLogFolder"]()
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENReagentPackIsDisabled(dictColumn){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //StepDefinition - Verify pack Disabled
        res =StepVerifyPackDisabled(dictColumn["Item"]("ReagentName"));
        if(!res){
            Returnval =false;}
                      
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenReagentPackIsDisabled(dictColumn){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
             
        //StepDefinition - Select Reagent Row
        res =StepClickOnReagent(dictColumn["Item"]("ReagentName"));
        if(!res){
            Returnval =false;}
       
        //StepDefinition - Verify pack Disabled
        res =StepVerifyPackDisabled(dictColumn["Item"]("ReagentName"));
        if(!res){
            Returnval =false;}
                 
         //Close Log
        Log["PopLogFolder"]()
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function WHENUserEnablesReagentPack(dictColumn){
    try
    { 
    
        //Initialize Variables
        var Returnval = true;
        var res
    
        //Initialize XMLs
        InitializeMetaDataHYDRA();

        //StepDefinition - Select Reagent Row
        res =StepClickOnReagent(dictColumn["Item"]("ReagentName"));
        if(!res){
            Returnval =false;}
            
        //StepDefinition - EnableReagentPack
        res =StepEnableReagentPack(dictColumn["Item"]("ReagentName"),dictColumn["Item"]("ReagentType"));
        if(!res){
            Returnval =false;}
                
         //Close Log
        Log["PopLogFolder"]()
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENReagentPackIsEnabled(dictColumn){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
    
        //StepDefinition - Verify Reagent Pack is Enabled
        res =StepVerifyReagentPackIsEnabled(dictColumn["Item"]("ReagentName"));
        if(!res){
            Returnval =false;}
            
        //StepDefinition - DeSelect Reagent Row
        res =StepClickOnReagent(dictColumn["Item"]("ReagentName"));
        if(!res){
            Returnval =false;}
                        
         //Close Log
        Log["PopLogFolder"]()
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

//******************************************************************
//       [3] FEATURE : 278988 - Sample Tips
//******************************************************************

function GivenUpdateTray1andTray2InventoryDB(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","TrackSampleTipsInventoryTipsRemaining");
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
    
        //StepDefinition - Update Tray 1 and Tray2 Inventory in DB
        res =StepUpdateTrayInventoryInDB(strQuery,strConString);
        if(!res){
            Returnval = false }
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenUpdateTray1EmptyandTray2InventoryDB(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","TrackSampleTipsInventoryTray1Empty");
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update Tray 1 Empty and Tray2 Full Inventory in DB
        res =StepUpdateTrayInventoryInDB(strQuery,strConString);
        if(!res){
            Returnval = false }
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENCaptureSampleTipInventory(){
    try
    { 
    
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data
        arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","TrackSampleTipsInventoryTipsRemaining");
        dictColumn=arrTestData[0];

        //StepDefinition
        res =StepCaptureSampleTipInventory(dictColumn["Item"]("Tray1Inventory"),dictColumn["Item"]("Tray2Inventory"))
        if(!res){
            Returnval = false}
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENCaptureSampleTipInventoryTry1Empty(){
    try
    { 
    
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data
        arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","TrackSampleTipsInventoryTray1Empty");
        dictColumn=arrTestData[0];

        //StepDefinition
        res =StepCaptureSampleTipInventory(dictColumn["Item"]("Tray1Inventory"),dictColumn["Item"]("Tray2Inventory"))
        if(!res){
            Returnval = false}
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
} 

function WHENOperatorChecksForSupplies(){
    try
    { 
    
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //StepDefinition - Navigate to Supplies Overview
        res =StepOperatorNavigatesToSupplies();
        if(!res){
            Returnval = false}
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//         FEATURE 4 : 259953 - IMT Sensor   
//>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

function GIVENIMTAndPretreatmentFluidsLoaded(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","TrackSampleTipsInventory");
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update Tray 1 and Tray2 Inventory in DB
        res =StepUpdateTrayInventoryInDB(strQuery,strConString);
        if(!res){
            Returnval = false }
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}



/*-------
 AMAR 
 -------*/
 
//******************************************************************
//  FEATURE 5 :  278992 - Configure Alert Threshold for Sample Tips         
//******************************************************************


function GivenUpdateThreshold(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","Threshold");
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update Threshold in DB
        res =StepUpdateThresholdInventoryInDB(strQuery,strConString);
        if(!res){
            Returnval = false }
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function WHENOperatorChecksForSuppliesThreshold(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res
              
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //StepDefinition
        res =StepOperatorNavigatesToSupplies();
        if(!res){
            Returnval = false}
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENCaptureSampleTipInventoryThreshold(){
    try
    { 
    
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data
        arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","Threshold");
        dictColumn=arrTestData[0];

        //StepDefinition
        res =StepCaptureSampleTipInventoryThreshold(dictColumn["Item"]("Tray1Inventory"),dictColumn["Item"]("Tray2Inventory"))
        if(!res){
            Returnval = false}
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

/*-------
 SHAHANA 
 -------*/
 
 //******************************************************************
//         FEATURE 6 : 278989 - IM Cuvettes
//******************************************************************

function GivenCuvettesAreLoaded()
{
  try
    {    

        var arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
       // arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies","CuvetteStatusOK");
       Log["Message"]("Filling Cuvette Supplies in DB to Set Cuvette Status to OK")
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","RoundTrip"); //Run RT query to fill all supplies rather than just cuvette count
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
    
        
       // return (StepUpdateCuvetteStatusinDB(strQuery,strConString));
        if(!StepUpdateDBRTQuery(strQuery,strConString)){
          Log["Error"]("Unable to Fill Cuvette");        
          return false;}
        
       
         //Restart for DB changes to get reflected
        Log["Message"]("Restarting the application to reflect DB changes on UI");
        if(!InitializeHydra())
            return false
        
            
        //Verify Cuvette status is OK  
        return(StepVerifyCuvetteStatus("OK"))         
        

             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
} 

function GivenCuvetteInUse()
{
  try{
    
            //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        
        //Process a sample to use a Cuvette
        //create 1 patient order
        arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US279272_GWT_01_CuvetteStatusOK");
        dictColumn = arrTestData[0];
        var SampleIDs = dictColumn["Item"]("SampleId");
        var Specimen = dictColumn["Item"]("Specimen");
        var Priority = dictColumn["Item"]("Priority");
        var Analyzer = dictColumn["Item"]("Analyzer");
        var Assay = dictColumn["Item"]("Assay");
        var SampleStatus = dictColumn["Item"]("SampleStatus");
        var arrSampleIDs = SampleIDs["split"](";")
        var SampleID = arrSampleIDs[0]
        
        if(!StepCreatePatientOrderHydra(SampleID,Specimen,Priority,Analyzer,Assay)) 
        return false
  

      //Load the sample
        if(!StepLoadSamples(SampleID))
          return false
        
      //Verify Sample status        
      if(!StepCheckSampleStatus(arrSampleIDs[scount],SampleStatus))
        return false
        
        return true
      
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }


}

function GivenCuvetteNotInUse()
{
  try{
    
            //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        
        //Process a sample to use a Cuvette
        //create 1 patient order and dont load - No Sample Processing and No Cuvette in use
        arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US279272_GWT_02_CuvetteStatusOK");
        dictColumn = arrTestData[0];
        var SampleIDs = dictColumn["Item"]("SampleId");
        var Specimen = dictColumn["Item"]("Specimen");
        var Priority = dictColumn["Item"]("Priority");
        var Analyzer = dictColumn["Item"]("Analyzer");
        var Assay = dictColumn["Item"]("Assay");
        var SampleStatus = dictColumn["Item"]("SampleStatus");
        var arrSampleIDs = SampleIDs["split"](";")
        var SampleID = arrSampleIDs[0]
        
        if(!StepCreatePatientOrderHydra(SampleID,Specimen,Priority,Analyzer,Assay)) 
        return false
        
        
        return true
  

      
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }


}



function WHENOperatorNavigatesToSuppliesOverviewScreen()
{
    try
    { 

        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //StepDefinition - Navigate to Supplies Overview screen
        return (StepOperatorNavigatesToSuppliesOverviewScreen())

             
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}


function ThenCuvettesShouldBeDisplayedAsOKStatus()
{
  try
  {

        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //StepDefinition - Fetching Cuvette Status
        return(StepVerifyCuvetteStatus("OK"));

  }
  catch(exp)
  {
        Log.Error(exp.description) ; 
        return false;
  }
}

function ThenTestsShouldContinueWithoutError(ScenarioName)
{
    try{
    
            //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        
        //Process a sample to use a Cuvette
        //create 1 patient order
        arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder",ScenarioName);
        dictColumn = arrTestData[0];
        var SampleIDs = dictColumn["Item"]("SampleId");
        var Specimen = dictColumn["Item"]("Specimen");
        var Priority = dictColumn["Item"]("Priority");
        var Analyzer = dictColumn["Item"]("Analyzer");
        var Assay = dictColumn["Item"]("Assay");
        var SampleStatus = dictColumn["Item"]("SampleStatus");
        var arrSampleIDs = SampleIDs["split"](";")
        var SampleID = arrSampleIDs[1]
        
        if(!StepCreatePatientOrderHydra(SampleID,Specimen,Priority,Analyzer,Assay)) 
        return false
  

      //Load the sample
        if(!StepLoadSamples(SampleID))
          return false
        
      //Verify Sample status        
      if(!StepCheckSampleStatus(arrSampleIDs[scount],SampleStatus))
        return false
        
        return true
      
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }


}



//******************************************************************
//        FEATURE 7 : 225702 - Reagent OBS Expiration
//******************************************************************

function ThenSystemTracksOBSStatus(Assay)
{
  try
  {
    //Initialize Variables
    var Returnval = true;
    var res;
        
    //Initialize XMLs
    InitializeMetaDataHYDRA();
           
    //StepDefinition - Fetching OBS value
    res =StepTrackOBSValue(Assay);
    if(!res){
    Returnval = false;}
        
    //Return
    return Returnval
  } 
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  } 
}


/*-------
RAMITHA
-------*/
 
 //******************************************************************
//     Scenarios [FEATURE : 259953 - IMT Sensor]
//               [FEATURE : 247523 - IMT Bulk System Fluids] 
//               [FEATURE : 247524 - Pretreatment Consumable] 
//******************************************************************

function GIVENFluidLotOBSUpdateForIMTAndPretreatmentDB(DBExcelSheet){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra",DBExcelSheet);
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Load IMT and Pretreatment,Adjust Dates such as LOT & OBS not Expired
        res =StepUpdateDBIMTandPreTreatment(strQuery,strConString);
        if(!res){
            ProjectSuite["Variables"]["ExecutionStatus"] ="Fail" 
            Returnval = false }
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GIVENFluidLevelAboveBelowThresolhdDB(ThresholdValue){
try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        dictColumn=arrTestData[0];
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
        
        //Read data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        dictColumn2=arrTestData2[0];
        var ConsumableID=dictColumn2["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn2["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;

        //StepDefinition -Iterate for all Consumable ID
        for(i =0 ;i<dataCount ; i++){
            CurrentConsumeID=ArrConsumableID[i];
            strQuery = dictColumn["Item"]("Query2")
            QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false)
            RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
            RecordSet["MoveFirst"]
              while(!RecordSet.EOF){
                  res = RecordSet["Fields"]("ThresholdState")["Value"];
                  RecordSet["MoveNext"]
              }
            
          //StepDefinition
          if(!StepFluidLevelAboveBelowThresolhdDB(ArrSuppliesType[i],res,ThresholdValue))
            Returnval =false;  
            }
        // For A-LYTE Sensor    
         strQuery = dictColumn["Item"]("Query7")
         RecordSet =ReturnQueryRecordSetFromString(strQuery,strConString);
         RecordSet["MoveFirst"]
         while(!RecordSet.EOF){
            res = RecordSet["Fields"]("ThresholdState")["Value"];
            RecordSet["MoveNext"]
              }
              
       //StepDefinition
          if(!StepFluidLevelAboveBelowThresolhdDB(ArrSuppliesType[dataCount],res,ThresholdValue))
            Returnval =false; 
         
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENVerifyPretreatmentAndIMTWithVolumeAndLotDataDB(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var strVolPercent;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        //var dataCount2 = arrTestData2.length
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        
       //Read data for DB
        var arrTestData1 = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dictColumn1=arrTestData1[0];
        var strQuery = dictColumn1["Item"]("Query3")
        var strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"

       /*---------------- VOLUME PERCENT ----------------*/
       
        for(i =0 ;i< dataCount ; i++){
          strQuery = dictColumn1["Item"]("Query3")
          CurrentConsumeID=ArrConsumableID[i];       
          QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false)
          //StepDefinition -Query
          RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
          RecordSet["MoveFirst"]
          while(!RecordSet.EOF){
              strVolPercent = RecordSet["Fields"]("VolPercent")["Value"];
              RecordSet["MoveNext"]
          }
  
          //StepDefinition
          if(!StepCaptureIMTAndPretreatmentData(ArrSuppliesType[i],ArrVolumeControlNames[i],"VolumePercent",strVolPercent))
            Returnval =false;
        }
                   
        //IMT Sensor StepDefinition
        strQuery = dictColumn1["Item"]("Query4")
        RecordSet1 =ReturnQueryRecordSetFromString(strQuery,strConString);
        RecordSet1["MoveFirst"]
        while(!RecordSet1.EOF){
            strVolPercent = RecordSet1["Fields"]("VolPercent")["Value"];
            RecordSet1["MoveNext"]
        }
        
        if(!StepCaptureIMTAndPretreatmentData(ArrSuppliesType[dataCount],ArrVolumeControlNames[dataCount],"VolumePercent",strVolPercent))
          Returnval =false;
        
        /*---------------- LOT EXPIRATION ----------------*/
        
        for(i =0 ;i< dataCount ; i++){
          strQuery = dictColumn1["Item"]("Query5")
          CurrentConsumeID=ArrConsumableID[i];       
          QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false)
          //StepDefinition -Query
          RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
          RecordSet["MoveFirst"]
          while(!RecordSet.EOF){
              strLotExpDate = RecordSet["Fields"]("LotExpDate")["Value"];
              RecordSet["MoveNext"]
          }
  
          //StepDefinition
          if(!StepCaptureIMTAndPretreatmentData(ArrSuppliesType[i],ArrLotControlNames[i],"LotExpirationDate",strLotExpDate))
              Returnval =false;
        }
                   
        //IMT Sensor StepDefinition
        strQuery = dictColumn1["Item"]("Query5")
        QueryModified = aqString["Replace"](aqString["Replace"](strQuery, "$ConsumeID", "10", false), "TypeID = 1", "TypeID = 2", false)
        RecordSet1 =ReturnQueryRecordSetFromString(QueryModified,strConString);
        RecordSet1["MoveFirst"]
        while(!RecordSet1.EOF){
            strLotExpDate = RecordSet1["Fields"]("LotExpDate")["Value"];
            RecordSet1["MoveNext"]
        }
        if(!StepCaptureIMTAndPretreatmentData(ArrSuppliesType[dataCount],ArrLotControlNames[dataCount],"LotExpirationDate",strLotExpDate))
          Returnval =false;
         
          /*---------------- OBS Remaining Days ----------------*/
        //Note: Currently not calculating OBS as there is a mismatch in DB and UI value 
        
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENVerifyPretreatmentAndIMTWithOBSExpirationData(){
  try
  { 
        //Initialize Variables
        var Returnval = true;
        var strVolPercent;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        //var dataCount2 = arrTestData2.length
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        var OBSRemaining = "0 d 0 h";
             
          /*---------------- OBS Remaining Days ----------------*/        
         for(i =0 ;i< dataCount+1 ; i++)
         {                    
              if(!StepCaptureIMTAndPretreatmentData(ArrSuppliesType[i],ArrOBSControlNames[i],"OBSRemaining",OBSRemaining))
                  Returnval =false;
         }
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENVerifyVisualIndicationForLotAndOBS(boolFlag){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var strVolPercent;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dataCount2 = arrTestData2.length
        var dictColumn2=arrTestData2[0];
        var SuppliesType=dictColumn2["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var LotControlNames=dictColumn2["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var LotControlNamesCount = ArrLotControlNames.length
        var OBSControlNames=dictColumn2["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        var OBSControlNamesCount = ArrOBSControlNames.length
        var lotErrcount=0;
        var ObsErrcount=0;
        
          for(i =0 ;i< LotControlNamesCount ; i++)
          {
            
             if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrLotControlNames[i],"Lot Expiration Date",boolFlag))
               lotErrcount ++;                        
          } 
          if(lotErrcount>0)
               Returnval =false;
         
           for(i =0 ;i< OBSControlNamesCount ; i++)
            {
             if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS Remaining Days",boolFlag))
               ObsErrcount ++;                        
            } 
            if(ObsErrcount>0)
               Returnval =false; 
            
           //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
  }

function ThenVerifyNewIMTPretreatmentTestNotProcessing(OrderDetails) //Muru
{
          //Initialize XMLs
  InitializeMetaDataHYDRA();
   
  //Load a Sample with IMT-Sodium test
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder",OrderDetails);
  dictColumn = arrTestData[0];
  var SampleIDs = dictColumn["Item"]("SampleId");
  var Specimen = dictColumn["Item"]("Specimen");
  var Priority = dictColumn["Item"]("Priority");
  var Analyzer = dictColumn["Item"]("Analyzer");
  var Assay = dictColumn["Item"]("Assay");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  
  
  arrSampleIDs = SampleIDs["split"](";");
  arrAssays = Assay["split"](";");
  
  //Create Two samples - one for IMT and another A1C3
  for(var count=0;count<2;count++){  
    if(!StepCreatePatientOrderHydra(arrSampleIDs[count],Specimen,Priority,Analyzer,arrAssays[count])) 
      return false}

  //Load the two samples
  for(var SID=0;SID<2;SID++){
    if(!StepLoadSamples(arrSampleIDs[SID]))
      return false}
  
  //Verify the two sample status
    for(var SID=0;SID<2;SID++){
    if(!StepCheckSampleStatus(arrSampleIDs[SID],SampleStatus))
      return false}
  
}

  
  
function THENVerifyVisualIndicationForFluidVolume(boolFlag){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var strVolPercent;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dataCount2 = arrTestData2.length
        var dictColumn2=arrTestData2[0];
        var SuppliesType=dictColumn2["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn2["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var VolumeControlNamesCount = ArrVolumeControlNames.length
        var volumeErrcount=0;
          for(i =0 ;i< VolumeControlNamesCount ; i++)
          {
           
           if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrVolumeControlNames[i],"FluidVolume",boolFlag)){
             volumeErrcount ++;
           }                    
          } 
          if(volumeErrcount>0)
           Returnval =false;
                   
           //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
 }
 
function THENVerifyOperatorEventLogWhenOBSBelowThreshold(thresholdIndicator){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dataCount2 = arrTestData2.length
        var dictColumn2=arrTestData2[0];
        var SuppliesType=dictColumn2["Item"]("LogEntryForOBSBelowThreshold")
        var ArrSuppliesType=SuppliesType["split"](",");
        var SuppliesTypeCount = ArrSuppliesType.length
        var OBSThresholdValue=dictColumn2["Item"]("OBSThresholdValue")
        
        if(!StepSettingupOBSThresholdAndOperatorEventLog(SuppliesTypeCount,ArrSuppliesType,OBSThresholdValue,thresholdIndicator))           
               return false;            
           
           //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENVerifyFluidDataRestoredAfterApplicationRestart(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dataCount2 = arrTestData2.length
        var dictColumn2=arrTestData2[0];
        var OBSControlNames=dictColumn2["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",");
        var OBSControlNamesCount = ArrOBSControlNames.length
        var OBSThresholdValue=dictColumn2["Item"]("OBSThresholdValue")
        var VolumeControlNames=dictColumn2["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn2["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var SuppliesType=dictColumn2["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",");
        var SuppliesTypeCount = ArrSuppliesType.length
         
        var index = 0;  
        var arrControlValues= new Array(ArrOBSControlNames,ArrVolumeControlNames,ArrLotControlNames);
        
        //Read and store fluid data(OBS,Lot,Volume) into array before restarting application 
        var arrFluidDataBeforeRestart=StepReadAndStoreFluidDataForIMTPretreatment(arrControlValues,SuppliesTypeCount);
        if(arrFluidDataBeforeRestart=="null")
        {
          return false;
        }
        //Restart application
        InitializeHydra()
        
        //Navigate to supplies screen
        fnNavigateToSuppliesOvw()
        
        //Read and store fluid data(OBS,Lot,Volume) into array after restarting application 
        var arrFluidDataAfterRestart=StepReadAndStoreFluidDataForIMTPretreatment(arrControlValues,SuppliesTypeCount);
        if(arrFluidDataAfterRestart=="null")
        {
          return false;
        }
        var arrayComparison = aqObject["CompareProperty"](arrFluidDataBeforeRestart, cmpEqual, arrFluidDataAfterRestart, false);
        
        if(!arrayComparison){         
          return false       
        }
        else
        {
          Log["Checkpoint"]("Fluid data - Volume,OBS,LOT remains the same after Restarting the applictaion");
        }
          
        return Returnval   
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}


function THENVerifyOperatorEventLogWhenVolumeBelowThreshold(thresholdIndicator){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dataCount2 = arrTestData2.length
        var dictColumn2=arrTestData2[0];
        var SuppliesType=dictColumn2["Item"]("LogEntryForVolBelowThreshold")
        var ArrSuppliesType=SuppliesType["split"](",");
        var VolumeThresholdMultisensor=dictColumn2["Item"]("VolumeThresholdValueMultisensor")
        var SuppliesTypeCount = ArrSuppliesType.length
        var VolumeThresholdValue=dictColumn2["Item"]("VolumeThresholdValue")
        
        var arrThreValues= new Array(0,VolumeThresholdValue);
        if(!StepSettingupVolumeThresholdAndOperatorEventLog(SuppliesTypeCount,ArrSuppliesType,arrThreValues,VolumeThresholdMultisensor,thresholdIndicator))           
               return false;            
           
           //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}
function GivenIAPrimaryReagentPackLoadedWithOBSExpired()
{
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_GROUP02_GWT_03_IAPrimary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  var AssayType = dictColumn["Item"]("AssayType")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
//   //Load IA Reagent 
//  if(!StepReagentIsLoaded(AssayIA,TypeOfReagentIA,MechNameSeqIA,SeqNameSeqIA))
//    return false
    
  if(!StepVerifyReagentLoaded(Assay,Analyzer))
  {
      //Read data - IA Diagnostics Sequence   
    if(!LoadingHydraReagents("IMPrimary",MechNameIA,SeqNameIA))
      return false  
    
    if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false 
  }
     
  if(!StepGetReagentOBSValue(Assay))
    return false
  
  if(!StepGetOBSFromReagentDetails(Assay))
    return false
    
  var OBSDaysInReagentGrid = OBSDays
  var ActualOBSvalueInReagentDetails = OBSvalueInReagentDetails
  //var ddate = aqDateTime.Today()
  
  var FirstLoadedNewValue = aqDateTime["AddDays"](ActualOBSvalueInReagentDetails ,(-OBSDaysInReagentGrid-2))
    
  if(!StepUpdatePiercedOrFirstLoadedDateForReagentOBSExpired(FirstLoadedNewValue,AssayType))
    return false
  
  // restart software -TO DO
}

function WhenPatientOrderAndQCOrderForIAPrimaryReagentPackWithOBSExpired()
{
  //InitializeMetaDataHYDRA();
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_GROUP02_GWT_03_IAPrimary");
  dictColumn = arrTestData[0];
  var SampleId = dictColumn["Item"]("SampleId")
  var Assay = dictColumn["Item"]("Assay")
  var Priority = dictColumn["Item"]("Priority")
  var Specimen = dictColumn["Item"]("Specimen")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  // add navigation to patient orders screen-TO DO
  if(!StepCreatePatientOrderHydra(Assay, SampleId, Specimen, Analyzer, Priority))
    return false

  //create QC definition and order
  var QCDefList=GetTestItemsByTestName_New(TestDataFile,"QCDefinition",Assay);
  var QCControlID=QCDefList["Fields"]("ControlID").Value;
  var QCSampleID=QCDefList["Fields"]("QCSampleID").Value;
  
  if(!StepCreateQCDefinition(Assay))
    return false;
  
  return StepCreateQCOrder(Assay, QCControlID)
}

function ThenTestNotProcessedForIAPrimaryReagentWithOBSExpired()
{
  // To Do - to verify patient order and QC orders not processed 
  //To Do - to verify OBS value highlighted in red
  
}

function GivenCCReagentPackLoadedWithOBSExpired()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_GROUP02_GWT_03_CC");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  var AssayType = dictColumn["Item"]("AssayType");
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
  if(!StepVerifyReagentLoaded(Assay,Analyzer))
  {
      //Read data - CC Diagnostics Sequence   
    if(!LoadingHydraReagents("CH",MechNameIA,SeqNameIA))
      return false  
  }
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_GROUP02_GWT_03_CC");
  dictColumn = arrTestDataIA[0];
  var SampleId = dictColumn["Item"]("SampleId")
  var Assay = dictColumn["Item"]("Assay")
  var Priority = dictColumn["Item"]("Priority")
  var Specimen = dictColumn["Item"]("Specimen")
  var Analyzer = dictColumn["Item"]("Analyzer")
  var SampleStatus = dictColumn["Item"]("SampleStatus")
  
  //add navigation to patient orders screen- check with bangalore team-TO DO
  
  if(!StepCreatePatientOrderHydra(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  aqUtils["Delay"](50000,"Waiting for test affinities to be displayed") 
  
   //Check Test Affinities is not zero 
  if(!checkTestAffinities())   // need to put in specific library since now it is a RounTripE2E method
      return false
   
   //Check is CH Mechanism is available or not
  if(!fnCheckCHSubSystemMechanismStatus())
      return false
      
	  //Add navigation to load sample rack screen
      //Load samples through DL
  if(!StepLoadSamples(SampleId))  // need to put in Samples library since now it is a RounTripE2E method
      return false
    
  //if(!StepWaitForSampleStatus(SampleId, SampleStatus))
    //return false
  if(!StepCheckSampleStatus(SID,SampleStatus))// this fn is referring to P2 declaration -wrong
    return false

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!StepGetReagentOBSValue(Assay))
    return false
  
  if(!StepGetOBSFromReagentDetails(Assay))
    return false
    
  var OBSDaysInReagentGrid = OBSDays
  var ActualOBSvalueInReagentDetails = OBSvalueInReagentDetails
  //var ddate = aqDateTime.Today()
  
  var PiercedDateTimeValue = aqDateTime["AddDays"](ActualOBSvalueInReagentDetails ,(-OBSDaysInReagentGrid-2))    
    
  if(!StepUpdatePiercedOrFirstLoadedDateForReagentOBSExpired(PiercedDateTimeValue,AssayType))
    return false
 
  // restart the software- TO DO  
}

function WhenPatientOrderAndQCOrderForCCReagentPackWithOBSExpired()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_GROUP02_GWT_03_CC");
  dictColumn =arrTestData[1];
  var SampleId = dictColumn["Item"]("SampleId")
  var Assay = dictColumn["Item"]("Assay")
  var Priority = dictColumn["Item"]("Priority")
  var Specimen = dictColumn["Item"]("Specimen")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  if(!StepCreatePatientOrder(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;

  //create QC definition and order
  var QCDefList=GetTestItemsByTestName_New(TestDataFile,"QCDefinition",Assay);
  var QCControlID=QCDefList["Fields"]("ControlID").Value;
  var QCSampleID=QCDefList["Fields"]("QCSampleID").Value;
  
  if(!StepCreateQCDefinition(Assay))
    return false;
  
  return StepCreateQCOrder(Assay, QCControlID)
}


function ThenTestNotProcessedForCCReagentWithOBSExpired()
{
  // To Do - to verify patient order and QC orders not processed 
  //To Do - to verify OBS value highlighted in red
  
}

function GivenOBSAboveThresholdForReagent(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ReagentOBSAboveThresholdAndSampleProcessed");
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update OBS above Threshold in DB
        if(!StepUpdateDB(strQuery,strConString)){
            Returnval = false }
        else
        Log["Checkpoint"]("Reagent OBS above Threshold updated successfully in DB")
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenOBSBelowThresholdForReagent(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ReagentOBSBelowThresholdAndSampleProcessed");
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update OBS below Threshold in DB
        if(!StepUpdateDB(strQuery,strConString)){
            Returnval = false }
        else
        Log["Checkpoint"]("Reagent OBS below Threshold updated successfully in DB")
  
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenTDefTriggerOBSAboveThresholdForReagent(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,count=0;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
         //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"TestDefinition","ReagentOBSAboveThresholdAndSampleProcessed");
        var dictColumn=arrTestData[0];
        var TestName=dictColumn["Item"]("TestName")
        var TestCount = TestName.length
        
        for(i =0 ;i< TestCount ; i++)
          {       
              var TDefPath = "C:\\Siemens\\ARM\\TestDefinition\\Hydra\\"+TestName[i]+".tdef";        
              //StepDefinition - Update Threshold in TDef file
              if(!StepTDefTriggerOBSAboveThresholdForReagent(TDefPath,"StartStabilityCountingID","When_Loaded")){
                  count ++;
                 }                    
          } 
          if(count>0)
           Returnval =false;
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function WhenTestIsScheduled()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
       //Read data
       //IA 
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_Group01_GWT_02_IA");
        var dictColumnIA=arrTestDataIA[0];
        var AssayIA = dictColumnIA["Item"]("Assay")
        var ArrAssayIA=AssayIA["split"](";") ;
        var SpecimenIA = dictColumnIA["Item"]("Specimen")
        var PriorityIA = dictColumnIA["Item"]("Priority")
        var AnalyzerIA = dictColumnIA["Item"]("Analyzer")
        var SIDIA = dictColumnIA["Item"]("SampleId")
        var SampleStatusIA = dictColumnIA["Item"]("SampleStatus")
      
        //CC
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_Group01_GWT_02_CC");
        var dictColumnCC=arrTestDataCC[0];
        var AssayCC = dictColumnCC["Item"]("Assay")
        var ArrAssayCC=AssayCC["split"](";") ;
        var SpecimenCC = dictColumnCC["Item"]("Specimen")
        var PriorityCC = dictColumnCC["Item"]("Priority")
        var AnalyzerCC = dictColumnCC["Item"]("Analyzer")
        var SIDCC = dictColumnCC["Item"]("SampleId")
        var SampleStatusIA = dictColumnIA["Item"]("SampleStatus")
        
        //Create patient order- IA
        if(!StepCreatePatientOrder(SIDIA,SpecimenIA,PriorityIA,AnalyzerIA,ArrAssayIA)) 
        {
          Log["Error"]("Create IA Patient order Failed")
          Returnval = false;
        }
        //Create patient order- CC
        if(!StepCreatePatientOrder(SIDCC,SpecimenCC,PriorityCC,AnalyzerCC,ArrAssayCC)) 
        {
          Log["Error"]("Create CC Patient order Failed")
          Returnval = false;
        }
        
         //load patient order- IA
        if(!StepLoadSamples(SIDIA))
        {
            Log["Error"]("Failed to load sample-IA")
            Returnval = false;
        } 
        //load patient order-CC
        if(!StepLoadSamples(SIDCC))
        {
            Log["Error"]("Failed to load sample-CC")
            Returnval = false;
        }
        
        //CheckSampleStatus-IA
        if(!StepCheckSampleStatus(SIDIA,SampleStatusIA))
        {
            Log["Error"]("IA test is not aspirated")
            Returnval = false;
        }
        //CheckSampleStatus-CC
         if(!StepCheckSampleStatus(SIDCC,SampleStatusCC))
        {
            Log["Error"]("CC test is not aspirated")
            Returnval = false;
        }
        //return
        return Returnval            
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenIMCCAndAncillaryReagentIsLoaded()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        // Load AFP- IA reagent
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumnIA=arrTestDataIA[0];
        var TypeOfReagentIA=dictColumnIA["Item"]("ReagentType")
        var AssayIA = dictColumnIA["Item"]("ReagentName")
        // Load Alb- CC reagent
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAlbReagent");
        var dictColumnCC=arrTestDataCC[0];
        var TypeOfReagentCC=dictColumnCC["Item"]("ReagentType")
        var AssayCC = dictColumnCC["Item"]("ReagentName")
        // Load MDil2- IA Anc reagent
        var arrTestDataIAAnc = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadMDil2Reagent");
        var dictColumnIAAnc=arrTestDataIAAnc[0];
        var TypeOfReagentIAAnc=dictColumnIAAnc["Item"]("ReagentType")
        var AssayIAAnc = dictColumnIAAnc["Item"]("ReagentName")
        
        //Read data - CH Diagnostics Sequence
        arrTestDataSeqCC = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");
        dictColumnSeqCC=arrTestDataSeqCC[0];
        var MechNameSeqCC = dictColumnSeqCC["Item"]("MechanismName")
        var SeqNameSeqCC = dictColumnSeqCC["Item"]("SeqName")
        //Read data - IA Primary Diagnostics Sequence
        arrTestDataSeqIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnSeqIA=arrTestDataSeqIA[0];
        var MechNameSeqIA = dictColumnSeqIA["Item"]("MechanismName")
        var SeqNameSeqIA = dictColumnSeqIA["Item"]("SeqName")
        //Read data - IA Anc Diagnostics Sequence
        arrTestDataSeqIAAnc = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq3");
        dictColumnSeqIAAnc=arrTestDataSeqIAAnc[0];
        var MechNameSeqIAAnc = dictColumnSeqIAAnc["Item"]("MechanismName")
        var SeqNameSeqIAAnc = dictColumnSeqIAAnc["Item"]("SeqName")
        
        //Load IA Reagent 
        if(!StepReagentIsLoaded(AssayIA,TypeOfReagentIA,MechNameSeqIA,SeqNameSeqIA))
        {
          Log["Error"]("IA primary Reagent Loading Failed")
          Returnval = false;
        }        
        //Load IA Anc Reagent 
        if(!StepReagentIsLoaded(AssayIAAnc,TypeOfReagentIAAnc,MechNameSeqIAAnc,SeqNameSeqIAAnc))
        {
          Log["Error"]("IA ancillary Reagent Loading Failed")
          Returnval = false;
        } 
        //Load CC Reagent 
        if(!StepReagentIsLoaded(AssayCC,TypeOfReagentCC,MechNameSeqCC,SeqNameSeqCC))
        {
          Log["Error"]("CC Reagent Loading Failed")
          Returnval = false;
        } 
        //return
        return Returnval
             
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENOBSIsDisplayed()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
       //Read data
       //IA 
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_Group01_GWT_02_IA");
        var dictColumnIA=arrTestDataIA[0];
        var AssayIA = dictColumnIA["Item"]("Assay")
        
        //CC
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_Group01_GWT_02_CC");
        var dictColumnCC=arrTestDataCC[0];
        var AssayCC = dictColumnCC["Item"]("Assay")
       
        
        if(!StepGetReagentOBSValue(AssayIA))
        {
          Log["Error"]("OBS is not displayed for IA")
          Returnval = false;
        }
        if(!StepGetReagentOBSValue(AssayCC))
        {
          Log["Error"]("OBS is not displayed for CC")
          Returnval = false;
        }
        
        //return
        return Returnval            
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENTestProcessedSuccessfully()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
       //Read data
       //IA 
        var arrTestDataIA = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_Group01_GWT_02_IA");
        var dictColumnIA=arrTestDataIA[0];
        var SIDIA = dictColumnIA["Item"]("SampleId")
      
        //CC
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225702_Group01_GWT_02_CC");
        var dictColumnCC=arrTestDataCC[0];
        var SIDCC = dictColumnCC["Item"]("SampleId")
        
        if(!StepVerifyTestResult(SIDIA))
        {
            Log["Error"]("Failed to result sample-IA")
            Returnval = false;
        }
        if(!StepVerifyTestResult(SIDCC))
        {
            Log["Error"]("Failed to result sample-CC")
            Returnval = false;
        }
        //return
        return Returnval            
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}


function GivenReagentPackLoaded_IAPrimaryReagent_US225850()
{
  //InitializeMetaDataHYDRA();
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_IAPrimary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestDataIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumnIA=arrTestDataIA[0];
  var MechNameIA = dictColumnIA["Item"]("MechanismName")
  var SeqNameIA = dictColumnIA["Item"]("SeqName")
  var ReagentTypeIA = dictColumnIA["Item"]("ReagentType")

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,Analyzer))  // currently not using step defintion created by shahana(15Feb2019)
  {
      //Read data - IA Diagnostics Sequence   
    if(!LoadingHydraReagents("IMPrimary",MechNameIA,SeqNameIA))
      return false
      
    if(!StepOperatorNavigatesToReagentOverviewScreen)
      return false    

    if(GetReagentOBSValue(Assay))
    {
      OBSvalueBeforeUnload = OBSMinutes;
      Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
      return true
    }
  }
  else
  {
    if(GetReagentOBSValue(Assay))
    {
      OBSvalueBeforeUnload = OBSvalue;
      Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
      return true
    }
  }
  
}

function WhenReagentPackUnloadedAndReloaded_IAPrimaryReagent_US225850()
{
  //InitializeMetaDataHYDRA();
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_IAPrimary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumn =arrTestData[0];
  var MechNameIA = dictColumn["Item"]("MechanismName")
  var SeqNameIA = dictColumn["Item"]("SeqName")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!StepUnloadReagentHydra(Assay,Analyzer))
    return false
  aqUtils["Delay"](60000, "Wait for 60 seconds before reload IA reagent");
  
  // can add to verify reagents are available or not after unloading  - verify when build and workflow is stable for reagents
  return LoadingHydraReagents("IMPrimary",MechNameIA,SeqNameIA)
}

function ThenSystemTracksOBSStatusOfInitialOBSTrigger_IAPrimaryReagent_US225850()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_IAPrimary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  
  if(GetReagentOBSValue(Assay))
  {
    var OBSvalueAfterUnload = OBSMinutes;
    if((OBSvalueBeforeUnload -1) >= OBSvalueAfterUnload) // if OBS value after reloading (in minutes ) is less than or equal to before unloading regent minus wait time
      Log["Message"]("System resumes tracking OBS for that pack from time of initial OBS trigger")
      Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
      return true
  }
  else
  {
    Log["Error"]("System does not resume tracking OBS for that pack from time of initial OBS trigger")
    Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
    return false
   }
   
}

function GivenReagentPackLoaded_IAAncillaryReagent_US225850()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestDataIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumnIA=arrTestDataIA[0];
  var MechNameIA = dictColumnIA["Item"]("MechanismName")
  var SeqNameIA = dictColumnIA["Item"]("SeqName")
  var ReagentTypeIA = dictColumnIA["Item"]("ReagentType")

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,Analyzer))   // currently not using step defintion created by shahana(15Feb2019)
  {
      //Read data - IA Diagnostics Sequence   
    if(!LoadingHydraReagents("IMAncillary",MechNameIA,SeqNameIA))
      return false     
  }

  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var SampleId = dictColumn["Item"]("SampleId")
  var Priority = dictColumn["Item"]("Priority")
  var Specimen = dictColumn["Item"]("Specimen")
  var SampleStatus = dictColumn["Item"]("SampleStatus")
  
  // add navigation to patient orders screen -TO DO
  if(!StepCreatePatientOrderHydra(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  aqUtils["Delay"](50000,"Waiting for test affinities to be displayed") 
  
   //Check Test Affinities is not zero 
  if(!checkTestAffinities())   // need to put in specific library since now it is a RounTripE2E method
      return false
   
   //Check is CH Mechanism is available or not
  if(!fnCheckCHSubSystemMechanismStatus())
      return false
      
  // add step definiton to navigate samples-> Load rack ( workflow needs to be added)
  
      //Load samples through DL
  if(!StepLoadSamples(SampleId))  // need to put in Samples library since now it is a RounTripE2E method
      return false
    
  //if(!StepWaitForSampleStatus(SampleId, SampleStatus)) dont use P2 functions since controls are changed in sample list screen
  if(!StepCheckSampleStatus(SampleId, SampleStatus))   // but this function is also referring to P2 VerifySampleStatus
    return false

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!StepGetReagentOBSValue(Assay))
    return false
  
  OBSvalueBeforeUnload = OBSMinutes;
  Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
  return true

}

function WhenReagentPackUnloadedAndReloaded_IAAncillaryReagent_US225850()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumn =arrTestData[0];
  var MechNameIA = dictColumn["Item"]("MechanismName")
  var SeqNameIA = dictColumn["Item"]("SeqName")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!StepUnloadReagentHydra(Assay,Analyzer))
    return false
  aqUtils["Delay"](600000, "Wait for 60 seconds before reload IA reagent");
  
  // can add to verify reagents are available or not after unloading  - verify when build and workflow is stable for reagents 
  return LoadingHydraReagents("IMAncillary",MechNameIA,SeqNameIA) // currently not using step defintion created by shahana(15Feb2019)

}

function ThenSystemTracksOBSStatusOfInitialOBSTrigger_IAAncillaryReagent_US225850()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  
  if(!GetReagentOBSValue(Assay))
    return false
  else
  {
    var OBSvalueAfterUnload = OBSMinutes;
    if((OBSvalueBeforeUnload -1) >= OBSvalueAfterUnload) // if OBS value after reloading (in minutes ) is less than or equal to before unloading regent minus wait time
    {
      Log["Message"]("System resumes tracking OBS for that pack from time of initial OBS trigger")
      Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
      return true
    }
    else
    {
      Log["Error"]("System does not resume tracking OBS for that pack from time of initial OBS trigger")
      Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
      return false
    }
  }
  
}

function GivenReagentPackLoaded_CCReagent_US225850()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_CC");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumn =arrTestData[0];
  var MechNameCC = dictColumn["Item"]("MechanismName")
  var SeqNameCC = dictColumn["Item"]("SeqName")
  var ReagentTypeCC = dictColumn["Item"]("ReagentType")

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,Analyzer))  // currently not using step defintion created by shahana(15Feb2019)
  {
      //Read data - IA Diagnostics Sequence   
    if(!LoadingHydraReagents(ReagentTypeCC,MechNameCC,SeqNameCC))
      return false     
  }

  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_CC");
  dictColumn = arrTestData[0];
  var SampleId = dictColumn["Item"]("SampleId")
  var Priority = dictColumn["Item"]("Priority")
  var Specimen = dictColumn["Item"]("Specimen")
  var SampleStatus = dictColumn["Item"]("SampleStatus")
  
  // add navigation to patient orders screen -TO DO
  if(!StepCreatePatientOrderHydra(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  aqUtils["Delay"](50000,"Waiting for test affinities to be displayed") 
  
   //Check Test Affinities is not zero 
  if(!checkTestAffinities())   // need to put in specific library since now it is a RounTripE2E method
      return false
   
   //Check is CH Mechanism is available or not
  if(!fnCheckCHSubSystemMechanismStatus())
      return false
      
  // add step definiton to navigate samples-> Load rack ( workflow needs to be added)
  
      //Load samples through DL
  if(!StepLoadSamples(SampleId))  // need to put in Samples library since now it is a RounTripE2E method
      return false
    
  //if(!StepWaitForSampleStatus(SampleId, SampleStatus)) dont use P2 functions since controls are changed in sample list screen
  if(!StepCheckSampleStatus(SampleId, SampleStatus))   // but this function is also referring to P2 VerifySampleStatus
    return false

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!StepGetReagentOBSValue(Assay))
    return false
    
  OBSvalueBeforeUnload = OBSMinutes;
  Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes)
  return true

}

function WhenReagentPackUnloadedAndReloaded_CCReagent_US225850()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_CC");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumn =arrTestData[0];
  var MechNameCC = dictColumn["Item"]("MechanismName")
  var SeqNameCC = dictColumn["Item"]("SeqName")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!StepUnloadReagentHydra(Assay,Analyzer))
    return false
  aqUtils["Delay"](600000, "Wait for 60 seconds before reload IA reagent");
  
  // can add to verify reagents are available or not after unloading  - verify when build and workflow is stable for reagents
  return LoadingHydraReagents("CH",MechNameCC,SeqNameCC) // currently not using step defintion created by shahana

}

function ThenSystemTracksOBSStatusOfInitialOBSTrigger_CCReagent_US225850()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225850_GWT_01_CC");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  
  if(!GetReagentOBSValue(Assay))
    return false
  else
  {
    var OBSvalueAfterUnload = OBSMinutes;
    if((OBSvalueBeforeUnload -1) >= OBSvalueAfterUnload) // if OBS value after reloading (in minutes ) is less than or equal to before unloading regent minus wait time
    {
      Log["Message"]("System resumes tracking OBS for that pack from time of initial OBS trigger");
      Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes);
      return true
    }
    else
    {
      Log["Error"]("System does not resume tracking OBS for that pack from time of initial OBS trigger");
      Log["Message"]("OBS minutes integer value in reagent grid for reagent " + Assay + "is : " + OBSMinutes);
      return false
    }
  }

}


function GivenReagentPackLoaded_IAPrimaryReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US225851_GWT_01_IAPrimary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("ReagentName")
  
  arrTestDataIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumnIA=arrTestDataIA[0];
  var MechNameIA = dictColumnIA["Item"]("MechanismName")
  var SeqNameIA = dictColumnIA["Item"]("SeqName")
  var ReagentTypeIA = dictColumnIA["Item"]("ReagentType")

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,"HYDRA"))
      //Read data - IA Diagnostics Sequence   
    return LoadingHydraReagents(ReagentTypeIA,MechNameIA,SeqNameIA)
  else
    return true

}

function WhenUserEditsOBS_IAPrimaryReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US225851_GWT_01_IAPrimary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("ReagentName")
  var OBSDaysToModify = dictColumn["Item"]("OBSDaysToModify")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!GetReagentOBSValue(Assay))
    return false
  if(!GetOBSFromReagentDetails(Assay))
    return false
  return EditOBSInReagentDetails(Assay,OBSDaysToModify)
}

function ThenSystemTracksOBSUsingAdjustedData_IAPrimaryReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US225851_GWT_01_IAPrimary");
  dictColumn = arrTestData[0];
  var OBSDaysToModify = dictColumn["Item"]("OBSDaysToModify")
  
 return SystemTrackingOBSOnAdjustingManualData(OBSDaysToModify)

}

function GivenReagentPackLoaded_IAAncillaryReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225851_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestDataIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumnIA=arrTestDataIA[0];
  var MechNameIA = dictColumnIA["Item"]("MechanismName")
  var SeqNameIA = dictColumnIA["Item"]("SeqName")
  var ReagentTypeIA = dictColumnIA["Item"]("ReagentType")

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,Analyzer))
  {
      //Read data - IA Diagnostics Sequence   
    if(!LoadingHydraReagents(ReagentTypeIA,MechNameIA,SeqNameIA))
      return false
  }
    
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225851_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var SampleId = dictColumn["Item"]("SampleId")
  var Priority = dictColumn["Item"]("Priority")
  var Specimen = dictColumn["Item"]("Specimen")
  var SampleStatus = dictColumn["Item"]("SampleStatus")
  
  // add navigation to patient orders screen-TO DO
  if(!StepCreatePatientOrderHydra(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  aqUtils["Delay"](50000,"Waiting for test affinities to be displayed") 
  
   //Check Test Affinities is not zero 
  if(!checkTestAffinities())   // need to put in specific library since now it is a RounTripE2E method
      return false
   
   //Check is CH Mechanism is available or not
  if(!fnCheckCHSubSystemMechanismStatus())
      return false
      
  // add step definiton to navigate samples-> Load rack ( workflow needs to be added)
  
      //Load samples through DL
  if(!StepLoadSamples(SampleId))  // need to put in Samples library since now it is a RounTripE2E method
      return false
    
  //if(!StepWaitForSampleStatus(SampleId, SampleStatus)) dont use P2 functions since controls are changed in sample list screen
  return StepCheckSampleStatus(SampleId, SampleStatus)  // but this function is also referring to P2 VerifySampleStatus

}

function WhenUserEditsOBS_IAAncillaryReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US225851_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("ReagentName")
  var OBSDaysToModify = dictColumn["Item"]("OBSDaysToModify")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!GetReagentOBSValue(Assay))
    return false
  if(!GetOBSFromReagentDetails(Assay))
    return false
  return EditOBSInReagentDetails(Assay,OBSDaysToModify)
}

function ThenSystemTracksOBSUsingAdjustedData_IAAncillaryReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US225851_GWT_01_IAAncillary");
  dictColumn = arrTestData[0];
  var OBSDaysToModify = dictColumn["Item"]("OBSDaysToModify")
  
 return SystemTrackingOBSOnAdjustingManualData(OBSDaysToModify)

}

function GivenReagentPackLoaded_CCReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225851_GWT_01_CC");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("Assay")
  var Analyzer = dictColumn["Item"]("Analyzer")
  
  arrTestDataIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
  dictColumnIA=arrTestDataIA[0];
  var MechNameIA = dictColumnIA["Item"]("MechanismName")
  var SeqNameIA = dictColumnIA["Item"]("SeqName")
  var ReagentTypeIA = dictColumnIA["Item"]("ReagentType")

  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,Analyzer))
  {
      //Read data - IA Diagnostics Sequence   
    if(!LoadingHydraReagents(ReagentTypeIA,MechNameIA,SeqNameIA))
      return false
  }
    
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US225851_GWT_01_CC");
  dictColumn = arrTestData[0];
  var SampleId = dictColumn["Item"]("SampleId")
  var Priority = dictColumn["Item"]("Priority")
  var Specimen = dictColumn["Item"]("Specimen")
  var SampleStatus = dictColumn["Item"]("SampleStatus")

  // add navigation to patient orders screen-TO DO
  if(!StepCreatePatientOrderHydra(Assay, SampleId, Specimen, Analyzer, Priority))
    return false;
  
  aqUtils["Delay"](50000,"Waiting for test affinities to be displayed") 
  
   //Check Test Affinities is not zero 
  if(!checkTestAffinities())   // need to put in specific library since now it is a RounTripE2E method
      return false
   
   //Check is CH Mechanism is available or not
  if(!fnCheckCHSubSystemMechanismStatus())
      return false
      
  // add step definiton to navigate samples-> Load rack ( workflow needs to be added)
  
      //Load samples through DL
  if(!StepLoadSamples(SampleId))  // need to put in Samples library since now it is a RounTripE2E method
      return false
    
  //if(!StepWaitForSampleStatus(SampleId, SampleStatus)) dont use P2 functions since controls are changed in sample list screen
  return StepCheckSampleStatus(SampleId, SampleStatus)  // but this function is also referring to P2 VerifySampleStatus

}

function WhenUserEditsOBS_CCReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US225851_GWT_01_CC");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("ReagentName")
  var OBSDaysToModify = dictColumn["Item"]("OBSDaysToModify")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!GetReagentOBSValue(Assay))
    return false
  if(!GetOBSFromReagentDetails(Assay))
    return false
  return EditOBSInReagentDetails(Assay,OBSDaysToModify)
}

function ThenSystemTracksOBSUsingAdjustedData_CCReagent_US225851()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US225851_GWT_01_CC");
  dictColumn = arrTestData[0];
  var OBSDaysToModify = dictColumn["Item"]("OBSDaysToModify")
  
 return SystemTrackingOBSOnAdjustingManualData(OBSDaysToModify)

}

//******************************************************************
//         FEATURE : 225699 - Expired Reagent Usage
//******************************************************************
function GivenCHReagentIsLoaded()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
//        //Initialize XMLs
//        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAlbReagent");
        var dictColumn=arrTestData2[0];
        var TypeOfReagent=dictColumn["Item"]("ReagentType")
        var Assay = dictColumn["Item"]("ReagentName")
        
        //Read data - CH Diagnostics Sequence
        arrTestDataCC = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");
        dictColumnCC=arrTestDataCC[0];
        var MechNameCC = dictColumnCC["Item"]("MechanismName")
        var SeqNameCC = dictColumnCC["Item"]("SeqName")
        
        if(!StepReagentIsLoaded(Assay,TypeOfReagent,MechNameCC,SeqNameCC))
        {
          Log["Error"]("CC Reagent Loading Failed")
          Returnval = false;
        }  
        
      var HydraStatus=GetModuleStatusRT("Hydra");
      if (HydraStatus=="Stopped")
      {
        //Start Hydra Module
        ClickOnStartButtonHydra();
        
        //Adding delay
        aqUtils["Delay"](60000,"Waiting for modules status from Stop - Ready")
      }
      
      //Checking Module status
      if(!CheckModuleStatus())
      {
        Log["Error"]("Module Status Verification Failed")
        Returnval = false;
      }      
        
      //return
      return Returnval
             
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function WhenWorkOrderCreated()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_Group04_GWT_02");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var ArrAssay1=Assay1["split"](";") ;
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
      
        //Create patient order
        if(!StepCreatePatientOrder(SID1,Specimen1,Priority1,Analyzer1,ArrAssay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          Returnval = false;
        }
        
        //return
        return Returnval            
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function WhenExpireCHReagentPack()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Update DB - Expire reagent lot")
        
        //Read data 
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ExpireAlbReagentLotDate");
        dictColumn=arrTestData[0];
        strQuery1 = dictColumn["Item"]("Query")
        strConString2 = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        //update DB
        if(!StepUpdateDB(strQuery1,strConString2)) 
        {
          Log["Error"]("DB update for lot expiration Failed")
          Returnval = false;
        }
        if(Returnval==true)
        {
          Log["Checkpoint"]("Sucessfully updated Lot expiration date in DB");
        }
        
        //Restarting Hydra
        if(!InitializeHydra())
        {
          Log["Error"]("Failed to restart hydra");
        }
        
        //return
        Log["PopLogFolder"]();
        return Returnval;  
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenCHReagentPackExpired()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Checking reagent is expired or not...")
        
        //Read data  
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAlbReagent");
        var dictColumn=arrTestData[0];
        var ReagentName = dictColumn["Item"]("ReagentName")
        var Status="Lot expired"
        
        //check reagent status
        if(!StepCHLotExpired(ReagentName,Status))
        {
          Returnval = false;
        }
        //return
        Log["PopLogFolder"]();
        return Returnval;  
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenPatientOrderShouldNotGetProcessed()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Processing patient order..");
        
        //Read data  
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_Group04_GWT_02");
        var dictColumn=arrTestData[0];
        var SID = dictColumn["Item"]("SampleId")
        var SampleStatus=dictColumn["Item"]("SampleStatus")
        
        //load patient order
        if(!StepLoadSamples(SID))
        {
            Log["Error"]("Failed to process sample")
            Returnval = false;
        }
        
        //check status of sample in sample list
        if(!StepCheckSampleStatus(SID,SampleStatus))
        {
            Log["Error"]("Failed to process sample")
            Returnval = false;
        }

        //check status of sample result in work list screen
        if(!StepVerifyTestResult(SID))
        {
            Log["Error"]("Failed to result sample")
            Returnval = false;
        }

        //return
        Log["PopLogFolder"]();
        return Returnval;
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenCHWorkOrderScheduled()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Processing patient order..");
        
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_Group04_GWT_01");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var ArrAssay1=Assay1["split"](";") ;
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
      
        //Create patient order
        if(!StepCreatePatientOrder(SID1,Specimen1,Priority1,Analyzer1,ArrAssay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          Returnval = false;
        }
        
        //load patient order
        if(!StepLoadSamples(SID))
        {
            Log["Error"]("Failed to load sample")
            Returnval = false;
        }
        //return
        Log["PopLogFolder"]();
        return Returnval;
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenPatientOrderShouldGetProcessed()
{
  try
  {
         //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Processing patient order..");
        
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_Group04_GWT_01");
        var dictColumn=arrTestData[0];
        var SID = dictColumn["Item"]("SampleId")
        
        //check status of sample in sample list
        if(!StepCheckSampleStatus(SID,SampleStatus))
        {
            Log["Error"]("Failed to process sample")
            Returnval = false;
        }
        
        //check status of sample result in work list screen
        if(!StepVerifyTestResult(SID))
        {
            Log["Error"]("Failed to result sample")
            Returnval = false;
        }

        //return
        Log["PopLogFolder"]();
        return Returnval;
  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  } 
}

function GivenIMReagentIsLoaded()
{
  try
  {
         //Initialize Variables
        var Returnval = true;
        
        //Read Test data - IM Primary
        var arrTestDataPriR = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumnPriR=arrTestDataPriR[0];
        var TypeOfReagentPri=dictColumnPriR["Item"]("ReagentType")
        var AssayPri = dictColumnPriR["Item"]("ReagentName")
        
        //Read data - IM Primary Diagnostics Sequence
        arrTestDataPri = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnPri=arrTestDataPri[0];
        var MechNamePri = dictColumnPri["Item"]("MechanismName")
        var SeqNamePri = dictColumnPri["Item"]("SeqName")
        
        //Read Test data - IM Ancillary
        var arrTestDataAncR = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadMDil2Reagent");
        var dictColumnAncR=arrTestDataAncR[0];
        var TypeOfReagentAnc=dictColumnAncR["Item"]("ReagentType")
        var AssayAnc = dictColumnAncR["Item"]("ReagentName")
        
        //Read data - IM Ancillary Diagnostics Sequence
        arrTestDataAnc = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnAnc=arrTestDataAnc[0];
        var MechNameAnc = dictColumnAnc["Item"]("MechanismName")
        var SeqNameAnc = dictColumnAnc["Item"]("SeqName")
        
        if(!StepReagentIsLoaded(AssayPri,TypeOfReagentPri,MechNamePri,SeqNamePri))
        {
          Log["Error"]("IM Primary Reagent Loading Failed")
          Returnval = false;
        }  
        
        if(!StepReagentIsLoaded(AssayAnc,TypeOfReagentAnc,MechNameAnc,SeqNameAnc))
        {
          Log["Error"]("IM Ancillary Reagent Loading Failed")
          Returnval = false;
        } 
        
        var HydraStatus=GetModuleStatusRT("Hydra");
        if (HydraStatus=="Stopped")
        {
          //Start Hydra Module
          ClickOnStartButtonHydra();
        
          //Adding delay
          aqUtils["Delay"](60000,"Waiting for modules status from Stop - Ready")
        }
      
        //Checking Module status
        if(!CheckModuleStatus())
        {
          Log["Error"]("Module Status Verification Failed")
          Returnval = false;
        } 
        
        //return
        Log["PopLogFolder"]();
        return Returnval;
  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  } 
}
function WhenExpireIMReagentPack()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        var ReturnvalP = true;
        var ReturnvalA = true;
        
        //Log message
        Log["AppendFolder"]("Update DB - Expire IM reagent lot")
        
        //Read data - IM primary
        arrTestDataP = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ExpireAFPReagentLotDate");
        dictColumnP=arrTestDataP[0];
        strQueryP = dictColumnP["Item"]("Query")
        strConStringP = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        //Read data - IM Ancillary
        arrTestDataA = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ExpireMDil2ReagentLotDate");
        dictColumnA=arrTestDataA[0];
        strQueryA = dictColumnA["Item"]("Query")
        strConStringA = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        //update DB - Primary
        if(!StepUpdateDB(strQueryP,strConStringP)) 
        {
          Log["Error"]("DB update for lot expiration Failed")
          ReturnvalP = false;
        }
        
        //update DB - Ancillary
        if(!StepUpdateDB(strQueryA,strConStringA)) 
        {
          Log["Error"]("DB update for lot expiration Failed")
          ReturnvalA = false;
        }
        
        if(ReturnvalP == true && ReturnvalA == true)
        {
          Log["Checkpoint"]("Sucessfully updated Lot expiration date in DB");
          Returnval=true;
        }
        else
        {
          Returnval=false;
          return Returnval;
        }
        
        //Restarting Hydra
        if(!InitializeHydra())
        {
          Log["Error"]("Failed to restart hydra");
        }
        
        //return
        Log["PopLogFolder"]();
        return Returnval;  
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}
function ThenIMReagentPackExpired()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        var ReturnvalP = true;
        var ReturnvalA = true;
        
        //Log message
        Log["AppendFolder"]("Checking reagent is expired or not...")
        
        //Read data - IA Primary 
        var arrTestDataP = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumnP=arrTestDataP[0];
        var ReagentNameP = dictColumnP["Item"]("ReagentName");
        var Status="Lot expired";
        
        //Read data - IA Ancillary 
        var arrTestDataA = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadMDil2Reagent");
        var dictColumnA=arrTestDataA[0];
        var ReagentNameA = dictColumnA["Item"]("ReagentName");
        var Status="Lot expired";
        
        //check reagent status - primary
        if(!StepIMLotExpired(ReagentNameP,Status))
        {
          ReturnvalP = false;
        }
        
        //check reagent status - ancillary
        if(!StepIMLotExpired(ReagentNameA,Status))
        {
          ReturnvalA = false;
        }
        
        if(ReturnvalP == true && ReturnvalA == true)
        {
          Log["Checkpoint"]("Reagent expired status shown correctly");
          Returnval=true;
        }
        else
        {
          Returnval=false;
          return Returnval;
        }
        
        //return
        Log["PopLogFolder"]();
        return Returnval;  
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenIMWorkOrderScheduled()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Processing patient order..");
        
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_Group04_GWT_03");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var ArrAssay1=Assay1["split"](";") ;
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
      
        //Create patient order
        if(!StepCreatePatientOrder(SID1,Specimen1,Priority1,Analyzer1,ArrAssay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          Returnval = false;
        }
        
        //load patient order
        if(!StepLoadSamples(SID))
        {
            Log["Error"]("Failed to load sample")
            Returnval = false;
        }
        //return
        Log["PopLogFolder"]();
        return Returnval;
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenIMPatientOrderShouldGetProcessed()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Processing patient order..");
        
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_Group04_GWT_03");
        var dictColumn=arrTestData[0];
        var SID = dictColumn["Item"]("SampleId")
        
        //check status of sample in sample list
        if(!StepCheckSampleStatus(SID,SampleStatus))
        {
            Log["Error"]("Failed to process sample")
            Returnval = false;
        }
        
        //check status of sample result in work list screen
        if(!StepVerifyTestResult(SID))
        {
            Log["Error"]("Failed to result sample")
            Returnval = false;
        }

        //return
        Log["PopLogFolder"]();
        return Returnval;
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenIMPrimaryAncillaryreagentPacksloaded()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPReagent");
        var dictColumn=arrTestData[0];
        var TypeOfReagent=dictColumn["Item"]("ReagentType")
        var Assay = dictColumn["Item"]("ReagentName")
        
        //Read data - IM Diagnostics Sequence
        arrTestDataIM = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
        dictColumnIM  = arrTestDataIM[0];
        var MechNameIM= dictColumnIM["Item"]("MechanismName")
        var SeqNameIM = dictColumnIM["Item"]("SeqName")
        
        
        //Read Test data
        var arrTestData1 = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadMDil2Reagent");
        var dictColumn1=arrTestData1[0];
        var TypeOfReagent1=dictColumn1["Item"]("ReagentType")
        var Assay1 = dictColumn1["Item"]("ReagentName")
        
        //Read data - IM Ancillary Diagnostics Sequence
        arrTestDataAnc = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq3");
        dictColumnAnc  = arrTestDataAnc[0];
        var MechNameAnc= dictColumnAnc["Item"]("MechanismName")
        var SeqNameAnc = dictColumnAnc["Item"]("SeqName")
        
        
        if(!StepReagentIsLoaded(Assay,TypeOfReagent,MechNameIM,SeqNameIM))
        {
          Log["Error"]("IM Reagent Loading Failed")
          Returnval = false;
        }  
        
           if(!StepReagentIsLoaded(Assay1,TypeOfReagent1,MechNameAnc,SeqNameAnc))
        {
          Log["Error"]("IM Ancillary Reagent Loading Failed")
          Returnval = false;
        }
        
      var HydraStatus=GetModuleStatusRT("Hydra");
      if (HydraStatus=="Stopped")
      {
        //Start Hydra Module
        ClickOnStartButtonHydra();
        
        //Adding delay
        aqUtils["Delay"](60000,"Waiting for modules status from Stop - Ready")
      }
      
      //Checking Module status
      if(!CheckModuleStatus())
      {
        Log["Error"]("Module Status Verification Failed")
        Returnval = false;
      }      
        
      //return
      return Returnval
             
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}
function GivenWorkorderisnotscheduled_05()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
    
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_GROUP01_GWT_05");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var ArrAssay1=Assay1["split"](";") ;
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
      
        //Create patient order
        if(!StepCreatePatientOrder(SID1,Specimen1,Priority1,Analyzer1,ArrAssay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          Returnval = false;
        }
        
        //return
        return Returnval            
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}
function GivenWorkorderisnotscheduled_06()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
    
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","FT225699_GROUP01_GWT_06");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var ArrAssay1=Assay1["split"](";") ;
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
      
        //Create patient order
        if(!StepCreatePatientOrder(SID1,Specimen1,Priority1,Analyzer1,ArrAssay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          Returnval = false;
        }
        
        //return
        return Returnval            
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}
function WHENAllreagentpacksareexpired()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Update DB - Expire reagent lot")
        
        //Read data 
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ExpireAFPReagentLotDate");
        dictColumn=arrTestData[0];
        arrTestData11 = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ExpireMDilReagentLotDate");
        dictColumn=arrTestData1[0];
        strQuery1 = dictColumn["Item"]("Query")
        strConString2 = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        //update DB
        if(!StepUpdateDB(strQuery1,strConString2)) 
        {
          Log["Error"]("DB update for lot expiration Failed")
          Returnval = false;
        }
        if(Returnval==true)
        {
          Log["Checkpoint"]("Sucessfully updated Lot expiration date in DB");
        }
        
        //Restarting Hydra
        if(!InitializeHydra())
        {
          Log["Error"]("Failed to restart hydra");
        }
        
        //return
        Log["PopLogFolder"]();
        return Returnval;  
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function WHENAtleastonereagentpackisexpired()
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Update DB - Expire reagent lot")
        
        //Read data 
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ExpireAFPReagentLotDate");
        dictColumn=arrTestData[0];
        strQuery1 = dictColumn["Item"]("Query")
        strConString2 = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        //update DB
        if(!StepUpdateDB(strQuery1,strConString2)) 
        {
          Log["Error"]("DB update for lot expiration Failed")
          Returnval = false;
        }
        if(Returnval==true)
        {
          Log["Checkpoint"]("Sucessfully updated Lot expiration date in DB");
        }
        
        //Restarting Hydra
        if(!InitializeHydra())
        {
          Log["Error"]("Failed to restart hydra");
        }
        
        //return
        Log["PopLogFolder"]();
        return Returnval;  
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENReagentShouldGetFlaggedAsNoConsumablesOrNoPrimary()
{
    try
    {
        InitializeMetaDataHYDRA();
        var SID="Sample01"
        var SampleStatus="No Primary"
        StepVerifyTestResult(SID)
        //return
        Log["PopLogFolder"]();
        return Returnval;
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}


function THENPatientorderprocessedwithexpiredReagent()
{
    try
    {
        InitializeMetaDataHYDRA();
        var SID="Sample01"
        var SampleStatus="No Primary"
        StepVerifyTestResult(SID)
        //return
        Log["PopLogFolder"]();
        return Returnval;
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENReagentPackIsDisplayedasLotAExpired(){
    try
    {   
        //Initialize Variables
        var Returnval = true;
        var res;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
         //Read data
       // var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","DisplayReagentRemaining");
        //dataCount = arrTestData.length

        //StepDefinition -Iterate for all Reagent types
        for(i =0 ;i<dataCount ; i++){
            dictColumn=arrTestData[i];
            //res =StepVerifyDisplayReagentRemaining(dictColumn["Item"]("ReagentName"),dictColumn["Item"]("ReagentType"),dictColumn["Item"]("InventoryUnit"))
            // We need to edit it once the functionality is ready
             res =StepVerifyLotExpired(dictColumn["Item"]("ReagentName"),dictColumn["Item"]("ReagentType"),dictColumn["Item"]("InventoryUnit"))
            if(!res){
                Returnval =false}
        }     
         
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function WhenCHReagentPackLoaded()
{
  try{
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
      
        //Read Test data      
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAlbReagent");
        var dictColumnCC=arrTestDataCC[0];
        var TypeOfReagentCC=dictColumnCC["Item"]("ReagentType")
        var AssayCC = dictColumnCC["Item"]("ReagentName")
        
        //Read data - CH Diagnostics Sequence
        arrTestDataSeqCC = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");
        dictColumnSeqCC=arrTestDataSeqCC[0];
        var MechNameSeqCC = dictColumnSeqCC["Item"]("MechanismName")
        var SeqNameSeqCC = dictColumnSeqCC["Item"]("SeqName")

        //Load CC Reagent 
            if(!StepReagentIsLoaded(AssayCC,TypeOfReagentCC,MechNameSeqCC,SeqNameSeqCC))
            {
              Log["Error"]("CC Reagent Loading Failed")
              Returnval = false;
            }
            
            if(!StepResumeHydraToReady())
            Returnval = false;
            //return
            return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}

function ThenCCReagentPackLoadedIntoCompartment()
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
      
        //Read Test data      
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","Load6AMReagent");  //LoadAlbReagent
        var dictColumn=arrTestData[0];
        var Barcode=dictColumn["Item"]("Barcode")
        var Assay = dictColumn["Item"]("ReagentName")
        
         if(!StepNavigateToReagentLoader())
            return false

            if(!StepCheckReagentPackLoadedIntoCompartment(Assay,Barcode)) 
            {
              Returnval = false;
            } 
            //return
            return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}

function GivenHydraInReadyState()
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();

        if(!StepNavigateToSystemStatus())
          false;
          
        //Checking Module status
        if(!StepCheckModuleStatusHydra())
        {
          Log["Error"]("Hydra is not in Ready state")
          Returnval = false;
        }    
              //return
        return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}

function GivenCHReagentPackNotInUse()
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        //Read Test data      
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","Load6AMReagent");  //LoadAlbReagent
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")

     if(!StepOperatorNavigatesToReagentOverviewScreen())
        return false;
      
      if(!StepVerifyReagentPackNotInUse(Assay))
        return false;    
        
            //return
      return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}

function GivenCHDrawerCapacityNotFull()
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        if(!StepNavigateToReagentLoader())
                return false
     
         if(!StepVerifyCHDrawerCapacityNotFull())
            return false;  
        
         //return
         return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}
  
function WhenOperatorRequestToUnloadCHReagent()
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","Load6AMReagent");   //LoadAlbReagent
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Analyzer = "HYDRA";
        
          if(!StepOperatorNavigatesToReagentOverviewScreen)
            return false
    
          if(!StepUnloadReagentHydra(Assay,Analyzer))
            return false
          aqUtils["Delay"](60000, "Wait for 60 seconds before reload CH reagent");
         
         //return
         return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}

function ThenCHReagentPackUnloadedToDrawer()
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","Load6AMReagent");  //LoadAlbReagent
        var dictColumn=arrTestData[0];
        var Barcode=dictColumn["Item"]("Barcode")
        var Assay = dictColumn["Item"]("ReagentName")
        
        if(!StepNavigateToReagentLoader())
          return false
    
        if(!StepfnUnloadCHReagentToDrawer(Assay,Barcode))           
          return false
         else{
           Log["Checkpoint"](Assay+" reagent is unloaded from Compartment to Drawer");
           return true;
         }
         //return
         return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}
function WhenLoadedCHReagentPackIsExpired()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","Load6AMReagent");  //LoadAlbReagent
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode=dictColumn["Item"]("Barcode")  
        
        arrTestData1 = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","ExpireCHReagentLot");
        dictColumn1=arrTestData1[0];
        strQuery = dictColumn1["Item"]("Query")
        QueryModified = aqString["Replace"](strQuery, "$Barcode", "'"+Barcode+"'", false)
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update reagent Lot expired in DB
        if(!StepUpdateDB(QueryModified,strConString)){
            Returnval = false }
        else
        Log["Checkpoint"](Assay+" reagent Lot expired - updated successfully in DB")
        
        //Restarting Hydra to reflectDB changes
        if(!InitializeHydra())
          return false;
        
        //return 
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function WhenLoadEmptyCHReagentPackPreviouslyUsed()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","Load6AMReagent");  //LoadAlbReagent
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode=dictColumn["Item"]("Barcode")  
        
        arrTestData1 = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","EmptyCHReagent");
        dictColumn1=arrTestData1[0];
        strQuery = dictColumn1["Item"]("Query")
        QueryModified = aqString["Replace"](strQuery, "$Barcode", "'"+Barcode+"'", false)
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
        
        //StepDefinition - Reagent loaded into Module
        if(!WhenCHReagentPackLoaded())
          return false;
          
        //StepDefinition - Unload CH reagent
        if(!WhenOperatorRequestToUnloadCHReagent())
          return false;
        
        //StepDefinition - Update reagent is empty and not expired 
        if(!StepUpdateDB(QueryModified,strConString)){
            Returnval = false }
        else
        Log["Checkpoint"](Assay+" reagent is empty and not expired - updated successfully in DB")
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenModuleRejectsLoadingIntoCompartment()
{
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","Load6AMReagent");  //LoadAlbReagent
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode=dictColumn["Item"]("Barcode")  
    
         //StepDefinition - Reagent not loaded into Module
        if(!WhenCHReagentPackLoaded()){
            Log["Checkpoint"](Assay+" reagent not loaded into Module since reagent inventory is empty")
            return true;
        }else
        return false;
        
        if(!StepNavigateToReagentLoader())
          return false
        
        //StepDefinition - Reagent not loaded into compartment from the drawer
        if(!StepfnUnloadCHReagentToDrawer(Assay,Barcode))           
          return false
         else{
           Log["Checkpoint"]("Module rejects loading of the "+Assay+" reagent in the compartment from the drawer");
           return true;
         }
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function GivenIAPrimaryReagenLoadedForUnusableDead()
{      
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","FT_225700_GWT08_IAErrors");
  dictColumn = arrTestData[0];
  var ReagentBarcode = dictColumn["Item"]("ReagentBarcode")
  var arrReagentBarcode = ReagentBarcode["split"](";")
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");//IA Primary barcodes
  dictColumn = arrTestData[0];
  var MechName = dictColumn["Item"]("MechanismName")
  var SeqName = dictColumn["Item"]("SeqName")
  var ReagentType = dictColumn["Item"]("ReagentType")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,Analyzer))//change logic for unique barcode based on sequence no and lot no and write a new method
  {
      //Read data - IA Diagnostics Sequence   
    if(!StepLoadReagentBarcodes(ReagentType,MechName,SeqName,arrReagentBarcode))
      return false;
  }
}

function WhenIAReagentUnusable()
{
  // run the DB query to make inventory count 0 and restart shell to see changes
  var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
  
  arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","FT_225700_GWT08_IAErrors");
  dictColumn = arrTestData[0];
  var strQuery = dictColumn["Item"]("Query")
  
  var queryfailcount = 0;
  //update DB for empty inventory
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for empty depleted reagent")
    queryfailcount=queryfailcount+1;
  }
        
  var strQuery = dictColumn["Item"]("Query2")
  //update DB for OBS expired
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for OBS expired for IA reagent")
    queryfailcount=queryfailcount+1;
  }
  
  
  var strQuery = dictColumn["Item"]("Query3")
  //update DB for Lot Expire
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for Lot expire")
    queryfailcount = queryfailcount+1;
  }
  
  var strQuery = dictColumn["Item"]("Query4")
  //update DB for Temperature error
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for Temperature error of a reagent")
    queryfailcount=queryfailcount+1;
  }
  
  var strQuery = dictColumn["Item"]("Query5")
  //update DB for Contaminated
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for contaminated reagent")
    queryfailcount=queryfailcount+1;
  }
  
// for duplicate error already done whileloading reagents - added two samebarcodes 

  //Restarting Hydra
  return InitializeHydra()
  
}

function ThenIAReagentDetailsForErrorAndFlag()
{
  InitializeMetaDataHYDRA();
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","FT_225700_GWT08_IAErrors");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("ReagentName")
  var LotNo = dictColumn["Item"]("LotNo")
  
  var ReagentEmptyErrorInfo = dictColumn["Item"]("ReagentEmptyErrorInfo")
  var arrReagentEmptyErrorInfo = ReagentEmptyErrorInfo["split"](";")
  var SequenceNo = arrReagentEmptyErrorInfo[0]// last 6 digits of barcode
  
  var errorflag =0;
  if(!StepVerifyReagentPackErrorIconMessage(Assay,"HYDRA",arrReagentEmptyErrorInfo[1],SequenceNo,LotNo))
  {
    Log["Error"]("Empty depleted reagent flag is not shown as expected")
    errorflag =errorflag -1;
  }
  
  //-- TO DO- no error for OBS expired yet shown on UI--waiting for build
  //-- TO DO- no error for Lot expired yet shown on UI--waiting for build
  //-- TO DO- add method to verify pack status for permanent temperature error - verify status in reagent details grid 
  
  var ReagentDuplicateErrorInfoReagentContaminatedErrorInfo = dictColumn["Item"]("ReagentContaminatedErrorInfo")
  var arrReagentContaminatedErrorInfo = ReagentContaminatedErrorInfo["split"](";")
  var SequenceNo = arrReagentContaminatedErrorInfo[0]// last 6 digits of barcode
  
  if(!StepVerifyReagentPackErrorIconMessage(Assay,"HYDRA",arrReagentEmptyErrorInfo[1],SequenceNo,LotNo))
  {
    Log["Error"]("Contaminated reagent flag is not shown as expected")
    errorflag =errorflag -1;
  }
  //-- TO DO- add method to verify pack status for contaminated error - verify status in reagent details grid
  
  var ReagentDuplicateErrorInfo = dictColumn["Item"]("ReagentDuplicateErrorInfo")
  var arrReagentDuplicateErrorInfo = ReagentDuplicateErrorInfo["split"](";")
  var SequenceNo = arrReagentDuplicateErrorInfo[0]// last 6 digits of barcode
  
  if(!StepVerifyReagentPackErrorIconMessage(Assay,"HYDRA",arrReagentDuplicateErrorInfo[1],SequenceNo,LotNo))
  {
    Log["Error"]("Duplicate reagent flag is not shown as expected")
    errorflag =errorflag -1;
  }
  //-- TO DO- add method to verify pack status for duplicate barcode - verify status in reagent details grid
  if(errorflag<0)
  {
    Log["Message"]("Fail")
    return false;
   }
   else
   {
    Log["Message"]("Pass")
    return true;
   }
  
}

function GivenCCReagenLoadedForUnusableDead()
{      
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","FT_225700_GWT08_CCErrors");
  dictColumn = arrTestData[0];
  var ReagentBarcode = dictColumn["Item"]("ReagentBarcode")
  var arrReagentBarcode = ReagentBarcode["split"](";")
  
  arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");//CC barcodes
  dictColumn = arrTestData[0];
  var MechName = dictColumn["Item"]("MechanismName")
  var SeqName = dictColumn["Item"]("SeqName")
  var ReagentType = dictColumn["Item"]("ReagentType")
  
  if(!StepOperatorNavigatesToReagentOverviewScreen)
    return false
    
  if(!VerifyReagentLoaded(Assay,Analyzer))//change logic for unique barcode based on sequence no and lot no
  {
      //Read data - IA Diagnostics Sequence   
    return StepLoadReagentBarcodes(ReagentType,MechName,SeqName,arrReagentBarcode)
  }
  return true;

}

function WhenCCReagentUnusable()
{
  var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
  
  arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","FT_225700_GWT08_CCErrors");
  dictColumn = arrTestData[0];
  var strQuery = dictColumn["Item"]("Query")
  
  var queryfailcount = 0;
  //update DB for empty inventory
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for empty depleted reagent")
    queryfailcount=queryfailcount+1;
  }
        
  var strQuery = dictColumn["Item"]("Query2")
  //update DB for OBS expired
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for OBS expired for IA reagent")
    queryfailcount=queryfailcount+1;
  }
  
  
  var strQuery = dictColumn["Item"]("Query3")
  //update DB for Lot Expire
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for Lot expire")
    queryfailcount = queryfailcount+1;
  }
  
  var strQuery = dictColumn["Item"]("Query4")
  //update DB for Temperature error
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for Temperature error of a reagent")
    queryfailcount=queryfailcount+1;
  }
  
  var strQuery = dictColumn["Item"]("Query5")
  //update DB for Contaminated
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for contaminated reagent")
    queryfailcount=queryfailcount+1;
  }
  
// for duplicate error already done whileloading reagents - added two samebarcodes

  //Restarting Hydra
  return InitializeHydra()
  
}

function ThenCCReagentDetailsForErrorAndFlag()
{
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","FT_225700_GWT08_CCErrors");
  dictColumn = arrTestData[0];
  var Assay = dictColumn["Item"]("ReagentName")
  var LotNo = dictColumn["Item"]("LotNo")
  
  var ReagentEmptyErrorInfo = dictColumn["Item"]("ReagentEmptyErrorInfo")
  var arrReagentEmptyErrorInfo = ReagentEmptyErrorInfo["split"](";")
  var SequenceNo = arrReagentEmptyErrorInfo[0]// last 6 digits of barcode
  
  var errorflag =0;
  if(!StepVerifyReagentPackErrorIconMessage(Assay,"HYDRA",arrReagentEmptyErrorInfo[1],SequenceNo,LotNo))
  {
    Log["Error"]("Empty depleted reagent flag is not shown as expected")
    errorflag =errorflag -1;
  }
  
  var ReagentDuplicateErrorInfoReagentContaminatedErrorInfo = dictColumn["Item"]("ReagentContaminatedErrorInfo")
  var arrReagentContaminatedErrorInfo = ReagentContaminatedErrorInfo["split"](";")
  var SequenceNo = arrReagentContaminatedErrorInfo[0]// last 6 digits of barcode
  
  if(!StepVerifyReagentPackErrorIconMessage(Assay,"HYDRA",arrReagentEmptyErrorInfo[1],SequenceNo,LotNo))
  {
    Log["Error"]("Contaminated reagent flag is not shown as expected")
    errorflag =errorflag -1;
  }
  
  var ReagentDuplicateErrorInfo = dictColumn["Item"]("ReagentDuplicateErrorInfo")
  var arrReagentDuplicateErrorInfo = ReagentDuplicateErrorInfo["split"](";")
  var SequenceNo = arrReagentDuplicateErrorInfo[0]// last 6 digits of barcode
  
  if(!StepVerifyReagentPackErrorIconMessage(Assay,"HYDRA",arrReagentDuplicateErrorInfo[1],SequenceNo,LotNo))
  {
    Log["Error"]("Duplicate reagent flag is not shown as expected")
    errorflag =errorflag -1;
  }
  
  if(errorflag<0)
  {
    Log["Message"]("Fail")
    return false;
   }
   else
   {
    Log["Message"]("Pass")
    return true;
   }
  
  
  // TO DO - verify status in reagent details grid - right now status is not shown in UI and automation id also not present

}


function GivenPrimaryRgtDoorOpen()
{
 try
  {
         InitializeMetaDataHYDRA() //Get the Project Variables
         
         Log["AppendFolder"]("Performing Reagent Door Open Operation");
  
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode=dictColumn["Item"]("Barcode")  
        var RgtType =  dictColumn["Item"]("ReagentType")  
  
          
      // Navigate to Reagent Loader Screen
      if(!StepNavigateToReagentLoader())
        return false;
        
  
        if(!StepPrimaryRgtDoorOpen(RgtType,"Open"))
        { 
          Log["Error"]("IM Primary Reagent Door Open Failed");
          Log["PopLogFolder"]();
          return false;}
        else
        {
          Log["Checkpoint"]("IM Primary Reagent Door Open Completed Successfully");
          Log["PopLogFolder"]();
          return true;
          
        } 

     

  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }   

}



function GivenRgtDoorOpenLessThanWarningTime()
{
 try{
    //Initialize XMLs
    InitializeMetaDataHYDRA();
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType")  
          
    //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
      
     Log["AppendFolder"]("Verifying Whether Open Time is Still below Warning Threshold") ;
      //Get the Door status and check less than  Warning   
      if(!StepDoorOpenedBelowWarningTime(RgtType))
        {Log["Error"]("Open Door Timer is not below Warning Threshold");
        Log["PopLogFolder"]();
        return false;}
      else
      {Log["Checkpoint"]("Open Door Timer is Below warning Threshold");
      Log["PopLogFolder"]();
      return true;}
    
      
  }
  
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
}


function GivenPrimaryRgtDoorClosed()
{ 
  try
  {
         InitializeMetaDataHYDRA() //Get the Project Variables
         
         Log["AppendFolder"]("Performing Reagent Door Close Operation");
  
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode=dictColumn["Item"]("Barcode")  
        var RgtType =  dictColumn["Item"]("ReagentType")  
  
          
      // Navigate to Reagent Loader Screen
      if(!StepNavigateToReagentLoader())
        return false;
        
  
        if(!StepPrimaryRgtDoorClose(RgtType,"Close"))
        { 
          Log["Error"]("IM Primary Reagent Door Close Failed");
          Log["PopLogFolder"]();
          return false;}
        else
        {
          Log["Checkpoint"]("IM Primary Reagent Door Close Operation Completed Successfully");
          Log["PopLogFolder"]();
          return true;
          
        } 

     

  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }   }



function GivenRgtDoorOpenMoreThanWarningTime()
{
 try{
    Log["AppendFolder"]("Verifying Whether Open Time is Still below Warning Threshold") ;
    //Initialize XMLs
    InitializeMetaDataHYDRA();
    
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType")  
          
    //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
      
      
    //Get the Door status and check less than  Warning   
    if(!StepDoorOpenedMoreThanWarningTime(RgtType))
      {Log["Error"]("Reagent Door is not opened till Warning Time");
       Log["PopLogFolder"]();
       return false;}
    else
      {Log["Checkpoint"]("Reagent Door is  opened to meet Warning Time");
      Log["PopLogFolder"]();
      return true;}
  }
  
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
}


function GivenRgtDoorOpenMoreThanTimeout()
{
 try{
   
    Log["AppendFolder"]("Keep the Reagent Door Open for 5 Min to trigger TimeOut");
 
    //Initialize XMLs
    InitializeMetaDataHYDRA();
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType")  
          
    //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
      
      
    //Get the Door status and check less than  Warning   
    if(!StepDoorOpenedMoreThanTimeout(RgtType))
      {Log["Error"]("Reagent Door is not opened till 5 Min to Trigger Time Out");
       Log["PopLogFolder"]();
       return false;}
    else
      {Log["Checkpoint"]("Reagent Door is  opened to Trigger Time Out");
      Log["PopLogFolder"]();
      return true;}
  
  }
  
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
}




function WhenOperatorClosesRgtDoor()
{
   try
  {
        Log["AppendFolder"]("Performing Reagent Door Close Operation");
        
        InitializeMetaDataHYDRA();
  
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode=dictColumn["Item"]("Barcode")  
        var RgtType =  dictColumn["Item"]("ReagentType")  
  
  
        if(!StepPrimaryRgtDoorClose(RgtType,"Close"))
        { 
          Log["Error"]("IM Primary Reagent Door Close Failed");
          Log["PopLogFolder"]();
          return false;}
        else
        {
       
          Log["Checkpoint"]("IM Primary Reagent Door Close Completed Successfully");
          Log["PopLogFolder"]();
          return true;
          
        } 
     

  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }   
}




function ThenOpenDoorTimerRemoved()
{
try{
    
    Log["AppendFolder"]("Verifying whether Open Door Timer is Removed");
    //Initialize XMLs
    InitializeMetaDataHYDRA();
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType")  
          
    //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
      
      
    //Get the Door status and check less than  Warning   
    if(!StepVerifyDoorTimerIsNone(RgtType))
    {
      Log["Error"]("IM Primary Reagent Door Timer is not removed after closing the Door");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("IM Primary Reagent Door Timer is removed after closing the Door") 
     Log["PopLogFolder"]();
     return true;
    }
  }
  
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }
 
}





function ThenNoDoorTimeoutError()
{
  try
  {
     //Initialize XMLs
    InitializeMetaDataHYDRA();
    
    Log["AppendFolder"]("Verify There is no Door Timeout Error on UI");
    var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType")  
          
    //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
      
      
    //Get the Door status and check less than  Warning   
    if(!StepVerifyDoorTimerIsNone(RgtType))
      {Log["Error"](" Reagent Door Timout Error is displayed on UI");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("No Reagent Door Timeout Error on UI") 
     Log["PopLogFolder"]();
     return true;
    }
  
  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 }
 
 
 function ThenEventLogGeneratedforDoorTimeoutWarning()
 {
  try{      
    
    Log["AppendFolder"]("Verify Event Log is generated for Reagent Door Timer Warning");
    //Initialize XMLs
    InitializeMetaDataHYDRA();
          
    //StepDefinition - Navigate to Operator EventLog screen
      if(!StepNavigateToOperatorEventLog())
        return false;
      
      
    //Verify the EventLog   
    if(!StepVerifyEventLogForTimerWarning())
      {Log["Error"](" Event Log is not generated for Reagent Door Timer Warning");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("Event Log generated for Reagent Door Timer Warning") 
     Log["PopLogFolder"]();
     return true;
    }
  
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 }
 
 
 
  
 function ThenEventLogGeneratedforDoorTimeoutError()
 {
  try{     
    Log["AppendFolder"]("Verify EventLog Generated for Reagent Door Time Out Error ")
    //Initialize XMLs
    InitializeMetaDataHYDRA();
          
    //StepDefinition - Navigate to Operator EventLog screen
      if(!StepNavigateToOperatorEventLog())
        return false;
      
      
    //Verify the EventLog   
    if(!StepVerifyEventLogForTimeoutError())
      {Log["Error"](" Event Log is not generated for Reagent Door Time Out Error");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("Event Log generated for Reagent Door Time Out Error") 
     Log["PopLogFolder"]();
     return true;
    }
  
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 }
 
 
 
 function ThenWarningAlertGenerated()
  {
 
  try{
      Log["AppendFolder"]("Verifying whether Warning Alert for Open Door Timer is generated");
        //Initialize XMLs
      InitializeMetaDataHYDRA();
          
     var Warningalert = "ALERT_REAGENTS_MIXING_WARNING";
     var SeverityLevel = "Warning";
    //Verify the Alert on Inventory Tab   
    if(!StepVerifyUIAlertOnInventory(Warningalert,SeverityLevel))
      {Log["Error"]("Warning Alert not Generated for Open Door Timer");
       Log["PopLogFolder"]();
       return false;}
    else
      {Log["Checkpoint"]("Warning Alert  Generated for Open Door Timer");
      Log["PopLogFolder"]();
      return true;}
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 }
 
 
  function ThenErrorAlertGenerated()
  {
  try{   
    
    Log["AppendFolder"]("Verify whether Error Alert generated for Open Door Timeout ");
     //Initialize XMLs
    InitializeMetaDataHYDRA();
    
        //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
    
          
     var Warningalert = "ALERT_REAGENTS_MIXING_TIMEOUT";
     var SeverityLevel = "Error";
    //Verify the Alert on Inventory Tab   
    if(!StepVerifyUIAlertOnInventory(Warningalert,SeverityLevel))
      {Log["Error"]("Error Alert not Generated for Open Door Timer");
       Log["PopLogFolder"]();
       return false;}
    else
      {Log["Checkpoint"]("Error Alert  Generated for Open Door Timer");
      Log["PopLogFolder"]();
      return true;}
  
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 }
 
 
 function ThenWarningAlertIsRemoved()
 {
  try {
    
    Log["AppendFolder"]("Verify Warning Alert is Removed on UI for Open Door Timer");  
    InitializeMetaDataHYDRA();          
    var Warningalert = "ALERT_REAGENTS_MIXING_WARNING";
    var SeverityLevel = "Warning";
    //Verify the Alert on Inventory Tab   
    if(!StepVerifyUIAlertOnInventory(Warningalert,SeverityLevel)) //Alert should not be generated
     { Log["Checkpoint"]("Warning Alert is Removed after closing the Reagent Door");
        Log["PopLogFolder"]();
      return true;}
    else
      {Log["Error"]("Warning Alert for Reagent Door Open is not removed");
      Log["PopLogFolder"]();
      return false;}
  
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    Log["PopLogFolder"]();
    return false;
  }  
 
 }
 
 
 
 function ThenSetPackStatusToInsufficientMixing()
 {
   
 try{ 
    Log["AppendFolder"]("Verify whether Reagent Pack is flagged with Insufficient Mixing");
 
      InitializeMetaDataHYDRA();  
      
      var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
      var dictColumn=arrTestData[0];
      var RgtType =  dictColumn["Item"]("ReagentType") ; 
      var RgtName = dictColumn["Item"]("ReagentName")  ;
      var Barcode = dictColumn["Item"]("Barcode")  ;
      Barcode = aqString["Trim"](Barcode);
      var Sequence = aqString["SubString"](Barcode,aqString["GetLength"](Barcode)-6,6)
      
      //Navigate to Reagent Overview screen
      StepOperatorNavigatesToReagentOverviewScreen();
      
      var RgtStatus = StepGetReagentPackStatus(RgtType,RgtName,Sequence) //GetReagentpackstatus
      if(RgtStatus =="Insufficient Mixing")
    //  if(1)
      {Log["Checkpoint"]("Reagent "+RgtName+ " is flagged with Insufficient Mixing");
        Log["PopLogFolder"]();
        return true;}
      else
      {
       Log["Error"]("Reagent "+RgtName+ " is not flagged with Insufficient Mixing" );
       Log["PopLogFolder"]();
       return false;
      // Log["Error"]("Reagent "+RgtName+ " is flagged with "+RgtStatus); 
      }
 
 }
   catch(exp)
  {
    Log.Error(exp.description) ; 
    Log["PopLogFolder"]();
    return false;
  }  
 
 }
 
  
 function ThenRemoveInsufficientMixingFromRgt()
 {
   
 try{
    Log["AppendFolder"]("Verify Insufficient Mixing Flag is Removed from Reagent");
 
      InitializeMetaDataHYDRA();  
      
      var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
      var dictColumn=arrTestData[0];
      var RgtType =  dictColumn["Item"]("ReagentType") ; 
      var RgtName = dictColumn["Item"]("ReagentName")  ;
      var Barcode = dictColumn["Item"]("Barcode")  ;
      Barcode = aqString["Trim"](Barcode);
      var Sequence = aqString["SubString"](Barcode,aqString["GetLength"](Barcode)-6,6)
      
      var RgtStatus = StepGetReagentPackStatus(RgtType,RgtName,Sequence) //GetReagentpackstatus
      if(RgtStatus !="Insufficient Mixing")
      {Log["Checkpoint"]("Insufficient Mixing flag is removed from Reagent "+RgtName );
      Log["PopLogFolder"]();
      return true;}
      else
      {
       Log["Error"]("Reagent "+RgtName+ " is still  flagged with Insufficient Mixing" );
       Log["PopLogFolder"]();
       return false;
      // Log["Error"]("Reagent "+RgtName+ " is flagged with "+RgtStatus); 
      }
 
 }
   catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 }
 
 
 
 function ThenManualMixConfirmationDisplayed()
 {
 try{
      Log["AppendFolder"]("Verify Manual Remix confirmation dialog displayed");
 
       InitializeMetaDataHYDRA();  
       
       if(!StepVerifyManualMixDialogDisplayed())
       {
       Log["Error"]("Manual Re-Mix Dialog not Displayed on Closing the Reagent Door after Time out");
       Log["PopLogFolder"]();
       return false;}
       else
       {
        Log["Checkpoint"]("Manual Re-Mix Dialog Displayed on Closing the Reagent Door after Time out"); 
        Log["PopLogFolder"]();
        return true;
       }
 
 }
 
 catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 
 }
 
 
 function WhenOperatorConfirmsManualRemix()
 {
    try{
        
      Log["AppendFolder"]("Operator confirms Manual Remix");
    
       InitializeMetaDataHYDRA();  
       
       if(!StepOperatorConfirmsManualRemix())
       {
       Log["Error"]("Operator couldnot confirm Manual Remix");
       Log["PopLogFolder"]();
       return false;}
       else
       {
        Log["Checkpoint"]("Operator confirmed Manual Remix of Reagent"); 
        Log["PopLogFolder"]();
        return true;

       }
 
 }
 
  catch(exp)
  {
    Log["Message"]("Exception - " + exp["Description"]);
  }
}


 
 
 
 function WhenSystemEntersDiagnosticsState()
 {
   
try{
  Log["AppendFolder"]("System Enters Diagnostics state");
  InitializeMetaDataHYDRA();  
  if(!StepClickOnEnterDiagnostics())
  {
      Log["Error"]("System Couldnot Enter Diagnostics");
      Log["PopLogFolder"]();
       return false;
  }
  else
  {
        Log["Checkpoint"]("System Entered Diagnostics State successfully"); 
        Log["PopLogFolder"]();
        return true;
  }

}
 
 
  catch(exp)

  {
    Log.Error(exp.description) ; 
    Log["PopLogFolder"]();
    return false;
  }
 }
 
 
 
 
 
 function WhenReagentDoorOpenedForTimeoutError()
 {
            InitializeMetaDataHYDRA() //Get the Project Variables
         
         Log["AppendFolder"]("Performing Reagent Door Open Operation");
  
        //Read data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
        var dictColumn=arrTestData[0];
        var Assay = dictColumn["Item"]("ReagentName")
        var Barcode=dictColumn["Item"]("Barcode")  
        var RgtType =  dictColumn["Item"]("ReagentType")  
  
          
      // Navigate to Reagent Loader Screen
      if(!StepNavigateToReagentLoader())
        return false;
        
        //Open the Reagent Door
        if(!StepPrimaryRgtDoorOpen(RgtType,"Open"))
        { 
          Log["Error"]("IM Primary Reagent Door Open Failed");
          Log["PopLogFolder"]();
          return false;}
        else
        {
            //keep the Door Open to trigger timeout        
        if(!StepDoorOpenedMoreThanTimeoutInDiagnostics(RgtType))
        {
           Log["Error"]("Reagent Door Not opened to Meet Timeout")  ;
           Log["PopLogFolder"]();
           return false;
        }
         else
         {
           Log["Checkpoint"]("Reagent Door is opened to meet Timeout Error");
           Log["PopLogFolder"]();
           return true;
         }
          
        } 
 }
 
 function ThenDoorTimerShouldnotRunInDiagnostics()
 {
    try
  {
     //Initialize XMLs
    InitializeMetaDataHYDRA();
    
    Log["AppendFolder"]("Verify There is no Door Timer Running on UI");
    var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType")  
          
    //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
      
      
    //Get the Door status and check less than  Warning   
    if(!StepVerifyDoorTimerIsNone(RgtType))
      {Log["Error"](" Reagent Door Timout Error is displayed on UI");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("Reagent Open Door Timer is not running") ;
     Log["PopLogFolder"]();
     return true;
    }
  
  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  } 
 }
 
 
 function ThenErrorAlertNotGenerated()
 {
      try {
    
    Log["AppendFolder"]("Verify No Error Alert is displayed on UI for Open Door Timer");  
    InitializeMetaDataHYDRA();          
    var Warningalert = "ALERT_REAGENTS_MIXING_TIMEOUT";
    var SeverityLevel = "Error";
    
    // Navigate to Reagent Loader Screen
      if(!StepNavigateToReagentLoader())
        return false;
    
    //Verify the Alert on Inventory Tab   
    if(!StepVerifyUIAlertOnInventory(Warningalert,SeverityLevel)) //Alert should not be generated
     { Log["Checkpoint"]("Error Alert is not displayed for Timeout");
        Log["PopLogFolder"]();
      return true;}
    else
      {Log["Error"]("Error Alert displayed for Reagent Door Open Timeout in Diagnostics state");
      Log["PopLogFolder"]();
      return false;}
  
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    Log["PopLogFolder"]();
    return false;
  }  
 
 }
 
 
 
 function ThenEventLogNotGeneratedforDoorTimeoutError()
 {
   try{      
   
   Log["AppendFolder"]("Verify Whether Event Log not generated for Timeout in Diagnostics state");
   //Initialize XMLs
    InitializeMetaDataHYDRA();
          
    //StepDefinition - Navigate to Operator EventLog screen
      if(!StepNavigateToOperatorEventLog())
        return false;
      
      
    //Verify the EventLog   
    if(!StepVerifyEventLogForTimeoutError())
    {
      Log["Checkpoint"]("EventLog Not Generated for Reagent Door Timeout Error in Diagnostics state");   
      Log["PopLogFolder"](); 
      return true;
    }
    else
    {
      Log["Error"]("EventLog Generated for Reagent Door Timeout Error in Diagnostics state");
      Log["PopLogFolder"]();
      return false;
    }
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    Log["PopLogFolder"]();
    return false;
  }     
 
 }
 
 
 function ThenPackStatusNotSetToInsufficientMixing()
 {
   try{
      Log["AppendFolder"]("Verify Pack status not set to Insufficient Mixing");
   
      InitializeMetaDataHYDRA();  
      
      
      
      
      var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
      var dictColumn=arrTestData[0];
      var RgtType =  dictColumn["Item"]("ReagentType") ; 
      var RgtName = dictColumn["Item"]("ReagentName")  ;
      var Barcode = dictColumn["Item"]("Barcode")  ;
      Barcode = aqString["Trim"](Barcode);
      var Sequence = aqString["SubString"](Barcode,aqString["GetLength"](Barcode)-6,6)
      
      //Navigate to Reagent Overview screen
      StepOperatorNavigatesToReagentOverviewScreen();
      
      var RgtStatus = StepGetReagentPackStatus(RgtType,RgtName,Sequence) //GetReagentpackstatus
      if(RgtStatus !="Insufficient Mixing")
      {Log["Checkpoint"]("Reagent "+RgtName+ " is not flagged with Insufficient Mixing");
        Log["PopLogFolder"]();
        return true;}
      else
      {
       Log["Error"]("Reagent "+RgtName+ " is still  flagged with Insufficient Mixing in Diagnostics state" );
       Log["PopLogFolder"]();
       return false;
      // Log["Error"]("Reagent "+RgtName+ " is flagged with "+RgtStatus); 
      }
 
 }
   catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }   
 }
 
 
 function ThenManualMixConfirmationNotDisplayed()
 {
 try{
      Log["AppendFolder"]("Verify Manual Remix confirmation dialog Not displayed in Diagnostics");
 
       InitializeMetaDataHYDRA();  
       
       if(!StepVerifyManualMixDialogDisplayed())
       {
       Log["Checkpoint"]("Manual Re-Mix Dialog not Displayed on Closing the Reagent Door after Time out");
       Log["PopLogFolder"]();
       return true;}
       else
       {
        Log["Error"]("Manual Re-Mix Dialog Displayed on Closing the Reagent Door after Time out"); 
        Log["PopLogFolder"]();
        return false;
       }
 
 }
 
 catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  } 
 }
 
 
 
 function ThenReagentPackIsBackOnline()
 {
   
 }
 
 
 function ThenExitDiagnosticsAndResumeHydra()
 {
   try{
      Log["AppendFolder"]("Perform Exit Diagnostics and Bring Hydra to Ready");
 
       InitializeMetaDataHYDRA();  
       
       if(ClickOnExitDiagnostics())
       {
       Log["Checkpoint"]("Exited Diagnostics Mode");
       
       }
       else
       {
        Log["Error"]("Exit Diagnostics Failed"); 
        Log["PopLogFolder"]();
        return false;
       }
       
       
       if(StepResumeHydraToReady())
       {
         Log["Checkpoint"]("Hydra Module Resumed to Ready");
         Log["PopLogFolder"]();
         return true;      
       
       }
       else
       {
        Log["Error"]("Hydra Module Resume Failed");
         Log["PopLogFolder"]();
         return false;
       }
       
       
 
 }
 
 catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  } 
 
 
 
 }
 
 
 
 function LoadIMPrimaryReagent()
 {
   Log["AppendFolder"]("Loading IM Reagent Pack");
   InitializeMetaDataHYDRA(); 
      
   //Get Assay Details
   var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType") ; 
    var RgtName = dictColumn["Item"]("ReagentName")  ;
    var Barcode = dictColumn["Item"]("Barcode")  ;
    Barcode = aqString["Trim"](Barcode);
    var Sequence = aqString["SubString"](Barcode,aqString["GetLength"](Barcode)-6,6)
    
    //Get Sequence Details            
    arrTestDataIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
    dictColumnIA=arrTestDataIA[0];
    var MechNameIA = dictColumnIA["Item"]("MechanismName")
    var SeqNameIA = dictColumnIA["Item"]("SeqName")
    
    if(StepReagentIsLoaded(RgtName,RgtType,MechNameIA,SeqNameIA))
    {
     Log["Checkpoint"]("Precondition Met: IM Reagent Pack is loaded") ;
     Log["PopLogFolder"]();
     return true;
    }
    else
    {
      Log["Error"]("Precondition Failed: IM Reagent Pack not loaded") ;
     Log["PopLogFolder"]();
     return false;}
    
    
    
 }
 
 function WhenPrimaryRgtDoorOpen()
{
  return GivenPrimaryRgtDoorOpen();

}

function GivenRemixConfirmationPending()
 {
   return ThenManualMixConfirmationDisplayed();
 }
 
function ThenRemixConfirmationContinuedToDisplay()
 {
 try{
      Log["AppendFolder"]("Verifying Manual Remix confirmation dialog is still displayed after opening reagent door ");
 
       InitializeMetaDataHYDRA();  
       
       if(!StepVerifyManualMixDialogDisplayed())
       {
       Log["Error"]("Manual Re-Mix Dialog not Displayed on screen");
       Log["PopLogFolder"]();
       return false;}
       else
       {
        Log["Checkpoint"]("Manual Re-Mix Dialog continued displaying after opening reagent door"); 
        Log["PopLogFolder"]();
        return true;
       }
    }
 catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }
 } 
 
function ThenNoOpenDoorTimer()
{
try{
    
    Log["AppendFolder"]("Verifying Open Door Timer is not displayed");
    //Initialize XMLs
    InitializeMetaDataHYDRA();
    
    var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadAFPRgtMix");  //Load AFP Rgt
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType")  
          
    //StepDefinition - Navigate to reagent Overview
      if(!StepNavigateToReagentLoader())
        return false;
      
      
    //Get the Door status and check less than  Warning   
    if(!StepVerifyDoorTimerIsNone(RgtType))
    {
      Log["Error"]("IM Primary Reagent Door Timer is displayed after opening the Door");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("IM Primary Reagent Door Timer is not displayed after opening the Door"); 
     Log["PopLogFolder"]();
     return true;
    }
  }
  
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }
 
}

function ThenOperatorConfirmsManualRemix()
{
   return WhenOperatorConfirmsManualRemix();
}

function ThenManualRemixDialogRemoved()
 {
 try{
      Log["AppendFolder"]("Verify Manual Remix confirmation is removed");
 
       InitializeMetaDataHYDRA();  
       
       if(!StepVerifyManualMixDialogDisplayed())
       {
       Log["Error"]("Manual Re-Mix Dialog is removed");
       Log["PopLogFolder"]();
       return false;}
       else
       {
        Log["Checkpoint"]("Manual Re-Mix Dialog is not removed"); 
        Log["PopLogFolder"]();
        return true;
       }
 
 }
 
 catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 
 }

function LoadIMPrimaryReagentBadbarcode()
 {
   Log["AppendFolder"]("Loading IM Reagent Pack");
   InitializeMetaDataHYDRA(); 
      
   //Get Assay Details
   var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadBADRgtIA");  //Load  Rgt with bad barcode (NOR PACKPRESENT)
    var dictColumn=arrTestData[0];
    var RgtType =  dictColumn["Item"]("ReagentType") ; 
    var RgtName = dictColumn["Item"]("ReagentName")  ;
    var Barcode = dictColumn["Item"]("Barcode")  ;
    Barcode = aqString["Trim"](Barcode);
    var Sequence = aqString["SubString"](Barcode,aqString["GetLength"](Barcode)-6,6)
    
    //Get Sequence Details            
    arrTestDataIA = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
    dictColumnIA=arrTestDataIA[0];
    var MechNameIA = dictColumnIA["Item"]("MechanismName")
    var SeqNameIA = dictColumnIA["Item"]("SeqName")
    
    if(StepReagentIsLoaded(RgtName,RgtType,MechNameIA,SeqNameIA))
    {
     Log["Checkpoint"]("Precondition Met: IM Reagent Pack is loaded") ;
     Log["PopLogFolder"]();
     return true;
    }
    else
    {
      Log["Error"]("Precondition Failed: IM Reagent Pack not loaded") ;
     Log["PopLogFolder"]();
     return false;}
    
 }
 
 
function LoadCHReagentBadbarcode()
{
  try{
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
      
        //Read Test data      
        var arrTestDataCC = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadBADRgtCH");
        var dictColumnCC=arrTestDataCC[0];
        var TypeOfReagentCC=dictColumnCC["Item"]("ReagentType")
        var AssayCC = dictColumnCC["Item"]("ReagentName")
        
        //Read data - CH Diagnostics Sequence
        arrTestDataSeqCC = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq");
        dictColumnSeqCC=arrTestDataSeqCC[0];
        var MechNameSeqCC = dictColumnSeqCC["Item"]("MechanismName")
        var SeqNameSeqCC = dictColumnSeqCC["Item"]("SeqName")

        //Load CC Reagent 
            if(!StepReagentIsLoaded(AssayCC,TypeOfReagentCC,MechNameSeqCC,SeqNameSeqCC))
            {
              Log["Error"]("CC Reagent Loading Failed")
              Returnval = false;
            }
            
            if(!StepResumeHydraToReady())
            Returnval = false;
            //return
            return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}
function THENVerifyManualIDEntrywindowforIM()
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
      
        //Read Test data      
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadBADRgtIA");  //LoadNORPACKPRESENTReagent
        var dictColumn=arrTestData[0];
        var Barcode=dictColumn["Item"]("Barcode")
        var Assay = dictColumn["Item"]("ReagentName")
        var Changebarcode = dictColumn["Item"]("Changebarcode")
        //var Lot = dictColumn["Item"]("Lot")
        
         if(!StepNavigateToReagentLoader())
            return false

            if(!StepfnClickIMReagentinGrid(Assay,Barcode,Changebarcode)) 
            {
              Returnval = false;
            } 
            //return
            return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}

function THENVerifyManualIDEntrywindowforCH()
//THENVerifyManualIDEntrywindow
{
  try{
     //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
      
        //Read Test data      
        var arrTestData = GetTestItemsByTestName(TestDataFile,"LoadHydraReagents","LoadBADRgtCH");  //LoadNORPACKPRESENTReagent
        var dictColumn=arrTestData[0];
        var Barcode=dictColumn["Item"]("Barcode")
        var Assay = dictColumn["Item"]("ReagentName")
        var Lot= dictColumn["Item"]("Lot")
        var Sequence = dictColumn["Item"]("Sequence")
        var Year= dictColumn["Item"]("Year")
        var Month=dictColumn["Item"]("Month")
        var Day=dictColumn["Item"]("Day")
        var CHassay=dictColumn["Item"]("Assay")

        
         if(!StepNavigateToReagentLoader())
            return false

            if(!StepfnClickCHReagentinGrid(Assay,Barcode,Lot,Sequence,Year,Month,Day,CHassay)) 
            {
              Returnval = false;
            } 
            //return
            return Returnval
             
    }
 catch(exp)
 {
 Log.Error(exp.description) ; 
 return false;
 }
}


function ThenEventLogGeneratedforReagentswappedforIM()
 {
  try{      
    
    Log["AppendFolder"]("Verify Event Log is generated for Reagent swapped");
    //Initialize XMLs
    InitializeMetaDataHYDRA();
          
    //StepDefinition - Navigate to Operator EventLog screen
      if(!StepNavigateToOperatorEventLog())
        return false;
      
      
    //Verify the EventLog   
    if(!StepVerifyEventLogForReagententeredmanuallyforIM())
      {Log["Error"](" Event Log is not generated for Manually entered Reagent ");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("Event Log generated for Manually entered Reagent") 
     Log["PopLogFolder"]();
     return true;
    }
  
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 }
 
 function ThenEventLogGeneratedforReagentswappedforCH()
 {
  try{      
    
    Log["AppendFolder"]("Verify Event Log is generated for Reagent swapped");
    //Initialize XMLs
    InitializeMetaDataHYDRA();
          
    //StepDefinition - Navigate to Operator EventLog screen
      if(!StepNavigateToOperatorEventLog())
        return false;
      
      
    //Verify the EventLog   
    if(!StepVerifyEventLogForReagententeredmanuallyforCH())
      {Log["Error"](" Event Log is not generated for Manually entered Reagent ");
      Log["PopLogFolder"]();   
      return false;
      }
      
    else
    {
     Log["Checkpoint"]("Event Log generated for Manually entered Reagent") 
     Log["PopLogFolder"]();
     return true;
    }
  
 }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }  
 
 }
 
 //******************************************************************************
//        FEATURE : 247522 - Bulk System Fluids w/ Reservoirs 
//******************************************************************************
function GivenIMAndCHBulkFluidsLoaded()
{
  try
  {
      //Initialize variable
      var Returnval = false;
      
      //Read Test Data - DB query
      arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","RoundTrip");
      dictColumn=arrTestData[0];
      strQuery = dictColumn["Item"]("Query")
      strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
      
      //StepDefinition - Load CH and IM Bulk Fluids in DB
      if(!StepUpdateDB(strQuery,strConString))
      {
          Log["Error"]("Failed to update CH and IM Bulk Fluids in DB");
          Returnval = false;
      }
      else
      {
          Log["Checkpoint"]("IM and CH fluids loaded successfully");
          Returnval = true;
      }
      
      //return
      return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}

function GivenUpdateSystemFluidsBasedOnParameter(DBExcelColname)
{
  try
  {
      //Initialize variable
      var Returnval = false;
      
      //Read Test Data - DB query
      arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColname);
      dictColumn=arrTestData[0];
      strQuery = dictColumn["Item"]("Query")
      strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
      
      //Read data for Login
      var arrTestData = GetTestItemsByTestName(TestDataFile,"GenericARM","Login");
      var dictColumn=arrTestData[0];
      
      //StepDefinition - update DB
      if(!StepUpdateDB(strQuery,strConString))
      {
          Log["Error"]("Failed to update DB");
          Returnval = false;
      }
      else
      {
          Log["Checkpoint"]("DB updated successfully");
          Returnval = true;
      }
      
      //shutdown Hydra
      ShutDownARM();
      
      //Launch Hydra
      if(!LaunchHydra())
      {
          Log["Error"]("Failed to launch application");
          Returnval = false;
      }
      
      //Login to Hydra
      if(!LoginToHydra(dictColumn["Item"]("User"),dictColumn["Item"]("Password")))
      {
          Log["Error"]("Failed to login to UIW");
          Returnval = false;
      }
      
      //return
      return Returnval;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}

function ThenFluidVolumeDisplayedBasedOnParameter(strVolPercent)
{
  try
  {
        
        //Initialize variable
        var Returnval = true;
      
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckCHAndIMSystemFluids");
        var dictColumn=arrTestData[0];
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var dataCount = ArrSuppliesType.length;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;

        /*---------------- VOLUME PERCENT ----------------*/      
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepCaptureSuppliesData(ArrSuppliesType[i],ArrVolumeControlNames[i],"VolumePercent",strVolPercent))
            Returnval =false;
        }
      
        //return
        return Returnval;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}

function ThenLotOBSDisplayedBasedOnParameter(DBExcelColName,strOBSValue)
{
  try
  {
        //Initialize variable
        var Returnval = true;      
  
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckCHAndIMSystemFluids");
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        
        //Read data for DB
        var arrTestData1 = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        var dictColumn1=arrTestData1[0];
        var strQuery = dictColumn1["Item"]("Query2")
        var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
        
        /*---------------- LOT EXPIRATION ----------------*/
        Log["AppendFolder"]("Lot Expiration Date Status");
               
        for(i =0 ;i< dataCount ; i++)
        {
            strQuery = dictColumn1["Item"]("Query2")
            CurrentConsumeID=ArrConsumableID[i];       
            QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false);
        
            //StepDefinition -Query
            RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
            RecordSet["MoveFirst"];
            while(!RecordSet.EOF)
            {
              strLotExpDate = RecordSet["Fields"]("LotExpDate")["Value"];
              RecordSet["MoveNext"];
            }
  
            //StepDefinition
            if(!StepCaptureSuppliesData(ArrSuppliesType[i],ArrLotControlNames[i],"LotExpirationDate",strLotExpDate))
                  Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- OBS ----------------*/
        Log["AppendFolder"]("OBS Status");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepCaptureSuppliesData(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS",strOBSValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        //return
        return Returnval;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}

function ThenVisualIndicationDisplayedBasedOnParameter(DBExcelColName,boolFlag,arrType)
{
  try
  {
        //Initialize variable
        var Returnval = true;      
  
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckCHAndIMSystemFluids");
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ; 
        
        for(k=0;k<arrType.length;k++)
        {
          switch(arrType[k])
          {       
          case "VolumePercent" :
                                /*-------------------- Volume Percent --------------------*/
                                Log["AppendFolder"]("Visual Indication Status : Volume Percent");           
                                for(i =0 ;i< dataCount ; i++)
                                {          
                                    //StepDefinition
                                    if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrVolumeControlNames[i],"VolumePercent",boolFlag))
                                      Returnval =false;
                                }
                                Log["PopLogFolder"]();
                                break;
        
          case "LotExpirationDate" :       
                                    /*-------------------- Lot Expiration Date --------------------*/
                                    Log["AppendFolder"]("Visual Indication Status : Lot Expiration Date");           
                                    for(i =0 ;i< dataCount ; i++)
                                    {          
                                      //StepDefinition
                                      if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrLotControlNames[i],"LotExpirationDate",boolFlag))
                                        Returnval =false;
                                    }
                                    Log["PopLogFolder"]();
                                    break;
        
          case "OBS" :
                      /*------------------------ OBS ------------------------*/
                      Log["AppendFolder"]("Visual Indication Status : OBS");           
                      for(i =0 ;i< dataCount ; i++)
                      {          
                        //StepDefinition
                        if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS",boolFlag))
                          Returnval =false;
                      }
                      Log["PopLogFolder"]();
                      break;        
          }
        }
        
        //return
        return Returnval;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}

function ThenAlertStatusForInventoryBasedOnParameter()
{
  try
  {
      //Initialize variable
      var Returnval = true; 
      var AlertMessageCode=null;
      var SeverityLevel=null;
      
      Log["AppendFolder"]("Alert Status : Inventory");
      
      if(!StepVerifyUIAlertOnInventory(AlertMessageCode,SeverityLevel))
        Returnval =false;
        
      Log["PopLogFolder"]();
        
      //return
      return Returnval;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}

function ThenCHIMTestShouldNotBeProcessed(DBPatientColName)
{
  try
  {    
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder",DBPatientColName);
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay");
        var arrAssay=Assay1["split"](";");
        var Specimen1 = dictColumn["Item"]("Specimen");
        var arrSpecimen=Specimen1["split"](";");
        var Priority1 = dictColumn["Item"]("Priority");
        var arrPriority=Priority1["split"](";");
        var Analyzer1 = dictColumn["Item"]("Analyzer");
        var arrAnalyzer=Analyzer1["split"](";");
        var SID1 = dictColumn["Item"]("SampleId");
        var arrSID=SID1["split"](";");
        var SampleStatus = dictColumn["Item"]("SampleStatus");
        var arrSampleStatus=SampleStatus["split"](";");

        //Create patient order
        for(i=0;i<2;i++)
        {
          if(!StepCreatePatientOrderHydra(arrSID[i],arrSpecimen[i],arrPriority[i],arrAnalyzer[i],arrAssay[i])) 
          {
            Log["Error"]("Create Patient order Failed")
            return false;
          }
        }
        
        //Load sample
        for(i=0;i<2;i++)
        {
          if(!StepLoadSamples(arrSID[i]))
          {
            Log["Error"]("Load Sample Failed")
            return false;
          }
        }
        
        //check if sample aspirated
        for(i=0;i<2;i++)
        {
          if(!StepCheckSampleStatus(arrSID[i],arrSampleStatus[i]))
          {
            Log["Error"]("Sample processing Failed")
            return false; 
          }
        }
      
      //return
      Log["Checkpoint"]("Working as expected")
      return true;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}

function ThenOperatorEventLogGeneratedBasedOnParameter(DBEventColName)
{
  try
  {
      //Initialize variables
      var Returnval=true;
      
      //Read Test data
      var arrTestData = GetTestItemsByTestName(TestDataFile,"OperatorEventLog",DBEventColName);
      var dictColumn=arrTestData[0];
      var TimeFilter = dictColumn["Item"]("TimeFilter");
      var ModuleSerialNumber = dictColumn["Item"]("ModuleSerialNumber");
      var sEvent = dictColumn["Item"]("Event");
      var arrEvent=sEvent["split"](";");
      
      if(!StepNavigateToOperatorEventLog())
      {
        return false;
      }
      
      for(i=0;i<arrEvent.length;i++)
      {
          if(!StepVerifyOperatorEventLog(TimeFilter,ModuleSerialNumber,arrEvent[i]))
          {
            Log["Error"]("Following event did not get logged : "+arrEvent[i]);
            Returnval = false; 
          }
      }
      
      //log
      if(Returnval == true)
      {
          Log["Checkpoint"]("Event logged as expected");
          return true;
      }
      else
      {
          Log["Error"]("Failed to log event in operator event log");
          return false;
      }
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}


function GivenTray2IsLoadedAndTray1IsNotLoaded()
{
   InitializeMetaDataHYDRA();
  var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
  
  arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","GWT278988_14_SampleTips");
  dictColumn = arrTestData[0];
  var strQuery = dictColumn["Item"]("Query")
  
  //update DB for Sample Tip Tray1 Empty (Not Loaded) and Tip Tray2 Loaded and available
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for Sample Tip Tray1 Empty (Not Loaded) and Tip Tray2 Loaded and available");
    return false
  }
  
  
  //Set Threshold to 2(Low value) default for No Alert condition
    if(!StepSetIMSuppliesAlertThresholdTipsRemaining(2))
    return false
  
  //Restart for DB changes to get reflected
    if(!InitializeHydra())
    return false
    
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_14_SampleTips");
  dictColumn = arrTestData[0];
    
  //verify  Tray 1 as Empty "Not Loaded"
  var sTray1Inventory = dictColumn["Item"]("Tray1Inventory");
  var arrsTray1Inventory = sTray1Inventory["split"](";");
  
  sTipTrayStatus = arrsTray1Inventory[0];
  sColorHighlighted = arrsTray1Inventory[1];
  
  sTray ="Tray1"
  if(!StepVerifyTipTrayStatus(sTray,sTipTrayStatus,sColorHighlighted))
    return false
  
  //verify sample tip count for Tray2 as 4
  var sTray2Inventory = dictColumn["Item"]("Tray2Inventory");
  var arrsTray2Inventory = sTray2Inventory["split"](";");
  
  sTipTrayTipsCount = arrsTray2Inventory[0];
  sTray ="Tray2"
  return StepVerifyTipTrayCountRemaining(sTray,sTipTrayTipsCount,"")
  
}


function WhenTipsCountMeetsOrBelowThresholdAndTray2InUseAndTray1NotInUse()
{
     InitializeMetaDataHYDRA();
     
  //Set the Tips Remaining threshold on UI
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_14_SampleTips");
  dictColumn = arrTestData[0];
  var sTipsValue = dictColumn["Item"]("TipsThreshold");
    
  //Set Threshold to 5 as per testdata to create alert
  return (StepSetIMSuppliesAlertThresholdTipsRemaining(sTipsValue))
    
}


function ThenVerifyTray1AndTray2BehaviorAndAlertAndOperatorLogsAndSampleAspirationUntilTipsAreDepleted()
{

  
  try{
    
     InitializeMetaDataHYDRA();
     
  
  //Verify 4 out of 5 samples getting processed  
  //create 5 patient orders
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT278988_14_SampleTips");
  dictColumn = arrTestData[0];
  var SampleIDs = dictColumn["Item"]("SampleId");
  var Specimen = dictColumn["Item"]("Specimen");
  var Priority = dictColumn["Item"]("Priority");
  var Analyzer = dictColumn["Item"]("Analyzer");
  var Assay = dictColumn["Item"]("Assay");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  
  var arrSampleIDs = SampleIDs["split"](";")
  for(var i=0;i<5;i++)
  {
    var SampleID = arrSampleIDs[i]
    if(!StepCreatePatientOrderHydra(SampleID,Specimen,Priority,Analyzer,Assay)) 
      return false
  }

    
  //Load 5 samples
  for(var j=0;j<5;j++)
  {
    var SampleID = arrSampleIDs[j]
    if(!StepLoadSamples(SampleID))
      return false
  }
  
  
  
  //Verify Sample status    First 4 samples should be Complete and 5th Sample should be Pending
  for(var scount=0;scount<4;scount++)
  {
    StepCheckSampleStatus(arrSampleIDs[scount],SampleStatus)
  }
  
  //Sample 5 should be pending
    //last sample should not get aspirated since Tiptray is depleted
  return StepCheckSampleStatus(arrSampleIDs[4],"Pending") // Pending status
  
  }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}
  
function PostRun_ExecuteRoundTripQuery(DBExcelSheet)
{
      try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra",DBExcelSheet);
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Load IMT and Pretreatment,Adjust Dates such as LOT & OBS not Expired
        res =StepUpdateDBRTQuery(strQuery,strConString);
        if(!res){
            ProjectSuite["Variables"]["ExecutionStatus"] ="Fail" 
            Returnval = false }
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}


function GivenTray1AndTray2IsLoaded()
{
  try{
        
    InitializeMetaDataHYDRA();
    
    //Fill the TIP Trays with max count 120 each
    
    var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
    arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
    dictColumn = arrTestData[0];
    var strQuery = dictColumn["Item"]("Query")
  
  //update DB for Sample Tip Tray1 and Tip Tray2 Loaded and available
  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for Sample Tip Tray1 Empty (Not Loaded) and Tip Tray2 Loaded and available");
    return false
  }
  
    //Restart for DB changes to get reflected
    if(!InitializeHydra())
    return false
  
  //Navigate to supplies overview and verify the tray status
      
    arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
    dictColumn = arrTestData[0];
  
    var sTray1Inventory = dictColumn["Item"]("Tray1Inventory");
    var arrsTray1Inventory = sTray1Inventory["split"](";");
    var sTray= arrsTray1Inventory[0]
    var sTipTrayTipsCount = arrsTray1Inventory[1]
    if(!StepVerifyTipTrayCountRemaining(sTray,sTipTrayTipsCount,""))
      return false
    
    var sTray2Inventory = dictColumn["Item"]("Tray2Inventory");
    var arrsTray2Inventory = sTray1Inventory["split"](";");
    var sTray= arrsTray2Inventory[0]
    var sTipTrayTipsCount = arrsTray2Inventory[1]
    return StepVerifyTipTrayCountRemaining(sTray,sTipTrayTipsCount,"")
  
  }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
  
}

function WhenTipsCountAboveThreshold()
{
  
    InitializeMetaDataHYDRA();
    
  //set tips threshold as 3 
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var sTipsValue = dictColumn["Item"]("TipsThreshold");
  var sTray1Inventory = dictColumn["Item"]("Tray1Inventory");
  var arrsTray1Inventory = sTray1Inventory["split"](";");
  
  if(!StepSetIMSuppliesAlertThresholdTipsRemaining(sTipsValue))
    return false
  
  // run a db query to make tips count 1 for Tray1 and 3 for Tray2
  var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
  
  arrTestData = GetTestItemsByTestName(DBDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var strQuery = dictColumn["Item"]("Query3")

  if(!StepUpdateDB(strQuery,strConString)) 
  {
    Log["Error"]("Failed to update database for Sample Tip Tray1 Tip remaining count 5");
    return false
  }
  
  //Restart for DB changes to get reflected
  if(!InitializeHydra())
    return false
    
  //verify sample tip count for Tray1 as 1
  sTipTrayTipsCount = arrsTray1Inventory[2];
  return StepVerifyTipTrayCountRemaining("Tray1",sTipTrayTipsCount,"")
}


function ThenVerifyTray1DisplaysTipsCountRemainingBasedOnAspirationAndInUse()
{
  //when tips count above threshold for Tray1
  //create 1 patient orders
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var SampleIDs = dictColumn["Item"]("SampleId");
  var Specimen = dictColumn["Item"]("Specimen");
  var Priority = dictColumn["Item"]("Priority");
  var Analyzer = dictColumn["Item"]("Analyzer");
  var Assay = dictColumn["Item"]("Assay");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  
  var arrSampleIDs = SampleIDs["split"](";")

  if(!StepCreatePatientOrderHydra(arrSampleIDs[0],Specimen,Priority,Analyzer,Assay)) 
      return false
      
  if(!StepLoadSamples(arrSampleIDs[0]))
    return false
  
  //check if 1st sample aspirated and after aspiration
  if(!StepCheckSampleStatus(arrSampleIDs[0],SampleStatus))
    return false
  
  //when tips count is above threshold for Tray1 and then verify remaining tip count of Tray1
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var sTray1Inventory = dictColumn["Item"]("Tray1Inventory");
  var arrsTray1Inventory = sTray1Inventory["split"](";");
  
  sTray =arrsTray1Inventory[0]
  sTipTrayTipsCount = arrsTray1Inventory[2]-1; //(5-1)
  if(!StepVerifyTipTrayCountRemaining(sTray,sTipTrayTipsCount,""))
    return false
  
  sTipTrayStatus = arrsTray1Inventory[3];
  return StepVerifyTipTrayStatus(sTray,sTipTrayStatus,"") //InUse
  
}


function ThenVerifyTray2RemainingCountAndNotInUSE()
{
    InitializeMetaDataHYDRA();

  //verify Tray2 status Not InUse and still tip remaining count as 3
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var sTray2Inventory = dictColumn["Item"]("Tray2Inventory");
  var arrsTray2Inventory = sTray2Inventory["split"](";");
  
  sTray =arrsTray2Inventory[0]
  sTipTrayTipsCount = arrsTray2Inventory[1];
  if(!StepVerifyTipTrayCountRemaining(sTray,sTipTrayTipsCount,""))
    return false
    
  return true
//    
//  sTipTrayStatus = arrsTray2Inventory[0];
//  if(StepVerifyTipTrayStatus(sTipTrayStatus,""))//Not InUse
//    return true
//  else
//    return false

}

function ThenVerifySystemSwtichedToTray2AfterTray1Depletes()
{
  
  InitializeMetaDataHYDRA();
  
  //create 4 patient orders
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var SampleIDs = dictColumn["Item"]("SampleId");
  var Specimen = dictColumn["Item"]("Specimen");
  var Priority = dictColumn["Item"]("Priority");
  var Analyzer = dictColumn["Item"]("Analyzer");
  var Assay = dictColumn["Item"]("Assay");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  
  var arrSampleIDs= SampleIDs["split"](";");
  
  for(var i =0;i<4;i++)
  {
    var arrSampleIDs= SampleIDs["split"](";");
    if(!StepCreatePatientOrderHydra(arrSampleIDs[i],Specimen,Priority,Analyzer,Assay)) 
      return false
  }
  
     //Load 2 samples  -- This will make Tray1 Empty and Tray2 at 2 tips-IN Use
    for(var i =0;i<2;i++)
    { 
      if(!StepLoadSamples(arrSampleIDs[i]))
        return false
    }
       
      //Verify Sample Status of two samples
    for(var j =0;j<2;j++)
    {
      if(!StepCheckSampleStatus(arrSampleIDs[j],SampleStatus))
      return false
    }

    //verify Tip Tray1 Empty (depleted) 
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var Tray1Inventory = dictColumn["Item"]("Tray1Inventory");
  var Tray2Inventory = dictColumn["Item"]("Tray2Inventory");
  arrsTray1Inventory = Tray1Inventory["split"](";")
  arrsTray2Inventory = Tray2Inventory["split"](";")
  sTray = arrsTray1Inventory[0]
  sTipTrayStatus = arrsTray1Inventory[4];
  if(!StepVerifyTipTrayStatus(sTray,sTipTrayStatus,"Red")) //Tray1 Empty
    return false

//Verify  Tip2 Tray count reduced to 2
  sTray = arrsTray2Inventory[0]
  sTipTrayTipsCount =arrsTray2Inventory[2]-1;
  if(!StepVerifyTipTrayCountRemaining(sTray,sTipTrayTipsCount,""))//Tray2 Tipcount = 2
    return false
  else
    return true



}

  
function ThenAfterTray2GetsDepletedTray2ShownAsEmpty()
{
  
  InitializeMetaDataHYDRA();

    
  //Load two more samples to deplete Tray2
      
  arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var SampleIDs = dictColumn["Item"]("SampleId");
  var SampleStatus = dictColumn["Item"]("SampleStatus");
  
  var arrSampleIDs= SampleIDs["split"](";");
 
     //Load 2 more samples  -- This will make Tray2 Empty
    for(var i =2;i<4;i++)
    { 
      if(!StepLoadSamples(arrSampleIDs[i]))
        return false
    }
       
      //Verify Sample Status of two samples
    for(var j =2;j<4;j++)
    {
      if(!StepCheckSampleStatus(arrSampleIDs[j],SampleStatus))
      return false
    }
  
  //verify Tip Tray2 Empty
  arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","GWT278988_16_SampleTips");
  dictColumn = arrTestData[0];
  var Tray2Inventory = dictColumn["Item"]("Tray2Inventory");
  arrsTray2Inventory = Tray2Inventory["split"](";")
  
  sTipTrayStatus = arrsTray2Inventory[4];
  return StepVerifyTipTrayStatus("Tray2",sTipTrayStatus,"") //Tray2 Empty
    
}

function ThenVerifySampleNotAspiratedWithTIPSEmpty()
{

  try{
      InitializeMetaDataHYDRA();

    
      //Load one samples to check whether sample not getting processed when TIP Trays are depleted
      
      arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","GWT278988_16_SampleTips");
      dictColumn = arrTestData[0];
      var SampleIDs = dictColumn["Item"]("SampleId");
      var SampleStatus = dictColumn["Item"]("SampleStatus");
  
      var arrSampleIDs= SampleIDs["split"](";");
 
         //Load 5th sample

          if(!StepLoadSamples(arrSampleIDs[4]))
            return false

       
          //Verify Sample Status of two samples
          return(StepCheckSampleStatus(arrSampleIDs[4],"Assay Error"))
            
  
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }

}


function ThenVerifyNoAlertButEventLogAndSampleNotAspirated()
{
  //TO DO -No alert should be generated in case of tips depletion
  
  //TO DO -Event log should be generated
  
  //TO DO -After both trays are EMPTY, sample aspiration should be stopped and should NOT process IM tests

}




/*-------
 BHAWYA 
 -------*/
//******************************************************************************
//          FEATURE : 225712 : On-board reagent inventory tracking
//******************************************************************************

function GivenIMCHReagentPackDisabled()
{
  
    //Initialize Variables
    var Returnval = true;
    var res
    
    //Initialize XMLs
    InitializeMetaDataHYDRA();

    //Read Test data
    var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnloadLoadDisabledIMCHReagent");
    var dictColumn=arrTestData[0];
    var ReagentType=dictColumn["Item"]("ReagentType")
    var ReagentName = dictColumn["Item"]("ReagentName")
        
    //StepDefinition - Navigate to reagent Overview
    res =StepOperatorNavigatesToReagentOverviewScreen();
    if(!res){
     Returnval = false}
      
    //StepDefinition - Verify Reagent Pack is Enabled
    res =StepVerifyReagentPackIsEnabled(ReagentName);
    if(!res){
     Returnval =false;}
                  
    //StepDefinition - DisableReagentPack
    res =StepDisableReagentPack(ReagentName,ReagentType);
    if(!res){
        Returnval =false;}
                
     //Close Log
    Log["PopLogFolder"]()
        
    //Return
    return Returnval
  
}

function WhenIAReagentPackUnloadedAndReloaded()
{
      //Read Data
      arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnloadLoadDisabledIMCHReagent");
      dictColumn = arrTestData[0];
      var Assay = dictColumn["Item"]("Assay")
      var Analyzer = dictColumn["Item"]("Analyzer")
  
      arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","ExecutePredefinedSeq2");
      dictColumn =arrTestData[0];
      var MechNameIA = dictColumn["Item"]("MechanismName")
      var SeqNameIA = dictColumn["Item"]("SeqName")
  
      //Navigate to Reagent Overview
      if(!StepOperatorNavigatesToReagentOverviewScreen)
        return false
  
      //Unload Reagent
      if(!StepUnloadReagentHydra(Assay,Analyzer))
        return false
      aqUtils["Delay"](600000, "Wait for 60 seconds before reload IA reagent");
  
      //Load reagent
      return LoadingHydraReagents("IMPrimary",MechNameIA,SeqNameIA)
}

function THENVerifyReagentLoadingScreen(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();

        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnloadLoadDisabledIMCHReagent");
        var dictColumn=arrTestData[0];
        var ReagentName = dictColumn["Item"]("ReagentName")
    
        //StepDefinition - Verify pack Disabled
        res =StepVerifyReagentLoadingScreen(ReagentName);
        if(!res){
            Returnval =false;}
                      
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENVerifyPackDisabledStatePersisted(){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();

        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","UnloadLoadDisabledIMCHReagent");
        var dictColumn=arrTestData[0];
        var ReagentName = dictColumn["Item"]("ReagentName")
    
        //StepDefinition - Verify pack Disabled
        res =StepVerifyPackDisabled(ReagentName);
        if(!res){
            Returnval =false;}
                      
        //Return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}


//------------------------------------------------------------------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------------

function WhenWasteStatusUpdatedinDB(DBExcelColName,DBlogText){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update DB
        if(!StepUpdateDB(strQuery,strConString)){
            Returnval = false }
        else
        Log["Checkpoint"]("The"+DBlogText+" -updated successfully in DB")
        
        //Launch and login to Hydra
        InitializeHydra()
        
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
} 

//Ramitha
function ThenWasteStatusDisplayed(StrWasteStatus,WasteType){
  try
  {
        //Initialize variable
        var Returnval = true;       
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CuvettesandTipswaste");
        var dictColumn=arrTestData[0];
        var TipsWasteControlName=dictColumn["Item"]("TipswastecontroNames")
        var CuvettesWasteControlName=dictColumn["Item"]("CuvettewastecontroNames")
     
       switch(WasteType)
        {
          case "Cuvettes": 
                     if(!StepCaptureWasteStatus(CuvettesWasteControlName,StrWasteStatus,WasteType))
                         { Returnval =false;
                         }
                break;
          case "Tips":
                        if(!StepCaptureWasteStatus(TipsWasteControlName,StrWasteStatus,WasteType))
                         { Returnval =false;
                         }
                  break;                 
          default:
              break;
              }
      
        //return
        return Returnval;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}


function WhenOperatorSelectsYesInTheConfirmationPopup()
 {
    try{
        
      Log["AppendFolder"]("Operator selects Yes in the Confirmation popup");
    
       InitializeMetaDataHYDRA();  
       
       if(!StepSelectsYesInTheConfirmationPopup())
       {
           Log["Error"]("Operator couldnot confirm the popup");
           Log["PopLogFolder"]();
           return false;}
       else
       {
           Log["Checkpoint"]("Operator selected Yes in the confirmation popup"); 
           Log["PopLogFolder"]();
           return true;
       } 
 }
    catch(exp)
      {
        Log["Message"]("Exception - " + exp["Description"]);
        return false;
      }
}

function WhenOperatorSelectsNoInTheConfirmationPopup()
 {
    try{
        
      Log["AppendFolder"]("Operator selects No in the Confirmation popup");
    
       InitializeMetaDataHYDRA();  
       
       if(!StepSelectsNoInTheConfirmationPopup())
       {
           Log["Error"]("Operator couldnot confirm the popup");
           Log["PopLogFolder"]();
           return false;}
       else
       {
           Log["Checkpoint"]("Operator selected No in the confirmation popup"); 
           Log["PopLogFolder"]();
           return true;
       } 
 }
    catch(exp)
      {
        Log["Message"]("Exception - " + exp["Description"]);
        return false;
      }
}

function GivenWasteDrawerClosed(WasteType)
{ 
  try
  {
        //Initialize Variables
        var Returnval = true;
        InitializeMetaDataHYDRA()
         
        Log["AppendFolder"]("Performing Reagent Door Close Operation");   
          
        // Navigate to Supplies Overview Screen
        if(!StepOperatorNavigatesToSupplies())
        return false;
        
        //Open waste drawer first
        if(!StepWasteDrawerOpenClose(WasteType,"Open"))
        { 
          Log["Error"](WasteType+" Waste drawer open Failed");
          Log["PopLogFolder"]();
          return false;}
        else
        {
          Log["Checkpoint"](WasteType+"Waste drawer open action completed Successfully");
          Log["PopLogFolder"]();
          Returnval = true;          
        } 
         //Close waste drawer
        if(!StepWasteDrawerOpenClose(WasteType,"Close"))
        { 
          Log["Error"](WasteType+" Waste drawer close Failed");
          Log["PopLogFolder"]();
          return false;}
        else
        {
          Log["Checkpoint"](WasteType+" Waste drawer close action completed Successfully");
          Log["PopLogFolder"]();
          Returnval = true;          
        }     
      return Returnval;
  }
  catch(exp)
  {
    Log.Error(exp.description) ; 
    return false;
  }
}   

function GetReservoirWasteCountFromDB(DBExcelColName,WasteType){  
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        QueryModified = aqString["Replace"](strQuery, "$WasteType", "'"+WasteType+"'", false)
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
        
        //StepDefinition - Update DB
        RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
        RecordSet["MoveFirst"]
          while(!RecordSet.EOF){
              strReservoirWasteCount = RecordSet["Fields"]("ActualReservoirCapacity")["Value"];
              RecordSet["MoveNext"]
          }
        
        if(strReservoirWasteCount == null){
            return false }
        else
            Log["Checkpoint"]("fetched " +WasteType+" reservoir waste count from DB")
        
        //return
        return strReservoirWasteCount;
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}
function GetWasteBinCountFromDB(DBExcelColName,WasteType){  
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        QueryModified = aqString["Replace"](strQuery, "$WasteType", "'"+WasteType+"'", false)
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
        
        //StepDefinition - Update DB
        RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
        RecordSet["MoveFirst"]
          while(!RecordSet.EOF){
              strWasteBinCount = RecordSet["Fields"]("ActualBinCapacity")["Value"];
              RecordSet["MoveNext"]
          }
        
        if(strWasteBinCount == null){
            return false }
        else
            Log["Checkpoint"]("fetched " +WasteType+" waste bin count from DB")
        
        //return
        return strWasteBinCount;
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenCompareWasteCountFromDBAndReservoirCountPriorPopup(DBColNameWasteCount,ReservoirCount,WasteType){  
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
           
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies",DBColNameWasteCount);
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        QueryModified = aqString["Replace"](strQuery, "$WasteType", "'"+WasteType+"'", false)
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update DB
        RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
        RecordSet["MoveFirst"]
          while(!RecordSet.EOF){
              strWasteBinCount = RecordSet["Fields"]("ActualBinCapacity")["Value"];
              RecordSet["MoveNext"]
          }
        
        if(strWasteBinCount == ReservoirCount){
            Log["Checkpoint"]("New " +WasteType+" wastebin count = number of " +WasteType+" in the reservoir")
            Returnval = true }
        else
            Log["Error"]("New " +WasteType+" wastebin count is not equal to " +WasteType+" count in the reservoir")
            Returnval = false
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}

function ThenCompareWasteAndReservoirCountPriorPopup(DBColNameWasteCount,WasteBinCount,ReservoirCount,WasteType){  
    try
    { 
        //Initialize Variables
        var Returnval = true;
        var res,arrTestData,dictColumn,strQuery,strConString;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read data for DB
        arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies",DBColNameWasteCount);
        dictColumn=arrTestData[0];
        strQuery = dictColumn["Item"]("Query")
        QueryModified = aqString["Replace"](strQuery, "$WasteType", "'"+WasteType+"'", false)
        strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
    
        //StepDefinition - Update DB
        RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
        RecordSet["MoveFirst"]
          while(!RecordSet.EOF){
              strWasteBinCount = RecordSet["Fields"]("ActualBinCapacity")["Value"];
              RecordSet["MoveNext"]
          }
        
        if(strWasteBinCount == (WasteBinCount + ReservoirCount)){
            Log["Checkpoint"]("New " +WasteType+" wastebin count = number of " +WasteType+" in the bin prior to removal from the system + number of " +WasteType+" in the reservoir")
            Returnval = true }
        else
            Log["Error"]("New " +WasteType+" wastebin count is not updated with the prior waste bin count + reservoir count")
            Returnval = false
        //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}
function ThenAlertStatusForInventoryforaboveThreshold()
{
  try
  {
      //Initialize variable
      var Returnval = true; 
      var AlertMessageCode="ALERT_WASTE_CUVETTES_BIN_MORE_THAN_THRESHOLD_PERCENTAGE_FULL";
      var SeverityLevel="Error"
      
      Log["AppendFolder"]("Alert Status : Inventory");
      
      if(!StepVerifyUIAlertOnInventory(AlertMessageCode,SeverityLevel))
        Returnval =false;
        
      Log["PopLogFolder"]();
        
      //return
      return Returnval;
  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}

//******************************************************************************
//     Scenarios [FEATURE : 247557 - Supplies Miscellaneous Functionality]              
//**********************************************************************

function ThenVolumeLotExpDateOBSLotIDforCHfluids(DBExcelColName,strVolPercent,strOBSValue,strLotExpDate,strLOTValue)
{
  try
  {
        //Initialize variable
        var Returnval = true;      
  
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckCHSystemFluids");
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        var LotIdNames=dictColumn["Item"]("LotIDNames")
        var ArrLotIdNames=LotIdNames["split"](",") ;
        
        //Read data for DB
        var arrTestData1 = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        var dictColumn1=arrTestData1[0];
        var strQuery = dictColumn1["Item"]("Query2")
        var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"

 /*---------------- VOLUME PERCENT ----------------*/      
        Log["AppendFolder"]("Volume Status ");
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrVolumeControlNames[i],"VolumePercent",strVolPercent))
            Returnval =false;
        }
      Log["PopLogFolder"]();
        
        /*---------------- LOT EXPIRATION ----------------*/
        Log["AppendFolder"]("Lot Expiration Date Status");
               
        for(i =0 ;i< dataCount ; i++)
        {
            strQuery = dictColumn1["Item"]("Query2")
            CurrentConsumeID=ArrConsumableID[i];       
            QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false);
        
            //StepDefinition -Query
            RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
            RecordSet["MoveFirst"];
            while(!RecordSet.EOF)
            {
              strLotExpDate = RecordSet["Fields"]("LotExpDate")["Value"];
              RecordSet["MoveNext"];
            }
  
            //StepDefinition
            if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotControlNames[i],"LotExpirationDate",strLotExpDate))
                  Returnval = false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- OBS ----------------*/
        Log["AppendFolder"]("OBS Status");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS",strOBSValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- LOT ID sequence ----------------*/
        Log["AppendFolder"]("LOT ID ");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotIdNames[i],"LOT",strLOTValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        //return
        return Returnval;

  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}
function ThenVolumeLotExpDateOBSLotIDforIMfluids(DBExcelColName,strVolPercent,strOBSValue,strLotExpDate,strLOTValue)
{
  try
  {
        //Initialize variable
        var Returnval = true;      
  
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckIMSystemFluids");
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        var LotIdNames=dictColumn["Item"]("LotIDNames")
        var ArrLotIdNames=LotIdNames["split"](",") ;
        
        //Read data for DB
        var arrTestData1 = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        var dictColumn1=arrTestData1[0];
        var strQuery = dictColumn1["Item"]("Query2")
        var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"

 /*---------------- VOLUME PERCENT ----------------*/      
        Log["AppendFolder"]("Volume Status ");
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrVolumeControlNames[i],"VolumePercent",strVolPercent))
            Returnval =false;
        }
      Log["PopLogFolder"]();
        
        /*---------------- LOT EXPIRATION ----------------*/
        Log["AppendFolder"]("Lot Expiration Date Status");
               
        for(i =0 ;i< dataCount ; i++)
        {
            strQuery = dictColumn1["Item"]("Query2")
            CurrentConsumeID=ArrConsumableID[i];       
            QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false);
        
            //StepDefinition -Query
            RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
            RecordSet["MoveFirst"];
            while(!RecordSet.EOF)
            {
              strLotExpDate = RecordSet["Fields"]("LotExpDate")["Value"];
              RecordSet["MoveNext"];
            }
  
            //StepDefinition
            if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotControlNames[i],"LotExpirationDate",strLotExpDate))
                  Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- OBS ----------------*/
        Log["AppendFolder"]("OBS Status");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS",strOBSValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- LOT ID sequence ----------------*/
        Log["AppendFolder"]("LOT ID ");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotIdNames[i],"LOT",strLOTValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        //return
        return Returnval;

  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}
function ThenVolumeLotExpDateOBSLotIDforIMTfluids(DBExcelColName,strVolPercent,strOBSValue,strLotExpDate,strLOTValue)
{
  try
  {
        //Initialize variable
        var Returnval = true;      
  
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckIMTSystemFluids");
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        var LotIdNames=dictColumn["Item"]("LotIDNames")
        var ArrLotIdNames=LotIdNames["split"](",") ;
        
        //Read data for DB
        var arrTestData1 = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        var dictColumn1=arrTestData1[0];
        var strQuery = dictColumn1["Item"]("Query2")
        var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"

 /*---------------- VOLUME PERCENT ----------------*/      
        Log["AppendFolder"]("Volume Status ");
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrVolumeControlNames[i],"VolumePercent",strVolPercent))
            Returnval =false;
        }
      Log["PopLogFolder"]();
        
        /*---------------- LOT EXPIRATION ----------------*/
        Log["AppendFolder"]("Lot Expiration Date Status");
               
        for(i =0 ;i< dataCount ; i++)
        {
            strQuery = dictColumn1["Item"]("Query2")
            CurrentConsumeID=ArrConsumableID[i];       
            QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false);
        
            //StepDefinition -Query
            RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
            RecordSet["MoveFirst"];
            while(!RecordSet.EOF)
            {
              strLotExpDate = RecordSet["Fields"]("LotExpDate")["Value"];
              RecordSet["MoveNext"];
            }
  
            //StepDefinition
            if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotControlNames[i],"LotExpirationDate",strLotExpDate))
                  Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- OBS ----------------*/
        Log["AppendFolder"]("OBS Status");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS",strOBSValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- LOT ID sequence ----------------*/
        Log["AppendFolder"]("LOT ID ");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotIdNames[i],"LOT",strLOTValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        //return
        return Returnval;

  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}
function ThenVolumeLotExpDateOBSLotIDforPrtTreatfluids(DBExcelColName,strVolPercent,strOBSValue,strLotExpDate,strLOTValue)
{
  try
  {
        //Initialize variable
        var Returnval = true;      
  
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckPretreatmentSystemFluids");
        var dictColumn=arrTestData[0];
        var ConsumableID=dictColumn["Item"]("ConsumableID")
        var ArrConsumableID=ConsumableID["split"](";") ;
        var dataCount = ArrConsumableID.length
        var SuppliesType=dictColumn["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var VolumeControlNames=dictColumn["Item"]("VolumeControlNames")
        var ArrVolumeControlNames=VolumeControlNames["split"](",") ;
        var LotControlNames=dictColumn["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var OBSControlNames=dictColumn["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        var LotIdNames=dictColumn["Item"]("LotIDNames")
        var ArrLotIdNames=LotIdNames["split"](",") ;
        
        //Read data for DB
        var arrTestData1 = GetTestItemsByTestName(DBDataFile,"Supplies",DBExcelColName);
        var dictColumn1=arrTestData1[0];
        var strQuery = dictColumn1["Item"]("Query2")
        var strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"

 /*---------------- VOLUME PERCENT ----------------*/      
        Log["AppendFolder"]("Volume Status ");
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrVolumeControlNames[i],"VolumePercent",strVolPercent))
            Returnval =false;
        }
      Log["PopLogFolder"]();
        
        /*---------------- LOT EXPIRATION ----------------*/
        Log["AppendFolder"]("Lot Expiration Date Status");
               
        for(i =0 ;i< dataCount ; i++)
        {
            strQuery = dictColumn1["Item"]("Query2")
            CurrentConsumeID=ArrConsumableID[i];       
            QueryModified = aqString["Replace"](strQuery, "$ConsumeID", CurrentConsumeID, false);
        
            //StepDefinition -Query
            RecordSet =ReturnQueryRecordSetFromString(QueryModified,strConString);
            RecordSet["MoveFirst"];
            while(!RecordSet.EOF)
            {
              strLotExpDate = RecordSet["Fields"]("LotExpDate")["Value"];
              RecordSet["MoveNext"];
            }
  
            //StepDefinition
            if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotControlNames[i],"LotExpirationDate",strLotExpDate))
                  Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- OBS ----------------*/
        Log["AppendFolder"]("OBS Status");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS",strOBSValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        /*---------------- LOT ID sequence ----------------*/
        Log["AppendFolder"]("LOT ID ");
             
        for(i =0 ;i< dataCount ; i++)
        {          
          //StepDefinition
          if(!StepfnCaptureSuppliesDataforall(ArrSuppliesType[i],ArrLotIdNames[i],"LOT",strLOTValue))
            Returnval =false;
        }
        Log["PopLogFolder"]();
        
        //return
        return Returnval;

  }
  catch(exp)
  {
      Log["Error"]("Exception :"+exp["Description"]);  
      return false;
  }
}


//Bhawya
//******************************************************************************
//          FEATURE : 316568 : Liquid Waste
//******************************************************************************
function GIVENOperatorSchedulesTest()
{
  try
    { 
        //Initialize Variables
        var Returnval = true;

        //Initialize Datafile and XMLS
        InitializeMetaDataHYDRA();
    
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US317279_GWT_01_LiquidWaste");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
        var SampleStatus = dictColumn["Item"]("SampleStatus")

        //Check IM subsystem is in OK status
        if(!StepVerifySubsystemIsOK("IM"))
        {
          Log["Error"]("IM subsystem status in error state")
          return false;
        }
        
        //Create patient order
        if(!StepCreatePatientOrderHydra(SID1,Specimen1,Priority1,Analyzer1,Assay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          return false;
        }
        
        //Load sample
        if(!StepLoadSamples(SID1))
        {
          Log["Error"]("Load Sample Failed")
          return false;
        }
        
        //Check if sample aspirated
        if(!StepCheckSampleStatus(SID1,SampleStatus))
        {
          Log["Error"]("Sample Aspiration Failed")
          return false; 
        }
             
    }
    catch(exp)
    {
        Log["Error"]("Exception : "+exp.description) ;
        return false;
    }
    return true;
}

function WHENPrimaryWasteReservoirLevelFullSensorOFF()
{
  
    //Initialize Variables
    var Returnval = true;
    var res
    
    //Initialize XMLs
    InitializeMetaDataHYDRA();

    //Read Test data
    var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","US317279_GWT_01_LiquidWaste");
    var dictColumn=arrTestData[0];
    var TestData1=dictColumn["Item"]("TestData1")
    var TestData2 = dictColumn["Item"]("TestData2")
        
    //StepDefinition  Enter Diagnostics
    res =StepClickOnEnterDiagnostics();
    if(!res){
    Returnval = false;}
    
    /* Liquid Waste Polling OFF * Initialize Liquid Waste * Home Liquid Waste * Liquid Waste Polling ON  */
    arrTestData = GetTestItemsByTestName(TestDataFile,"Diagnostics","US317279_GWT_01_LiquidWaste");
    dictColumn = arrTestData[0];
    var MechNames = dictColumn["Item"]("MechanismName")
    var SeqNames = dictColumn["Item"]("SeqName")
    var arrMechNames=MechNames["split"](",") ;
    var arrSequenceNames=SeqNames["split"](",") ; 
    for(var i=0;i<arrMechNames["length"];i++)
    {
      //StepDefinition  -Run Seqence
      if(!ExecutePredefinedSequenceRT(arrMechNames[i],arrSequenceNames[i]))
      {
        Log["Error"]("Sequence Execution Failed")
        return false
      }  
    }
        
    //StepDefinition - OFF PrimaryWasteFullSensorWet Liquid Waste Sensor
    res =StepToggleLiquidWasteSensor(TestData1,TestData2);
    if(!res){
     Returnval = false}
     
    
    //Exit Diagnostics and Resume
     if(ClickOnExitDiagnostics())
       Log["Checkpoint"]("Exited Diagnostics Mode");
     else{
        Log["Error"]("Exit Diagnostics Failed"); 
        Log["PopLogFolder"]();
        return false;
     }
     if(StepResumeHydraToReady()){
       Log["Checkpoint"]("Hydra Module Resumed to Ready");
       Log["PopLogFolder"]();
       return true;      
     }
     else{
        Log["Error"]("Hydra Module Resume Failed");
        Log["PopLogFolder"]();
        return false;
     }
       
     //Close Log
    Log["PopLogFolder"]()
        
    //Return
    return Returnval
  
}

function ThenVerifyPatientOrder(ScenarioName)
{
    try
    {
        //Initialize Variables
        var Returnval = true;
        
        //Log message
        Log["AppendFolder"]("Processing patient order..");
        
        //Read data 
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder",ScenarioName);
        var dictColumn=arrTestData[0];
        var SID = dictColumn["Item"]("SampleId")
        
        //check status of sample in sample list
        if(!StepCheckSampleStatus(SID,SampleStatus))
        {
            Log["Error"]("Failed to process sample")
            Returnval = false;
        }
        
        //check status of sample result in work list screen
        if(!StepVerifyTestResult(SID))
        {
            Log["Error"]("Failed to result sample")
            Returnval = false;
        }

        //return
        Log["PopLogFolder"]();
        return Returnval;
    }
    catch(exp)
    {
        Log.Error(exp.description) ; 
        return false;
    }
}

function THENVerifyNewTestsScheduled()
{
  try
    { 
        //Initialize Variables
        var Returnval = true;

        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"PatientOrder","US317279_GWT_01_LiquidWaste");
        var dictColumn=arrTestData[0];
        var Assay1 = dictColumn["Item"]("Assay")
        var Specimen1 = dictColumn["Item"]("Specimen")
        var Priority1 = dictColumn["Item"]("Priority")
        var Analyzer1 = dictColumn["Item"]("Analyzer")
        var SID1 = dictColumn["Item"]("SampleId")
        var SampleStatus = dictColumn["Item"]("SampleStatus")

        //Create patient order
        if(!StepCreatePatientOrderHydra(SID1,Specimen1,Priority1,Analyzer1,Assay1)) 
        {
          Log["Error"]("Create Patient order Failed")
          return false;
        }     
    }
    catch(exp)
    {
        Log["Error"]("Exception : "+exp.description) ;
        return false;
    }
    return true;
}

//***************************************************************************************************
//          USERSTORY: 287524 - Alert once if multiple thresholds are met on the same supply         
//***************************************************************************************************
function THENVerifyVisualIndicationForLot(boolFlag){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dataCount2 = arrTestData2.length
        var dictColumn2=arrTestData2[0];
        var SuppliesType=dictColumn2["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var LotControlNames=dictColumn2["Item"]("LotControlNames")
        var ArrLotControlNames=LotControlNames["split"](",") ;
        var LotControlNamesCount = ArrLotControlNames.length
        var lotErrcount=0;
           for(i =0 ;i< LotControlNamesCount ; i++)
          {
            
             if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrLotControlNames[i],"Lot Expiration Date",boolFlag))
               lotErrcount ++;                        
          } 
          if(lotErrcount>0)
               Returnval =false;
                   
           //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
 }
 
function THENVerifyVisualIndicationForOBS(boolFlag){
    try
    { 
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Read Test data
        var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra","CheckVolumeLotOBSForIMTSuppliesAndPretreatment");
        var dataCount2 = arrTestData2.length
        var dictColumn2=arrTestData2[0];
        var SuppliesType=dictColumn2["Item"]("SuppliesType")
        var ArrSuppliesType=SuppliesType["split"](",") ;
        var OBSControlNames=dictColumn2["Item"]("OBSControlNames")
        var ArrOBSControlNames=OBSControlNames["split"](",") ;
        var OBSControlNamesCount = ArrOBSControlNames.length
        var ObsErrcount=0;
         
           for(i =0 ;i< OBSControlNamesCount ; i++)
            {
             if(!StepCheckVisualIndicationForLotVolumeAndOBS(ArrSuppliesType[i],ArrOBSControlNames[i],"OBS Remaining Days",boolFlag))
               ObsErrcount ++;                        
            } 
            if(ObsErrcount>0)
               Returnval =false; 
                   
           //return
        return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
 }
  
function GivenVolumeBelowThreshold()
{
  try
  {
      //Initialize variable
      var Returnval = false;
      
      //Read Test Data - DB query
      arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies","US287524_GWT_IMTPretreatmentVolumeBelowThreshold");
      dictColumn=arrTestData[0];
      strQuery = dictColumn["Item"]("Query")
      strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
      
      //StepDefinition - update volume below threshold in DB
      if(!StepUpdateDB(strQuery,strConString))
      {
          Log["Error"]("Failed to update Volume below threshold for IMT and Pretreatment supplies in DB");
          Returnval = false;
      }
      else
      {
          Log["Checkpoint"]("Updated Volume as below threshold for IMT and Pretreatment supplies");
          Returnval = true;
      }
      
      //return
      return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}

function WhenLotBelowThreshold()
{
  try
  {
      //Initialize variable
      var Returnval = false;
      
      //Read Test Data - DB query
      arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies","US287524_GWT01_LotBelowThreshold");
      dictColumn=arrTestData[0];
      strQuery = dictColumn["Item"]("Query")
      strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
      
      //StepDefinition - Load CH and IM Bulk Fluids in DB
      if(!StepUpdateDB(strQuery,strConString))
      {
          Log["Error"]("Failed to update Lot below threshold for IMT and Pretreatment supplies in DB");
          Returnval = false;
      }
      else
      {
          Log["Checkpoint"]("Updated Lot as below threshold for IMT and Pretreatment supplies");
          Returnval = true;
      }
      
      InitializeHydra();
      //return
      return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}

function WhenLotAndOBSBelowThreshold()
{
  try
  {
      //Initialize variable
      var Returnval = false;
      
      //Read Test Data - DB query
      arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies","US287524_GWT_IMTPretreatmentLotOBSBelowThreshold");
      dictColumn=arrTestData[0];
      strQuery = dictColumn["Item"]("Query")
      strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
      
      //StepDefinition - update volume below threshold in DB
      if(!StepUpdateDB(strQuery,strConString))
      {
          Log["Error"]("Failed to update Lot and OBS below threshold for IMT and Pretreatment supplies in DB");
          Returnval = false;
      }
      else
      {
          Log["Checkpoint"]("Updated Lot and OBS as below threshold for IMT and Pretreatment supplies");
          Returnval = true;
      }
      
      //return
      return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}

function WhenOBSBelowThresLotAboveThres()
{
  try
  {
      //Initialize variable
      var Returnval = false;
      
      //Read Test Data - DB query
      arrTestData = GetTestItemsByTestName(DBDataFile,"Supplies","US287524_GWT_IMTPretreatment_OBSBelowThresLotAboveThres");
      dictColumn=arrTestData[0];
      strQuery = dictColumn["Item"]("Query")
      strConString = "Provider=sqloledb;Server=.;Database=MM;Integrated Security=SSPI;"
      
      //StepDefinition
      if(!StepUpdateDB(strQuery,strConString))
      {
          Log["Error"]("Failed to update OBS below threshold for IMT and Pretreatment supplies in DB");
          Returnval = false;
      }
      else
      {
          Log["Checkpoint"]("Updated OBS as below threshold for IMT and Pretreatment supplies");
          Returnval = true;
      }
      
      InitializeHydra();
      //return
      return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}
function WhenUserAcknowledgesAlert()
{
  try
  {
      //Initialize variable
      var Returnval = false;
      
      //Initialize XMLs
      InitializeMetaDataHYDRA();
      
      //Read Test Data 
      var arrTestData = GetTestItemsByTestName(TestDataFile,"Alerts","US287524_IMTPretreatment_VolumeBelowThresAlert");
      dictColumn=arrTestData[0];
      var AlertMessage = dictColumn["Item"]("Alert");
      
      //StepDefinition 
      if(!StepNavigateToHydraModule()){
          return false;}
      
      var arrAlertMessage=AlertMessage["split"](";");       
      if(!StepAlertAcknowledgementByUser(arrAlertMessage)){
      return false;}
      
      //return
      return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}

function ThenNoAlertDisplayed(AlertTestDataColName)
{
  try
  {
      //Initialize variable
    //  var Returnval = false;
      
      //Initialize XMLs
      InitializeMetaDataHYDRA();
      
      //Read Test Data 
      var arrTestData = GetTestItemsByTestName(TestDataFile,"Alerts",AlertTestDataColName);
      dictColumn=arrTestData[0];
      var AlertMessage = dictColumn["Item"]("Alert");
      
      //StepDefinition 
      if(!StepNavigateToHydraModule()){
          return false;}
      
      var arrAlertMessage=AlertMessage["split"](";");   
      return(StepNoAlertPresent(arrAlertMessage))    
      //if(!StepNoAlertPresent(arrAlertMessage)){
      //return false;}
      
      //return
    //  return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}

function THENVerifyAlertForSuppliesBelowThreshold(AlertTestDataColName)
{
  try
  {
      //Initialize variable
    //  var Returnval = true;
      
      //Initialize XMLs
      InitializeMetaDataHYDRA();
     // AlertTestDataColName = "IMTPreLoadedFluidAboveThresAndLotOBSBelowThreshold";
      
      //Read Test Data 
      var arrTestData = GetTestItemsByTestName(TestDataFile,"Alerts",AlertTestDataColName);
      dictColumn=arrTestData[0];
      var AlertMessageVol = dictColumn["Item"]("Alert");
      
      
      //StepDefinition 
      if(!StepNavigateToHydraModule()){
          return false;}
      
      var arrAlertMessageVol=AlertMessageVol["split"](";");       
      return (StepAlertPresent(arrAlertMessageVol));
     // if(!StepAlertPresent(arrAlertMessageVol)){
     // Returnval = false;}
      
      
      //return
     // return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}


function THENVerifyOperatorEventLogWhenTIPSCountMeetThreshold(ScenarioColumnName)
{
      try
    { 
          
        //Initialize Variables
        var Returnval = true;
        
        //Initialize XMLs
        InitializeMetaDataHYDRA();
        
        //Navigate to OperatorEventLog screen
        if(!InvokeWorkflow("System_Logs_OperatorEventLog")){
            Log["PopLogFolder"]();
            return false
        }
        
        
        
        //Read Test data
        var arrTestData = GetTestItemsByTestName(TestDataFile,"Inventory_Hydra",ScenarioColumnName);
        dictColumn=arrTestData[0];
        var arrEventLog=dictColumn["Item"]("LogEntryForTIPSBelowThreshold")
        var EventLog=arrEventLog["split"](",");
      
        for(count=0;count<EventLog["length"];count++)
        {
           //if(!StepVerifyHydraEventLog("24 Hours","HYDRA1",EventLog[count]))
           if(!StepVerifyHydraEventLog("All","HYDRA1",EventLog[count]))
           {
             Returnval= false;
           }
        }

       return Returnval
             
    }catch(exp){
        Log.Error(exp.description) ; 
        return false;
    }
}




function THENVerifyAlertsForSupplies()
{
  try
  {
      //Initialize variable
      var Returnval = true;
      
      //Initialize XMLs
      InitializeMetaDataHYDRA();
      
      //Read Test Data 
      var arrTestData = GetTestItemsByTestName(TestDataFile,"Alerts","US287524_IMTPretreatment_VolumeBelowThresAlert");
      dictColumn=arrTestData[0];
      var AlertMessageVol = dictColumn["Item"]("Alert");
      
      var arrTestData1 = GetTestItemsByTestName(TestDataFile,"Alerts","US287524_IMTPretreatment_LotBelowThresAlert");
      dictColumn1=arrTestData1[0];
      var AlertMessageLot = dictColumn1["Item"]("Alert");
      
      var arrTestData2 = GetTestItemsByTestName(TestDataFile,"Alerts","US287524_IMTPretreatment_OBSBelowThresAlert");
      dictColumn2=arrTestData2[0];
      var AlertMessageOBS = dictColumn2["Item"]("Alert");
      
      //StepDefinition 
      if(!StepNavigateToHydraModule()){
          return false;}
      
      var arrAlertMessageVol=AlertMessageVol["split"](";");       
      if(!StepAlertPresent(arrAlertMessageVol)){
      Returnval = false;}
      
      var arrAlertMessageLot=AlertMessageLot["split"](";");       
      if(!StepAlertPresent(arrAlertMessageLot)){
      Returnval = false;}
      
      var arrAlertMessageOBS=AlertMessageOBS["split"](";");       
      if(!StepAlertPresent(arrAlertMessageOBS)){
      Returnval = false;}
      
      //return
      return Returnval;
  }
  catch(exp)
  {
    Log["Error"]("Exception :"+exp["Description"]);  
    return false; 
  }
}
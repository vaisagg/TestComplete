//USEUNIT Authentication

//*********************************************************************************
//*  FunctionName : function UninstallARM(){
//*  Description: Uninstalls ARM and SIM bundle Reboot and initiates Installation
//*  Input: NA
//*  Output: NA
//*  Example: UninstallARM
//*  Date of Creating: 14 Dec 2018
//*  Created By: Bhawya V J
//*  Modified By : Shahana [28 May 2019]
//*********************************************************************************
function UninstallARM()
{

	  Log["AppendFolder"]("Uninstall ARM");
      
    //Declare
    var resSIM,resARM ,resDiag
    
    //Project Path
    ProjPath = ProjectSuite["Path"];
    arrPath  = ProjPath["split"]("Hydra")     
    AppConfigFiles =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\";
    
    //Update Build details in BuildInsInfo and Result.xml
    if(!fnUpdateBuildDetails())
      Log["Error"]("Failed to Update Build Details in BuildInsInfo.XML/Result.XML")

    //Shutdown All
    ShutDown_All();

    //StartServiceMSSQLSERVER
    StartServiceMSSQLSERVER();
      
    //Delete SmokeComplete
    if(aqFileSystem["Exists"]("F:\\Installer\\Files\\SmokeComplete.txt"))
    {
      aqFileSystem["DeleteFile"]("F:\\Installer\\Files\\SmokeComplete.txt");
      Log["CheckPoint"]("Deleted SmokeComplete");
    }
    if(aqFileSystem["Exists"]("F:\\SystemTest\\SmokeComplete.txt"))
    {
      aqFileSystem["DeleteFile"]("F:\\SystemTest\\SmokeComplete.txt");
      Log["CheckPoint"]("Deleted SmokeComplete");
    }
    
    //Delete InstallComplete
    if(aqFileSystem["Exists"]("F:\\Installer\\Files\\InstallComplete.txt"))
    {
      aqFileSystem["DeleteFile"]("F:\\Installer\\Files\\InstallComplete.txt");
      Log["CheckPoint"]("Deleted SmokeComplete");
    }
    
    //Uninstall Diagnostics
	  aqUtils["Delay"](2000);
    resDiag = fnUnistallDiagnostics();
    if(resDiag == "Failed")
    {
      Log["Enabled"] =true;
      Log["Error"]("STOP Execution");
      Runner["Stop"]();
      }  
          
    //Uninstall DL Diagnostics
    aqUtils["Delay"](2000);
	  resDLDiag = fnUnistallDLDiagnostics();
    if(resDLDiag == "Failed")
    {
      Log["Enabled"] =true;
      Log["Error"]("STOP Execution");
      Runner["Stop"]();
    }
    
    //Uninstall MSL Editor
    aqUtils["Delay"](2000);
	  resMSLEditor = fnUnistallMSLEditor();
    if(resMSLEditor == "Failed")
    {
      Log["Enabled"] =true;
      Log["Error"]("STOP Execution");
      Runner["Stop"]();
    }

//    //Commented 28 May - Uninstall not required now
//      
//    //Uninstall SIB
//    //resSIB = fnUninstallApp("SIBBundle","SIB")
//    //if(resSIB == "Failed"){
//      //Log["Enabled"] =true;
//      //Log["Error"]("STOP Execution")
//      //Runner["Stop"]()}
//       
//    //Uninstall SIM
//    aqUtils["Delay"](2000)
//	  resSIM = fnUninstallApp("Siemens SIM Bundle","SIM")
//    if(resSIM == "Failed"){
//      Log["Enabled"] =true;
//      Log["Error"]("STOP Execution")
//      Runner["Stop"]()}
//    
//    //Uninstall ARM
//    aqUtils["Delay"](2000)
//	  resARM = fnUninstallApp("Siemens ARM Bundle","ARM")
//    if(resARM == "Failed"){
//      Log["Enabled"] =true;
//      Log["Error"]("STOP Execution")
//      Runner["Stop"]()}
//  
//    //Uninstall Eng Bundle [Lower bundle on Unisntall ARM this gets uninstalled]
//    resARM = fnUninstallApp("EngineeringBundle","Engineering")
//    if(resARM == "Failed"){
//      Log["Enabled"] =true;
//      Log["Error"]("STOP Execution")
//      Runner["Stop"]()
//    }
      
      //Log Off Other users
      Log["Message"]("LogOff Disconnected Users")
      var oShell=Sys["OleObject"]("Shell.Application"); 
      oShell.ShellExecute("LogOFFusers.cmd","",AppConfigFiles,"runas",1); 
      aqUtils["Delay"](3000)
        
      //Install New build -Silent Install
      Log["Enabled"] =true;
      Log["Message"]("Trigger Silent Install")
      Log["PopLogFolder"]();
      aqEnvironment["RebootAndContinue"]("InstallARM.fnInstallARM", "}EiRJQz4$vcfww", "SiemensInstaller", "");

      }

//*********************************************************************************
//*  FunctionName : fnInstallARM(){
//*  Description: Initiates Silent Installation
//*  Input: NA
//*  Output: NA
//*  Example: fnInstallARM
//*  Date of Creating: 14 Dec 2018
//*  Created By: Bhawya V J
//*********************************************************************************
function fnInstallARM()
{
      
      //StartServiceMSSQLSERVER
      StartServiceMSSQLSERVER();
    
      //DisableIPsecRule [Commented Apr 5 2019]
      //fnDisableIPsecRule()
      
      //Uninstall Diagnostics
      resDiag = fnUnistallDiagnostics();
      if(resDiag == "Failed")
      {
        Log["Enabled"] =true;
        Log["Error"]("STOP Execution");
        Runner["Stop"]();
      }   
            
      //Uninstall DL Diagnostics
      aqUtils["Delay"](2000);
      resDLDiag = fnUnistallDLDiagnostics();
      if(resDLDiag == "Failed")
      {
        Log["Enabled"] =true;
        Log["Error"]("STOP Execution")
        Runner["Stop"]()
      }
      
      //Uninstall MSL Editor
      aqUtils["Delay"](2000);
	    resMSLEditor = fnUnistallMSLEditor();
      if(resMSLEditor == "Failed")
      {
        Log["Enabled"] =true;
        Log["Error"]("STOP Execution");
        Runner["Stop"]();
      }
      
      //Silent Install As admin
      var oShell=Sys["OleObject"]("Shell.Application"); 
      oShell.ShellExecute("Init_Installer.cmd","","F:\\Installer\\Files\\","runas",1); 

      aqUtils["Delay"](2000,"Install Application")
      Log["PopLogFolder"]();
  
}

//*********************************************************************************
//*  FunctionName :  fnUninstallApp(){
//*  Description: Uninstalls Specified Bundle
//*  Input: Application Name,Bundle Name 
//*  Output: String
//*  Example: fnUninstallApp("Siemens SIM Bundle","SIM")
//*  Date of Creating: 14 Dec 2018
//*  Created By: Bhawya V J
//*********************************************************************************
function fnUninstallApp(applicationName,BundleName){
    
    try
    {     //Declare
          var ProjPath, arrPath, AppConfigFiles ,oShell
          var BundleWnd , AppUninstallButton,SuccessMsg
          var propArray,valuesArray,timer
          
          //Log Open
          Log.AppendFolder("Uninstall -"+applicationName)
     
//------------------------------------------------  Uncommented on Jan 11-------------------------------------------------------------     
          ProjPath = ProjectSuite["Path"];
          arrPath  = ProjPath["split"]("Hydra")     
          AppConfigFiles =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\";
      
          //Open Uninstall Window -ARM/SIM
          if((aqString["Find"](BundleName,"ARM")!= -1  ) || (aqString["Find"](BundleName,"SIM")!= -1  )){
             if(!aqFile["Exists"]("F:\\Installer\\UpgradeBuild_\\SystemSoftware\\"+BundleName+"\\"+BundleName+"Bundle.exe")){
                Log["Warning"]("Installed "+BundleName+" Bundle should be available in -F:\\Installer\\UpgradeBuild_\\SystemSoftware\\"+BundleName+"\\"+BundleName+"Bundle.exe")
                Log["Warning"]("Unable to Find -"+applicationName)
                return "Bundle Not Available";
              }
          }
         
           //Open Uninstall Window -Eng Bundle
          if(aqString["Find"](BundleName,"Engineering")!= -1){
             if(!aqFile["Exists"]("F:\\Installer\\UpgradeBuild_\\SiemensInternal\\SIB\\"+BundleName+"Bundle.exe")){
                Log["Warning"]("Installed "+BundleName+" Bundle should be available in -F:\\Installer\\UpgradeBuild_\\SiemensInternal\\SIB\\"+BundleName+"Bundle.exe")
                Log["Warning"]("Unable to Find -"+applicationName)
                return "SIB Bundle Not Available";
              }
          }

          //Open Uninstall Window -SIB Bundle
          if(aqString["Find"](BundleName,"SIB")!= -1){
             if(!aqFile["Exists"]("F:\\Installer\\UpgradeBuild_\\EngineeringAddOn\\Eng\\"+BundleName+"Bundle.exe")){
                Log["Warning"]("Installed "+BundleName+" Bundle should be available in -F:\\Installer\\UpgradeBuild_\\EngineeringAddOn\\Eng\\"+BundleName+"Bundle.exe")
                Log["Warning"]("Unable to Find -"+applicationName)
                return "Bundle Not Available";
              }
          }
          
          //Run Batch File to uninstall
          batFileName = "Uninstall"+BundleName+".bat"
          oShell=Sys["OleObject"]("Shell.Application"); 
          oShell.ShellExecute(batFileName,"",AppConfigFiles,"runas",1);
          aqUtils.Delay(5000)
              
//------------------------------------------------  Commented on Jan 11-------------------------------------------------------------  
 
//        //Open Control Panel
//        Log.Message("Open Control Panel")
//        var WshShell = new ActiveXObject("WScript.Shell");
//        var oExec = WshShell.Exec("RunDll32.exe shell32.dll," + "Control_RunDLL appwiz.cpl,,0");
//        aqUtils.Delay(5000)
//        Sys.Process("Explorer").Refresh(); 
//        var wnd = Sys.Process("Explorer").FindChild("WndCaption", "Programs and Features");
//        if (!wnd.Exists)
//          Log.Error("The 'Programs and Features' window was not found");
//          
//        //Select Application to Uninstall
//        wnd["Maximize"]();
//        aqUtils.Delay(5000)
//        Log.Message("Select App -"+applicationName)
//        var programsList = wnd.FindChild("WndClass", "SysListView32", 2000)
//        Log.Message(programsList.FullName);
//        programsList.ClickItem(applicationName, 0);
//        aqUtils.Delay(5000)
//        var propArray = new Array("ObjectIdentifier", "ClassName")
//        var valuesArray = new Array("Uninstall*", "AJOSplitButton")
//        var UninstallButton = wnd.FindChild(propArray, valuesArray, 100);
//        if(UninstallButton["Exists"]){
//          UninstallButton.Click()
//          aqUtils.Delay(5000)
//        }
//
//        //Click Continue
//        propArray = new Array("WndCaption")
//        valuesArray = new Array("Warning")
//        var WarWindow = Sys.FindChild(propArray, valuesArray, 100);
//        propArray = new Array("WndCaption", "WndClass")
//        valuesArray = new Array("*Continue", "Button")
//        var ContinueButton = WarWindow.FindChild(propArray, valuesArray, 100);
//        if(ContinueButton["Exists"]){
//          Log.Message("Click continue for Warning")
//          ContinueButton.Click();
//          aqUtils.Delay(5000)
//        }
//          
//        //Verify another uninstall in progress Warning
//        else{
//          propArray = new Array("ObjectIdentifier", "WndClass")
//          valuesArray = new Array("Please_wait_until_the_current_program_is_finished_uninstalling_or_being_changed_", "Element")
//          var WarningMsg = Sys.FindChild(propArray, valuesArray, 100);
//          if(WarningMsg["Exists"]){
//              Log["Error"]("Another Install/uninstall in progress")
//              Log["Error"]("STOP EXECUTION")
//              Runner["Stop"]()
//          }
//        }
        
//--------------------------------------------------------------------------------------------------------------------------------------
     
          //Verify Uninstall window Exists
          propArray = new Array("WndCaption")
          valuesArray = new Array(applicationName+"*")
          BundleWnd = Sys.FindChild(propArray, valuesArray, 500);
          if(!BundleWnd["Exists"]){
            Log.Error(applicationName+" Uninstall window doesnot Exists")
            Log["Error"]("STOP EXECUTION")
            Runner["Stop"]()
          }
      
          //Click Uninstall 
          BundleWnd["Activate"]()
          propArray = new Array("WndCaption", "WndClass")
          valuesArray = new Array("*Uninstall", "Button")
          AppUninstallButton = BundleWnd.FindChild(propArray, valuesArray, 100);
          if(AppUninstallButton["Exists"]){
            AppUninstallButton.Click();
            Log.Message("Click on Unistall in Uninstaller window")
          }else{
            Log["Error"]("Uninstall Failed "+BundleName)
            return false;
          }
          aqUtils.Delay(5000)
        
          //Wait for Successfull Msg
          timer =0;
          propArray = new Array("WndCaption", "WndClass")
          valuesArray = new Array("Setup Successful", "Static")
          SuccessMsg = BundleWnd.FindChild(propArray, valuesArray, 100);
		      valuesArray2 = new Array("Setup Failed", "Static")
          FailMsg = BundleWnd.FindChild(propArray, valuesArray2, 100);
          Log["Enabled"] =false;
          while(SuccessMsg["Visible"] == false && FailMsg["Visible"] == false){
            aqUtils.Delay(5000 ,"Wait for Uninstall to Complete")
            timer = timer+1
            propArray = new Array("WndCaption", "WndClass")
            valuesArray = new Array("Setup Successful", "Static")
            valuesArray2 = new Array("Setup Failed", "Static")
            SuccessMsg = BundleWnd.FindChild(propArray, valuesArray, 100);
            FailMsg = BundleWnd.FindChild(propArray, valuesArray2, 100);
            if(timer == 180){
              Log["Enabled"] =true;
              Log["Error"]("Timeout while Uninstallation")
              break;
            }
          }
          Log["Enabled"] =true;
          if(SuccessMsg["Visible"]){
            Log["AppendFolder"]("Close uninstall window")
            BundleWnd["Close"]()
            Log["PopLogFolder"]() 
            Log.Checkpoint("Succesfully Unistalled -"+applicationName)
            Log["PopLogFolder"]()             
          }else if(FailMsg["Visible"]){
            Log["AppendFolder"]("Close uninstall window")
            BundleWnd["Close"]()
            Log["PopLogFolder"]() 
            Log.Checkpoint("Succesfully Unistalled -"+applicationName)
            Log["PopLogFolder"]()             
          }else{
            Log["Error"]("Unable to Unistall -"+applicationName)
            Log["Error"]("STOP EXECUTION")
            Runner["Stop"]()
          }
  }catch(exp){
    Log["Enabled"] =true;
    Log["Error"]("Unable to Uninstall App");
    Log["Error"]("Exception : "+exp["description"]);
    Log["PopLogFolder"]();  
    return "Failed"; 
  }
  Log.PopLogFolder()
  return  "Sucessfull";
}
//*********************************************************************************
//*  FunctionName :  fnUnistallDLDiagnostics()
//*  Description: Uninstalls DL Diagnostics 
//*  Input: NA
//*  Output: NA
//*  Example:fnUnistallDLDiagnostics()
//*  Date of Creating: 8 March 2019
//*  Created By: Bhawya V J
//*********************************************************************************
function fnUnistallDLDiagnostics(){
  try{  
      
      //Declare
      var ProjPath,arrPath,DiagPath,oShell
      
      //Call UninstallDiagnostics.bat
      Log["AppendFolder"]("Uninstall DL Diagnostics")
      ProjPath = ProjectSuite["Path"];
      arrPath  = ProjPath["split"]("Hydra")       
      DiagPath =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles";
        
      oShell=Sys["OleObject"]("Shell.Application");
      oShell.ShellExecute("UninstallDLDiagnostics.bat","",DiagPath,"runas",1);
      
      //Wait to Uninstall
      Timer = 0
      var proparr=["WndClass","WndCaption"]
      var vararr=["ConsoleWindowClass", "Administrator:  UninstallDLDiagnostics"];
      var cmdObj =Sys["Find"](proparr,vararr,500)
      var sText =cmdObj["wText"]
      while(Timer <30){
        aqUtils["Delay"](2000,"Wait to Uninstall Dl Diagnostics")
        Timer =Timer+1
        if(cmdObj["Exists"]){
          cmdObj["Activate"]();
          sText =cmdObj["wText"]
          if(aqString["Find"](sText,"failed",0,false)!= -1){
            Log["Error"]("Unable to Uninstall DL Diagnostics");
            Log["PopLogFolder"]();  
            return "Failed"; 
          }else if(aqString["Find"](sText,"Successfull",0,false)!= -1){
            Log["Checkpoint"]("Sucessfully Uninstalled DL Diagnostics")
            break;
          }
        } 
      }
      cmdObj["Close"]();
      aqUtils["Delay"](2000,"Close cmd")
    
  }catch(exp){
      Log["Enabled"] =true;
      Log["Error"]("Unable to Uninstall DL ");
      Log["Error"]("Exception : "+exp["description"]);
      Log["PopLogFolder"]();  
      return "Failed"; 
  }
  Log["PopLogFolder"]()
  return  "Sucessfull";
}


//*********************************************************************************
//*  FunctionName :  fnUnistallDiagnostics()
//*  Description: Uninstalls Diagnostics Client
//*  Input: NA
//*  Output: NA
//*  Example:fnUnistallDiagnostics()
//*  Date of Creating: 14 Dec 2018
//*  Created By: Bhawya V J
//*********************************************************************************
function fnUnistallDiagnostics(){
  try{  
      
      //Declare
      var ProjPath,arrPath,DiagPath,oShell
      
      //Call UninstallDiagnostics.bat
      Log["AppendFolder"]("uninstall Diagnostics")
      ProjPath = ProjectSuite["Path"];
      arrPath  = ProjPath["split"]("Hydra")       
      DiagPath =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles";
        
      oShell=Sys["OleObject"]("Shell.Application");
      oShell.ShellExecute("UninstallDiagnostics.bat","",DiagPath,"runas",1);
      
      //Wait to Uninstall
      Timer = 0
      var proparr=["WndClass","WndCaption"]
      var vararr=["ConsoleWindowClass", "Administrator:  UninstallDiagnostics"];
      var cmdObj =Sys["Find"](proparr,vararr,500)
      var sText =cmdObj["wText"]
      while(Timer <30){
        aqUtils["Delay"](2000,"Wait to Uninstall Diagnostics")
        Timer =Timer+1
        if(cmdObj["Exists"]){
          cmdObj["Activate"]();
          sText =cmdObj["wText"]
          if(aqString["Find"](sText,"failed",0,false)!= -1){
            Log["Error"]("Unable to Uninstall Diagnostics");
            Log["PopLogFolder"]();  
            return "Failed"; 
          }else if(aqString["Find"](sText,"Successfull",0,false)!= -1){
            Log["Checkpoint"]("Sucessfully Uninstalled Diagnostics")
            break;
          }
        } 
      }
      cmdObj["Close"]();
      aqUtils["Delay"](2000,"Close cmd")
      Log["PopLogFolder"]()
    
  }catch(exp){
      Log["Enabled"] =true;
      Log["Error"]("Unable to Uninstall Diagnostics");
      Log["Error"]("Exception : "+exp["description"]);
      Log["PopLogFolder"]();  
      return "Failed"; 
  }
  return  "Sucessfull";
}

//*********************************************************************************
//*  FunctionName :  fnUnistallMSLEditor()
//*  Description: Uninstalls MSL Editor
//*  Input: NA
//*  Output: NA
//*  Example:fnUnistallMSLEditor()
//*  Date of Creating: 28 May 2019
//*  Created By: Shahana
//*********************************************************************************
function fnUnistallMSLEditor()
{
  try
  {     
      //Declare
      var ProjPath,arrPath,MSLPath,oShell
      
      //Call UninstallMSLEditor.bat
      Log["AppendFolder"]("Uninstall MSLEditor")
      ProjPath = ProjectSuite["Path"];
      arrPath  = ProjPath["split"]("Hydra")       
      MSLPath =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles";
        
      oShell=Sys["OleObject"]("Shell.Application");
      oShell.ShellExecute("UninstallMSLEditor.bat","",MSLPath,"runas",1);
      
      //Wait to Uninstall
      Timer = 0
      var proparr=["WndClass","WndCaption"]
      var vararr=["ConsoleWindowClass", "Administrator:  UninstallMSLEditor"];
      var cmdObj =Sys["Find"](proparr,vararr,500)
      var sText =cmdObj["wText"]
      
      while(Timer <30)
      {
        aqUtils["Delay"](2000,"Wait to Uninstall MSLEditor")
        Timer =Timer+1
        if(cmdObj["Exists"])
        {
          cmdObj["Activate"]();
          sText =cmdObj["wText"]
          if(aqString["Find"](sText,"failed",0,false)!= -1)
          {
            Log["Error"]("Unable to Uninstall MSLEditor");
            Log["PopLogFolder"]();  
            return "Failed"; 
          }
          else if(aqString["Find"](sText,"Successfull",0,false)!= -1)
          {
            Log["Checkpoint"]("Sucessfully Uninstalled MSLEditor")
            break;
          }
        } 
      }
      
      cmdObj["Close"]();
      aqUtils["Delay"](2000,"Close cmd")
      Log["PopLogFolder"]()
    
  }
  catch(exp)
  {
      Log["Enabled"] =true;
      Log["Error"]("Unable to Uninstall MSLEditor");
      Log["Error"]("Exception : "+exp["description"]);
      Log["PopLogFolder"]();  
      return "Failed"; 
  }
  return  "Sucessfull";
}

//*********************************************************************************************
//*  FunctionName :fnUpdateBuildDetails
//*  Description: Update BuildID,Name and Vapp Deatils in BuildInsInfo and Result.xml
//*  Input: NA
//*  Output:NA
//*  Example:  fnUpdateBuildDetails()
//*  Date of Creating: 02/Jan/2018
//*  Last Modified date: 03/Jan/2018
//* Created By : Bhawya V J
//*********************************************************************************************
function fnUpdateBuildDetails(){
  
  try
    {   
        //Declare
        var BuildInsInfoPath,ResXMLPath
        var TFSBuildNumTxt ,ResXMLPath
    
        //Log
        Log["AppendFolder"]("Update Build Details -Prerun")
        
        //Declare
        BuildInsInfoPath = "F:\\Installer\\Files\\BuildInstrumentsInfo.xml"
        ResXMLPath = "F:\\SystemTest\\TestOutput\\Result.xml"

        //Read Build Details
        TFSBuildNumTxt = aqFile.ReadWholeTextFile("F:\\Installer\\UpgradeBuild\\TfsBuildInformation.txt", aqFile.ctANSI);
        sCurrBuildID = aqString["Trim"](TFSBuildNumTxt["split"]("\n")[0])
        
        //Write Build ID and Name in BuildIns Info
        fnReplaceXMLNodeValue(BuildInsInfoPath,"NAME",sCurrBuildID)
        if(fnReplaceXMLNodeValue(BuildInsInfoPath,"BUILDID",sCurrBuildID))
          Log["Checkpoint"]("Sucessfully Updated Build Name and ID in Build Ins info")
        
        //Write VappName And Link as NA in BuildIns Info
        fnReplaceXMLNodeValue(BuildInsInfoPath,"VAPPName","NA")
        if(fnReplaceXMLNodeValue(BuildInsInfoPath,"VAPPLINK","NA"))
            Log["Checkpoint"]("Sucessfully Updated Vapp Link and Name as NA in BuildInsInfo")
            
        //Write Build ID and Name in Resumt XML
        fnReplaceXMLNodeValue(ResXMLPath,"Build",sCurrBuildID)
        if(fnReplaceXMLNodeValue(ResXMLPath,"BuildID",sCurrBuildID))
            Log["Checkpoint"]("Sucessfully Updated Build Name and ID in Result.xml")
        
        //Write VappLink as NA in Result.xml
        if(fnReplaceXMLNodeValue(ResXMLPath,"VAPPLINK","NA"))
          Log["Checkpoint"]("Sucessfully Updated Vapp Link in Result.xml")
          
        //Close Log
        Log["PopLogFolder"]()
        
    }catch(e){
      Log["Error"]("Exception :"+e["Description"]);
      Log["PopLogFolder"]();
      return false;
    }  
    return true;      
}


//*****************************************************************************************
//*  FunctionName :fnGetNodeValue(strFileContent,strNodeName)
//*  Description: Returns the value of a node in given XML
//*  Input: XMLFile content as String,Name of the Node
//*  Output: Node Value
//*  Example:  fnGetNodeValue(strFileContent,"INSTALLTYPE")
//*  Date of Creating: 29/09/2017
//*  Last Modified date: 29/09/2017
//* Created By : Bhawya V J
//*****************************************************************************************

function fnGetNodeValue(strFileContent,strNodeName){
  
  //Declare
  var strValue = "null";
  var startString,endString,intStartIndex,intEndIndex;
  
  try{
     
      startString ="<" + strNodeName + ">";
      endString ="</" + strNodeName + ">";
      intStartIndex = strFileContent.indexOf(startString) ;
      
      //Verify if TAG Exists
      if(intStartIndex == -1){
        Log.Error(strNodeName+" Tag doesnot exist in BuildInstrumentsInfo.xml file");
        return strValue;
      }
      intEndIndex = strFileContent.indexOf(endString,intStartIndex) ;
      strValue = (strFileContent.substring(intStartIndex,intEndIndex)).replace(startString,"");

      return strValue;
      
    }catch(exp){
      Log["Error"](exp["description"])
      return strValue;
    }
}
//***************************************************************************************
//*  FunctionName :fnReplaceEndTag(strPath,strNodeName)
//*  Description: Replaces the XMl End Tag with Start and end tag
//*  Input: XMLFile path,Name of the Node
//*  Output:NA
//*  Example:  fnReplaceEndTag(strPath,strNodeName)
//*  Date of Creating: 02/Jan/2018
//*  Last Modified date: NA
//* Created By : Bhawya V J
//**************************************************************************************
function fnReplaceEndTag(strPath,strNodeName){
  try{  
        //Declare
        var ContentAll, sEndTag, sCurrContent
        
        //Replace any End tag with Start-End Tags
        ContentAll = aqFile.ReadWholeTextFile(strPath, aqFile.ctANSI);
        sEndTag= "<"+strNodeName+"/>"
        if(aqString["Find"](ContentAll,sEndTag)!= -1){
          sCurrContent = aqString["Replace"](ContentAll,sEndTag, "<"+strNodeName+"></"+strNodeName+">")
          aqFile["Delete"](strPath)
          CreatingAndWritingToTextFile(strPath,sCurrContent)
        }  
    }catch(exp){
      Log["Error"](exp["description"])
    }
}

//***************************************************************************************
//*  FunctionName :fnReplaceXMLNodeValue(strPathXML,strNodeName,strNewNodeVal)
//*  Description: Replaces the XMl tag value with New
//*  Input: strPathXML,strNodeName,strNewNodeVal
//*  Output:Boolean
//*  Example:  fnReplaceXMLNodeValue(strPathXML,"BUILD","ARM.T.All")
//*  Date of Creating: 03/Jan/2018
//*  Last Modified date: NA
//* Created By : Bhawya V J
//******************************************************************************************
function fnReplaceXMLNodeValue(strPathXML,strNodeName,strNewNodeVal){
  
  try{
        //Declare
        var XMLAllContent,sNodeValue, sCurrTag,sFinalTag,sCurrContent
        
        fnReplaceEndTag(strPathXML,strNodeName)
        XMLAllContent = aqFile.ReadWholeTextFile(strPathXML, aqFile.ctANSI);
        aqFile["Delete"](strPathXML)
        sNodeValue = fnGetNodeValue(XMLAllContent,strNodeName)
        sCurrTag= "<"+strNodeName+">"+sNodeValue+"</"+strNodeName+">"
        sFinalTag = "<"+strNodeName+">"+strNewNodeVal+"</"+strNodeName+">"
        sCurrContent = aqString["Replace"](XMLAllContent,sCurrTag,sFinalTag)
        if(CreatingAndWritingToTextFile(strPathXML,sCurrContent))
           return true;
        else
          return false;
            
    }catch(exp){
      Log["Error"](exp["description"])
      return false;
    }
    return true
}

//***************************************************************************************
//*  FunctionName :fnDisableIPsecRule
//*  Description: DisableIPsecRule
//*  Input: na
//*  Output:Boolean
//*  Example:  fnDisableIPsecRule
//*  Date of Creating: 16 jan 2019
//*  Last Modified date: 6 March 2019
//* Created By : Bhawya V J
//******************************************************************************************
function fnDisableIPsecRule(){
  try{
        
        ProjPath = ProjectSuite["Path"];
        arrPath  = ProjPath["split"]("Hydra")     
        DiagPath =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\";
      
        //Run DisableIPsecRule.bat
        aqUtils["Delay"](2000,"Run DisableIPsecRule")
        Log["AppendFolder"]("Run DisableIPsecRule.bat")

        var oShell=Sys["OleObject"]("Shell.Application"); 
        oShell.ShellExecute("DisableIPsecRule.bat","",DiagPath,"runas",1); 
            
    }catch(exp){
      Log["Error"](exp["description"])
      return false;
    }
    return true
}
   
        

//*********************************************************************************
//*  FunctionName :  fnInstallDiagnostics()
//*  Description: Installs Diagnostics Client
//*  Input: NA
//*  Output: NA
//*  Example:fnInstallDiagnostics()
//*  Date of Creating: 15 Jan 2019
//*  Created By: Bhawya V J
//*********************************************************************************
function fnInstallDiagnostics()
{
  try
  {  
    
    Log["AppendFolder"]("Install Diagnostics")
    Sys["OleObject"]("WScript.Shell")["Run"]("powershell -file C:\\Siemens\\ARM\\Bin\\Diagnostics\\Add-AppDevPackage.ps1")
    aqUtils["Delay"](20000,"Wait to Install Diagnostics")
    Log["Checkpoint"]("Installed Diagnostics")
    
    //Close Powershell
    Options["Run"]["Delay"] =0;
    Options["Run"]["Timeout"] =0;
    var proparr=["WndClass","WndCaption", "wText"]
    var vararr=["ConsoleWindowClass", "Administrator: Windows PowerShell","*Press Enter to continue...:*"];
        
    var cmdObj =Sys["Find"](proparr,vararr,200)
    if(cmdObj["Exists"])
    {
      cmdObj["Activate"]();
      cmdObj["Close"]();
      aqUtils["Delay"](2000,"Close cmd")
    }  
          
    //Close Log
    Options["Run"]["Timeout"] =10000;
    Log["PopLogFolder"]();
    
  }
  catch(exp)
  {
      Log["Enabled"] =true;
      Log["Error"]("Unable to Install Diagnostics");
      Log["Error"]("Exception : "+exp["description"]);
      Log["PopLogFolder"]();  
      return "Failed"; 
  }
  return  "Successful";
}


//*************************************************************************
//*  FunctionName : StartServiceMSSQLSERVER
//*  Description: StartServiceMSSQLSERVER
//*  Input: na
//*  Output: na
//*  Example: StartServiceMSSQLSERVER()
//*  Date of Creating: 1 Feb 2019
//*  Date of Modify: NA
//*  Created By: Bhawya V J
//*************************************************************************

function StartServiceMSSQLSERVER()
{
    //Log
    Log["AppendFolder"]("Starting service SQL Server MSSQLSERVER")
    
    //Cmd File path
    var ProjPath = ProjectSuite["Path"];
    var arrPath  = ProjPath["split"]("Hydra")     
    var AppConfigFiles =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\";
    
    //Start Service
    var oShell=Sys["OleObject"]("Shell.Application")
    aqUtils["Delay"](1000)   
    oShell.ShellExecute("StartMSSQLServer.cmd","",AppConfigFiles,"runas",1);
    aqUtils["Delay"](5000,"Waiting after starting the MSSQLSERVER")       
    
    //Wait for Starting Service
    var timer = 0
    do{
		aqUtils["Delay"](2000,"Service Starting")
		 timer = timer+1
	}
  while(GetServiceState("SQL SERVER (MSSQLSERVER)") != "Running" || timer < 15)
    
    //Check Status
    if(GetServiceState("SQL SERVER (MSSQLSERVER)") == "Running")
    {
      Log["CheckPoint"]("MSSQLSERVER Service started successfully")
    }
    else
      Log["Error"]("MSSQLSERVER Service not started") 
      
    //Log Pop
    Log["PopLogFolder"]()
}
/*
//*********************************************************************************
//*  FunctionName :  fnUninstallBIReportServer(){
//*  Description: 
//*  Input: 
//*  Output: 
//*  Example: 
//*  Date of Creating: 23 April 2019
//*  Created By: Bhawya V J
//*********************************************************************************
function fnUninstallBIReportServer()
{      
  try
  {      
        //Declare 
        var applicationName ="Microsoft Power BI Report Server"
        Log["AppendFolder"]("Uninstall "+applicationName);
        
        //Open Control Panel
        Log.Message("Open Control Panel");
        var WshShell = new ActiveXObject("WScript.Shell");
        var oExec = WshShell.Exec("RunDll32.exe shell32.dll," + "Control_RunDLL appwiz.cpl,,0");
        aqUtils.Delay(2000);
        Sys.Process("Explorer").Refresh(); 
        var wnd = Sys.Process("Explorer").FindChild("WndCaption", "Programs and Features");
        if (!wnd.Exists)
          Log.Error("The 'Programs and Features' window was not found");
          
        //Select Application to Uninstall
        wnd["Maximize"]();
        aqUtils.Delay(2000)
        Log.Message("Select App -"+applicationName)
        var programsList = wnd.FindChild("WndClass", "SysListView32", 2000)
        Log.Message(programsList.FullName);
        programsList.ClickItem(applicationName, 0);
        aqUtils.Delay(2000)
        var propArray = new Array("ObjectIdentifier", "ClassName")
        var valuesArray = new Array("Uninstall*", "AJOSplitButton")
        var UninstallButton = wnd.FindChild(propArray, valuesArray, 100);
        if(UninstallButton["Exists"])
        {
          UninstallButton.Click()
          aqUtils.Delay(5000)
        }
        else
        {
          return false;
        }

//        //Click Continue
//        propArray = new Array("WndCaption")
//        valuesArray = new Array("Warning")
//        var WarWindow = Sys.FindChild(propArray, valuesArray, 100);
//        propArray = new Array("WndCaption", "WndClass")
//        valuesArray = new Array("*Continue", "Button")
//        var ContinueButton = WarWindow.FindChild(propArray, valuesArray, 100);
//        if(ContinueButton["Exists"]){
//          Log.Message("Click continue for Warning")
//          ContinueButton.Click();
//          aqUtils.Delay(5000)
//        }
//          
//        //Verify another uninstall in progress Warning
//        else{
//          propArray = new Array("ObjectIdentifier", "WndClass")
//          valuesArray = new Array("Please_wait_until_the_current_program_is_finished_uninstalling_or_being_changed_", "Element")
//          var WarningMsg = Sys.FindChild(propArray, valuesArray, 100);
//          if(WarningMsg["Exists"]){
//              Log["Error"]("Another Install/uninstall in progress")
//              Log["Error"]("STOP EXECUTION")
//              Runner["Stop"]()
//          }
//        }
        
          //Verify Uninstall window Exists
          propArray = new Array("ClrClassname","Title")
          valuesArray = new Array("MainView","Microsoft Power BI Report Server*")
          BundleWnd = Sys.FindChild(propArray, valuesArray, 500);
          if(!BundleWnd["Exists"])
          {
            Log.Error(applicationName+" Uninstall window doesnot Exists")
            return false;
          }
      
          //Click Uninstall 
          BundleWnd["Activate"]()
          propArray = new Array("ClrClassName", "WPFControlText")
          valuesArray = new Array("Button", "Uninstall")
          AppUninstallButton = BundleWnd.FindChild(propArray, valuesArray, 100);
          if(AppUninstallButton["Exists"])
          {
            AppUninstallButton.Click();
            Log.Message("Click on Unistall in Uninstaller window")
          }
          else
          {
            Log["Warning"]("Uninstall Failed "+BundleName)
            return false;
          }
          aqUtils.Delay(5000)
        
          //Wait for Successfull Msg
          timer =0;
          propArray = new Array("ClrClassname", "WPFControlText")
          valuesArray = new Array("TextBlock", "Uninstall completed")
          SuccessMsg = BundleWnd.FindChild(propArray, valuesArray, 100);
          Log["Enabled"] =false;
          while(SuccessMsg["Visible"] == false)
          {
            aqUtils.Delay(5000 ,"Wait for Uninstall to Complete")
            timer = timer+1
            propArray = new Array("WndCaption", "WndClass")
            valuesArray = new Array("Setup Successful", "Static")
            SuccessMsg = BundleWnd.FindChild(propArray, valuesArray, 100);
            if(timer == 180)
            {
              Log["Enabled"] =true;
              Log.Error("Unistalltion Failed -"+applicationName)
              return false
            }
          }
          
          BundleWnd["Close"]()
          Log["Enabled"] =true;
          Log["PopLogFolder"]() 
          Log.Checkpoint("Succesfully Unistalled -"+applicationName)
          
  }
  catch(exp)
  {
    Log["Enabled"] =true;
    Log["Warning"]("Unable to Uninstall App");
    Log["Warning"]("Exception : "+exp["description"]);
    Log["PopLogFolder"]();  
    return false
  }
  return  true
}
*/
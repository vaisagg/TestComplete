//USEUNIT PrimeDispAuthentication
//USEUNIT StepDefinitionPrimeDisp

                /*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                            INITIALIZE HYDRA APPLICATION
                /*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/ 

//This function is used for CI  
    
function InitializeApp()
{
  try
  {
    Log["AppendFolder"]("Initialize Hydra Application");
    
    //Initialize Datafile and XMLS
    Log["AppendFolder"]("Initialize Meta Data Hydra");
    InitializeMetaDataHYDRA();
    Log["PopLogFolder"]();
    
    //-----------------Preconfiguration Settings HYDRA--------------------------
    
    //Preconfiguration settings
    if(!PreConfig())
    {
      Log["Error"]("Failed to perform pre-configuration settings");
      Log["PopLogFolder"]();
      return false;
    }
    
    //----------------------Load Reagents HYDRA---------------------------------
    
    if(!LoadRTReagents())
    {
      Log["Error"]("Failed to load reagents");
      Log["PopLogFolder"]();
      return false;
    }
    
    //----------------------LAUNCH HYDRA----------------------------------------
    
    //Result.xml - inprogress
    ReportTestStatusToResultXML("Initialize", "Launch_Hydra", "I");
    
    //Launch Hydra Application
    if(!StepLaunchHydraApplication())
    {
      ReportTestStatusToResultXML("Initialize", "Launch_Hydra", "F");
      Log["Error"]("Failed to launch Hydra application");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Result.xml - pass
    ReportTestStatusToResultXML("Initialize", "Launch_Hydra", "P");  
    
    //----------------------LOGIN HYDRA-----------------------------------------
    
    //Result.xml - inprogress
    ReportTestStatusToResultXML("Initialize", "Login_Hydra", "I");
    
    //Login to Hydra Application
    if(!LoginToHydra("SiemensInternal","Siemens1234567!"))
    {
      ReportTestStatusToResultXML("Initialize", "Login_Hydra", "F");
      Log["Error"]("Failed to Login to Hydra Application");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Result.xml - pass
    ReportTestStatusToResultXML("Initialize", "Login_Hydra", "P");  
    
    //----------------------HYDRA - Ready state---------------------------------
    
    //Result.xml - inprogress
    ReportTestStatusToResultXML("Initialize", "Hydra_Status", "I");
    
    //Login to Hydra Application
    if(!StepCheckAllSystemModulesReadyState())
    {
      ReportTestStatusToResultXML("Initialize", "Hydra_Status", "F");
      Log["Error"]("Failed to move modules to ready state");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Result.xml - pass
    ReportTestStatusToResultXML("Initialize", "Hydra_Status", "P");
    
    //--------------------------------------------------------------------------
    
    Log["PopLogFolder"](); 
    return true;
  }
  catch(e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"](); 
    return false;
  }
}

//*************************************************************************
//*  FunctionName : PreConfig
//*  Description: Install diagnostic, TCCS, pre-run
//*  Input: na
//*  Output: NA
//*  Example: PreConfig()
//*  Date of Creating: 25 March 2019
//*  Created By: Bhawya V J
//*  Modified By: Shahana [28 May 2019]
//*************************************************************************                
function PreConfig()
{
    try
    {
        //Log
        Log["AppendFolder"]("Hydra - PreConfig")
    
//        //Update Build Details
//        fnUpdateBuildDetails()
        
//        //shutdown
    
//        //Install Diagnostics
//        if(fnInstallDiagnostics()!= "Successful")
//        {
//          Log["Error"]("STOP EXECUTION");
//          Log["PopLogFolder"]();
//          return false;
//        }
//        
//        //Delete the latest RegisterIM log file
//        var sRegisterIMFolderpath="F:\\InstrumentOutput\\UIW\\Logs";
//        var sLatestFileName=GetLatestRegisterIMLogFile();
//   
//        if(!(sLatestFileName==""))
//         {
//          aqFileSystem["DeleteFile"](sRegisterIMFolderpath+"\\"+sLatestFileName)
//          Log["Message"](sLatestFileName+" file got deleted")
//          aqUtils["Delay"](10000,"Deleting Register IM Log file")
//         }          
//		
//        //Run TCCS
//        if(!fnRunTCCSHydra())
//        {
//              Log["Error"]("TCCS Failed -STOP EXECUTION")
//              Log["PopLogFolder"]()
//              return false;
//        }
      
        //System Configuration 
        if(!PreRunHydra())
        {
          Log["Error"]("STOP EXECUTION : System Configurations Failed");
          Log["PopLogFolder"]();
          return false;
        }  
    }
    catch(e)
    {
        Log["Error"]("Exception : "+e["Description"]);
        Log["PopLogFolder"]();
        return false;
    }
    
    Log["PopLogFolder"]();
    return true;
}

//*************************************************************************
//*  FunctionName : PreRunHydra
//*  Description: PreRunHydra 
//*  Input: na
//*  Output: na
//*  Example: PreRunHydra()
//*  Created By: Bhawya V J
//*************************************************************************
function PreRunHydra()
{
  try
    {
        var vistaConfigurationMainForm;
        var moduleIDEntry;
        var textBoxExt;
        var ProjPath = ProjectSuite["Path"];
        var obj = new ActiveXObject("WScript.shell")
        
        //Open log
        Log["AppendFolder"]("Hydra - PRERUN")
        
        //Test data
        var ProjPath = ProjectSuite["Path"];
        var arrPath  = ProjPath["split"]("Hydra") 
        var TestDataFile =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\TestData.xls";
        var DBDataFile =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\DBQuery.xls";    
        var TestData =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\";
        var SimulationPath = "C:\\data\\deploy\\simulation\\";
        var SimulatorFolderPath="C:\\Siemens\\ARM\\Bin\\Configuration\\Overwrite for Test Fixture";
        var SimulatorSequenceFolderPath="C:\\Siemens\\ARM\\Bin\\Configuration\\Overwrite for Test Fixture\\Sequences";
        var SequenceFolderPath="C:\\Siemens\\ARM\\Bin\\Configuration\\Sequences";
        var ConfigurationFolderPath="C:\\Siemens\\ARM\\Bin\\Configuration";
        var StateMgrConfigFile = "C:\\Siemens\\ARM\\Bin\\Configuration\\StateManagerConfiguration.json";  
        var SystemSpecificAnalyFolder="F:\\SystemSpecificConfigs\\AnalyticalModule";
        var SystemSpecificDirectFolder="F:\\SystemSpecificConfigs\\DirectLoad";

        
        
        //Enable Guest Logon [To access IoT machine filesystem] Bhawya Oct 2019
        obj = new ActiveXObject("WScript.shell");
        aqUtils["Delay"](1000,"Run Enable Guest Logon.bat");
        Log["AppendFolder"]("Enable Guest Logon");
        var oShell=Sys["OleObject"]("Shell.Application"); 
        oShell.ShellExecute("EnableGuestLogon.bat","",TestData,"runas",1); 
        aqUtils["Delay"](3000,"Enable Guest Logon");
        Log["Checkpoint"]("GuestLogon Enabled from registry");
        Log["PopLogFolder"]();
          
        // get Primiry UI Name (ex. 5ceed41e-3bef-42e2-9ad9-eb1335f89a75_qykmnxfx80qb6)
        var uiName = GetUINameFromAppList();
        
        // write ChangePrivacySettings.ps1 with UI name
        var filePath = TestData + 'ChangePrivacySettings.ps1';
        
        if((aqFile["Exists"])(filePath))
        {
            aqFile["Delete"](filePath);
        }
        var result = aqFile["Create"](filePath);
        
        // if file was created or it exists
        if(result == 0)
        {
            var fileChangePrivacySettingsPs1 = aqFile["OpenTextFile"](filePath, aqFile.faWrite, aqFile.ctANSI);
        
            var line1 = "Set-Itemproperty -path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\broadFileSystemAccess\\" + uiName  + "\' -Name \'Value\' -value \'Allow\'";
            var line2 = "Get-Item -path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\broadFileSystemAccess"
        
            fileChangePrivacySettingsPs1["WriteLine"](line1);
            fileChangePrivacySettingsPs1["WriteLine"](line2);
            fileChangePrivacySettingsPs1["Close"]();
        }
        else
        {
            var strError = aqUtils["SysErrorMessage"](result);
            Log["Error"]("The File ChangePricacySettings.ps1 was not created " + strError)
        }
        
        // write EnableLoopBackExempUWP.cmd with UI name
        var filePath = TestData + 'EnableLoopBackExempUWP.cmd';
        
        if((aqFile["Exists"])(filePath))
        {
            aqFile["Delete"](filePath);
        }
        var result = aqFile["Create"](filePath);
        
        // if file was created or it exists
        if(result == 0)
        {
            var fileChangePrivacySettingsPs1 = aqFile["OpenTextFile"](filePath, aqFile.faWrite, aqFile.ctANSI);
        
            var line1 = "checknetisolation loopbackexempt -a -n=" + uiName; 
            fileChangePrivacySettingsPs1["WriteLine"](line1);
            fileChangePrivacySettingsPs1["Close"]();
        }
        else
        {
            var strError = aqUtils["SysErrorMessage"](result);
            Log["Error"]("The File EnableLoopBackExempUWP.cmd was not created " + strError)
        }
        
        //Enable File System Permission for UWP App Bhawya Oct 2019
        obj = new ActiveXObject("WScript.shell");
        aqUtils["Delay"](1000,"Enable File System Permission for UWP App");
        Log["AppendFolder"]("Enable File System Permission for UWP App");
        var oShell=Sys["OleObject"]("Shell.Application"); 
        oShell.ShellExecute("ChangePrivacySettings.bat","",TestData,"runas",1); 
        aqUtils["Delay"](3000,"Enable File System Permission for UWP App");
        Log["Checkpoint"]("File System Permission enabled for UWP App");
        Log["PopLogFolder"]();

        //Enable Loopback UWP[ Bhawya Oct 23 -temporary]
        obj = new ActiveXObject("WScript.shell");
        aqUtils["Delay"](2000,"Run EnableLoopBackExempUWP");
        Log["AppendFolder"]("Enable Loop Back Exempemtion for UWP");
        var oShell=Sys["OleObject"]("Shell.Application"); 
        oShell.ShellExecute("EnableLoopBackExempUWP.cmd","",TestData,"runas",1); 
        aqUtils["Delay"](3000,"Wait");
        Log["Checkpoint"]("Loop Back Exemption for UWP successfully");
        Log["PopLogFolder"]();
        
//        //Install-DMLContent    
//        Log["AppendFolder"]("Install-DMLContent");  
//        var IotPath =  "C:\\Siemens\\ARM\\Bin\\IoT_Content"
//        var oShell=Sys["OleObject"]("Shell.Application");
//        oShell.ShellExecute("Install-DMLContent.cmd","",IotPath,"runas",1);
//        aqUtils["Delay"](50000,"Install-DMLContent")
//        Log["Checkpoint"]("Install-DMLContent.cmd sucessful")
//        Log["PopLogFolder"]();
//        
//        //Running DL registry batch files
//        aqUtils["Delay"](2000,"Run DL Registry")
//        var obj = new ActiveXObject("WScript.shell")
//        Log["AppendFolder"]("Running DL registry batch files");   
//        obj["Run"](TestData+"DLRegistry.bat")
//        aqUtils["Delay"](2000,"Wait for Registry Update")
//        Log["PopLogFolder"]();
//      
//        //Remove DLL's -BHAWYA
//        obj = new ActiveXObject("WScript.shell")
//        aqUtils["Delay"](2000,"Run DLLRemove")
//        Log["AppendFolder"]("Remove Dll's - Run RemoveDll.bat")
//        obj["Run"](TestData+"DLLRemove.bat")
//        aqUtils["Delay"](3000,"Wait for DLL's to be removed")
//        Log["PopLogFolder"]();    
//             
//        //Push DML mechanism emulation file to IoT -Shahana
//        obj = new ActiveXObject("WScript.shell")
//        aqUtils["Delay"](2000,"Copying DML Mechanism Emulation file to IoT")
//        Log["AppendFolder"]("Copy DML Mechanism Emulation file - Run CopyDMLMechEmulation.bat")
//        obj["Run"](TestData+"CopyDMLMechEmulation.bat")
//        aqUtils["Delay"](3000,"Wait for DML Mechanism Emulation file to be copied")
//        Log["PopLogFolder"]();
//        
//        //Push DL mechanism emulation file to IoT -Shahana
//        obj = new ActiveXObject("WScript.shell")
//        aqUtils["Delay"](2000,"Copying DL Mechanism Emulation file to IoT")
//        Log["AppendFolder"]("Copy DL Mechanism Emulation file - Run CopyDLMechEmulation.bat")
//        obj["Run"](TestData+"CopyDLMechEmulation.bat")
//        aqUtils["Delay"](3000,"Wait for DL Mechanism Emulation file to be copied")
//        Log["PopLogFolder"]();
//       
//        //Copy Priming Config file to desired location
//        Log["AppendFolder"]("Copy Priming File");  
//        aqFile["Copy"](SimulatorFolderPath+"\\PrimingConfiguration.json",ConfigurationFolderPath,false);
//        aqUtils["Delay"](2000,"Copying Priming Config file")
//        Log["Checkpoint"]("Copied Priming Config file to desired location")
//        Log["PopLogFolder"]();
//        
//        //Copy EngineConfig.json to desired location
//        Log["AppendFolder"]("Copy EngineConfig File");
//        aqFile["Copy"](SimulatorFolderPath+"\\EngineConfig.json",ConfigurationFolderPath,false)  
//        aqUtils["Delay"](2000,"Copying EngineConfig file")
//        Log["Checkpoint"]("Copied EngineConfig file to desired location")
//        Log["PopLogFolder"]();
//        
//        //Copy Simulator Settings.json to desired location
//        Log["AppendFolder"]("Copy Simulator Settings File");
//        aqFile["Copy"](SimulatorFolderPath+"\\SimulatorSettings.json",ConfigurationFolderPath,false)  
//        aqUtils["Delay"](2000,"Copying Priming SimulatorSettings.json file")
//        Log["Checkpoint"]("Copied EngineConfig file to desired location")
//        Log["PopLogFolder"]();
//
//        //Copy ModuleConfiguration.json to desired location
//        Log["AppendFolder"]("Copy Module Configuration File");
//        aqFile["Copy"](SimulatorFolderPath+"\\ModuleConfiguration.json",ConfigurationFolderPath,false) 
//        aqUtils["Delay"](2000,"Copying Priming ModuleConfiguration.json file") 
//        Log["Checkpoint"]("Copied Module Configuration file to desired location")
//        Log["PopLogFolder"]();
//        
//        //Copy MechanismCalibrationData.json to desired location
//        Log["AppendFolder"]("Copy MechanismCalibrationData File");
//        aqFile["Copy"](SimulatorFolderPath+"\\MechanismCalibrationData.json","F:\\SystemSpecificConfigs",false)  
//        aqUtils["Delay"](2000,"Copying Priming MechanismCalibrationData file") 
//        Log["Checkpoint"]("Copied MechanismCalibrationData file to F:\SystemSpecificConfigs")
//        Log["PopLogFolder"]();
//        
//        //Copy Mechanism Alignment Config.json to desired location
//        Log["AppendFolder"]("Copy Mechanism Alignment Config File");
//        aqFile["Copy"](SimulatorFolderPath+"\\MechanismAlignmentConfig.json","F:\\SystemSpecificConfigs",false) ; 
//        aqUtils["Delay"](2000,"Copying Priming MechanismAlignmentConfig.json file") 
//        Log["Checkpoint"]("Copied Mechanism Alignment Config file to F:\SystemSpecificConfigs")
//        Log["PopLogFolder"]();
//        
//        //Copy PhotometerDarkRead.json to desired location
//        Log["AppendFolder"]("Copy PhotometerDarkRead File");
//        aqFile["Copy"](SimulatorFolderPath+"\\PhotometerDarkRead.json","F:\\SystemSpecificConfigs",false) ; 
//        aqUtils["Delay"](2000,"Copying Priming PhotometerDarkRead.json file") 
//        Log["Checkpoint"]("Copied PhotometerDarkRead.json file to F:\SystemSpecificConfigs")
//        Log["PopLogFolder"]();
//        
//        //Copy Analytical Module files to System specific Config 
//        Log["AppendFolder"]("Copy Analytical module folder in system specific folder");
//        if(!aqFileSystem["Exists"](SystemSpecificAnalyFolder))
//        {
//          if(aqFileSystem["CreateFolder"](SystemSpecificAnalyFolder) !=0)
//          {
//            Log["Error"]("Unable to create folder "+SystemSpecificAnalyFolder)
//            Log["PopLogFolder"]();
//            return false;
//          } 
//          else 
//          {
//            Log["Checkpoint"]("Created Analytical module folder")  
//          }          
//        } 
//        
//        Log["AppendFolder"]("Copy Analytical module - Simulated channels File");
//        aqFile["Copy"]("C:\\Siemens\\ARM\\Bin\\Configuration\\Overwrite for Test Fixture\\SystemSpecificConfigs\\AnalyticalModule\\SimulatedChannels.json",SystemSpecificAnalyFolder,false) ; 
//        aqUtils["Delay"](2000,"Copying Simulated Channels.json file") 
//        Log["Checkpoint"]("Copied Simulated channels file to F:\SystemSpecificConfigs\AnalyticalModule")
//        Log["PopLogFolder"]();
//        Log["PopLogFolder"]();
//        
//        //Copy Direct Load files to System specific Config 
//        Log["AppendFolder"]("Copy Direct load folder in system specific folder");
//        if(!aqFileSystem["Exists"](SystemSpecificDirectFolder))
//        {
//          if(aqFileSystem["CreateFolder"](SystemSpecificDirectFolder) !=0)
//          {
//            Log["Error"]("Unable to create folder "+SystemSpecificDirectFolder)
//            Log["PopLogFolder"]();
//            return false;
//          } 
//          else 
//          {
//            Log["Checkpoint"]("Created Direct Load folder")  
//          }          
//        } 
//        
//        Log["AppendFolder"]("Copy Direct load - Simulated channels File");
//        aqFile["Copy"]("C:\\Siemens\\ARM\\Bin\\Configuration\\Overwrite for Test Fixture\\SystemSpecificConfigs\\DirectLoad\\SimulatedChannels.json",SystemSpecificDirectFolder,false) ; 
//        aqUtils["Delay"](2000,"Copying Simulated channels.json file") 
//        Log["Checkpoint"]("Copied Simulated channels file to F:\SystemSpecificConfigs\DirectLoad")
//        Log["PopLogFolder"]();
//        Log["PopLogFolder"]();
  
           
        //First time login -Labmanager
        AddPasscodeInRegistry();
        InsertSecurityQuestionsG1InDB();   
        
        //First time login -SiemensInternal
        InsertSecurityQuestionsG0InDB();      
       
        //Update State Manager Config file
        Log["AppendFolder"]("Update State Manager Config file");
        
        //EnableDiagnosticsOnFirstInitialization - false
        var openedTextFile = aqFile["OpenTextFile"](StateMgrConfigFile, aqFile["faRead"], aqFile["ctANSI"]);
        var contents = openedTextFile["ReadAll"]();
        var updatedString1 = aqString["Replace"](contents,"\"EnableDiagnosticsOnFirstInitialization\": true", "\"EnableDiagnosticsOnFirstInitialization\": false");
        aqFile["WriteToTextFile"](StateMgrConfigFile, updatedString1, aqFile["ctANSI"], true);
        aqUtils["Delay"](2000,"StateMgrConfigFile : EnableDiagnosticsOnFirstInitialization is set to false") 
        Log["Checkpoint"]("EnableDiagnosticsOnFirstInitialization is set to false");
        
        //EnterDiagnosticsOnInstallation - false
        var openedTextFile = aqFile["OpenTextFile"](StateMgrConfigFile, aqFile["faRead"], aqFile["ctANSI"]);
        var contents = openedTextFile["ReadAll"]();
        var updatedString2 = aqString["Replace"](contents,"\"EnterDiagnosticsOnInstallation\": true", "\"EnterDiagnosticsOnInstallation\": false");
        aqFile["WriteToTextFile"](StateMgrConfigFile, updatedString2, aqFile["ctANSI"], true);
        aqUtils["Delay"](2000,"StateMgrConfigFile : EnterDiagnosticsOnInstallation is set to false") 
        Log["Checkpoint"]("EnterDiagnosticsOnInstallation is set to false");
          
        //EnterDiagnosticsOnInitialization - false
        var openedTextFile = aqFile["OpenTextFile"](StateMgrConfigFile, aqFile["faRead"], aqFile["ctANSI"]);
        var contents = openedTextFile["ReadAll"]();
        var updatedString3 = aqString["Replace"](contents,"\"EnterDiagnosticsOnInitialization\": true", "\"EnterDiagnosticsOnInitialization\": false");
        aqFile["WriteToTextFile"](StateMgrConfigFile, updatedString3, aqFile["ctANSI"], true);
        aqUtils["Delay"](2000,"StateMgrConfigFile : EnterDiagnosticsOnInitialization is set to false") 
        Log["Checkpoint"]("EnterDiagnosticsOnInitialization is set to false"); 
      
      Log["PopLogFolder"]();

      //load Supplies using Supplies Query  
      Log["AppendFolder"]("Load Supplies");
      LoadSuppliesthroughQuery();
      Log["PopLogFolder"]();
                         
//	    //Switch DL to simulation mode [Nov 4 :bhawya CI]
//      Log["AppendFolder"]("DL in simulation mode");
//      var DLsimulationPath = TestData
//      var oShell=Sys["OleObject"]("Shell.Application");
//      oShell.ShellExecute("SwitchToSimulatedDL.bat","",DLsimulationPath,"runas",1);
//      aqUtils["Delay"](5000,"Switch DL to simulation mode") 
//      SwitchToSimulatedDLPath = TestData+"SwitchToSimulatedDL.bat";
//      if(!aqFile["Exists"](SwitchToSimulatedDLPath))
//      {
//        Log["Error"]("DL Bundle is not installed sucessfully")
//        return false;
//      }
//      Log["PopLogFolder"]();
        
      //Set Password to never Expire -Labmanager
      obj = new ActiveXObject("WScript.shell");
      aqUtils["Delay"](2000,"Run LabManagerPswdDoNotExpire.cmd");
      Log["AppendFolder"]("Set LabManager Password to Never Expire");
      var oShell=Sys["OleObject"]("Shell.Application"); 
      oShell.ShellExecute("LabManagerPswdDoNotExpire.cmd","",TestData,"runas",1); 
      aqUtils["Delay"](3000,"Wait");
      Log["Checkpoint"]("LabManager password do not expire batch file ran suucessfully");
      Log["PopLogFolder"]();
        
      //Set Password to never Expire -SiemensInternal
      obj = new ActiveXObject("WScript.shell");
      aqUtils["Delay"](2000,"Run SiemensInternalPswdDoNotExpire.cmd");
      Log["AppendFolder"]("Set Siemens Internal Password to Never Expire");
      var oShell=Sys["OleObject"]("Shell.Application"); 
      oShell.ShellExecute("SiemensInternalPswdDoNotExpire.cmd","",TestData,"runas",1); 
      aqUtils["Delay"](3000,"Wait");
      Log["Checkpoint"]("SiemensInternal password do not expire batch file ran suucessfully");
      Log["PopLogFolder"]();
              
    }
    catch(e)
    {
      Log["Error"]("Exception : "+e["Description"]);
      Log["PopLogFolder"]();
      return false;
    }
    
  //Close Log
  Log["PopLogFolder"]();
  return true;
}

//*********************************************************************************************
//*  FunctionName :fnUpdateBuildDetails
//*  Description: Update BuildID,Name and Vapp Deatils in BuildInsInfo and Result.xml
//*  Input: NA
//*  Output:NA
//*  Example:  fnUpdateBuildDetails()
//*  Date of Creating: 02/Jan/2018
//*  Last Modified date: 03/Jan/2018
//* Created By : Bhawya V J
//*********************************************************************************************
function fnUpdateBuildDetails()
{
    try
    {    
        //Log
        Log["AppendFolder"]("Update Build Details")
    
        //Declare
        var BuildInsInfoPath = "F:\\Installer\\Files\\BuildInstrumentsInfo.xml"
        var ResXMLPath = "F:\\SystemTest\\TestOutput\\Result.xml"

        //Read Build Details
        TFSBuildNumTxt = aqFile.ReadWholeTextFile("F:\\Installer\\UpgradeBuild\\TfsBuildInformation.txt", aqFile.ctANSI);
        sCurrBuildID = aqString["Trim"](TFSBuildNumTxt["split"]("\n")[0])
        
        //Write Build ID and Name in BuildIns Info
        fnReplaceXMLNodeValue(BuildInsInfoPath,"NAME",sCurrBuildID)
        if(fnReplaceXMLNodeValue(BuildInsInfoPath,"BUILDID",sCurrBuildID))
          Log["Checkpoint"]("Sucessfully Updated Build Name and ID in Build Ins info")
        
        //Write VappName And Link as NA in BuildIns Info
        fnReplaceXMLNodeValue(BuildInsInfoPath,"VAPPName","NA")
        if(fnReplaceXMLNodeValue(BuildInsInfoPath,"VAPPLINK","NA"))
            Log["Checkpoint"]("Sucessfully Updated Vapp Link and Name as NA in BuildInsInfo")
            
        //Write Build ID and Name in Resumt XML
        fnReplaceXMLNodeValue(ResXMLPath,"Build",sCurrBuildID)
        if(fnReplaceXMLNodeValue(ResXMLPath,"BuildID",sCurrBuildID))
            Log["Checkpoint"]("Sucessfully Updated Build Name and ID in Result.xml")
        
        //Write VappLink as NA in Result.xml
        if(fnReplaceXMLNodeValue(ResXMLPath,"VAPPLINK","NA"))
          Log["Checkpoint"]("Sucessfully Updated Vapp Link in Result.xml")
          
         //Close Log
        Log["PopLogFolder"]()
        
    }
    catch(e)
    {
      Log["Error"]("Exception :"+e["Description"]);
      Log["PopLogFolder"]();
      return false;
    } 
     return true;
}

//***************************************************************************************
//*  FunctionName :fnReplaceXMLNodeValue(strPathXML,strNodeName,strNewNodeVal)
//*  Description: Replaces the XMl tag value with New
//*  Input: strPathXML,strNodeName,strNewNodeVal
//*  Output:Boolean
//*  Example:  fnReplaceXMLNodeValue(strPathXML,"BUILD","ARM.T.All")
//*  Date of Creating: 03/Jan/2018
//*  Last Modified date: NA
//* Created By : Bhawya V J
//******************************************************************************************
function fnReplaceXMLNodeValue(strPathXML,strNodeName,strNewNodeVal)
{
  try
  {    
        fnReplaceEndTag(strPathXML,strNodeName)
        XMLAllContent = aqFile.ReadWholeTextFile(strPathXML, aqFile.ctANSI);
        aqFile["Delete"](strPathXML)
        sNodeValue = fnGetNodeValue(XMLAllContent,strNodeName)
        sCurrTag= "<"+strNodeName+">"+sNodeValue+"</"+strNodeName+">"
        sFinalTag = "<"+strNodeName+">"+strNewNodeVal+"</"+strNodeName+">"
        sCurrContent = aqString["Replace"](XMLAllContent,sCurrTag,sFinalTag)
        if(CreatingAndWritingToTextFile(strPathXML,sCurrContent))
           return true;
        else
          return false;
            
    }
    catch(exp)
    {
      Log["Error"](exp["description"])
      return false;
    }
    return true
}

//*****************************************************************************************
//*  FunctionName :fnGetNodeValue(strFileContent,strNodeName)
//*  Description: Returns the value of a node in given XML
//*  Input: XMLFile content as String,Name of the Node
//*  Output: Node Value
//*  Example:  fnGetNodeValue(strFileContent,"INSTALLTYPE")
//*  Date of Creating: 29/09/2017
//*  Last Modified date: 29/09/2017
//* Created By : Bhawya V J
//*****************************************************************************************
function fnGetNodeValue(strFileContent,strNodeName)
{  
  //Declare
  var strValue = "null";
  var startString,endString,intStartIndex,intEndIndex;
  
  try
  {   
      startString ="<" + strNodeName + ">";
      endString ="</" + strNodeName + ">";
      intStartIndex = strFileContent.indexOf(startString) ;
      
      //Verify if TAG Exists
      if(intStartIndex == -1)
      {
        Log.Error(strNodeName+" Tag doesnot exist in BuildInstrumentsInfo.xml file");
        return strValue;
      }
      intEndIndex = strFileContent.indexOf(endString,intStartIndex) ;
      strValue = (strFileContent.substring(intStartIndex,intEndIndex)).replace(startString,"");

      return strValue;    
    }
    catch(exp)
    {
      Log["Error"](exp["description"])
      return strValue;
    }
}

//***************************************************************************************
//*  FunctionName :fnReplaceEndTag(strPath,strNodeName)
//*  Description: Replaces the XMl End Tag with Start and end tag
//*  Input: XMLFile path,Name of the Node
//*  Output:NA
//*  Example:  fnReplaceEndTag(strPath,strNodeName)
//*  Date of Creating: 02/Jan/2018
//*  Last Modified date: NA
//* Created By : Bhawya V J
//**************************************************************************************
function fnReplaceEndTag(strPath,strNodeName)
{
  try
  {   
        ContentAll = aqFile.ReadWholeTextFile(strPath, aqFile.ctANSI);
        sEndTag= "<"+strNodeName+"/>"
        if(aqString["Find"](ContentAll,sEndTag)!= -1)
        {
          sCurrContent = aqString["Replace"](ContentAll,sEndTag, "<"+strNodeName+"></"+strNodeName+">")
          aqFile["Delete"](strPath)
          CreatingAndWritingToTextFile(strPath,sCurrContent)
        }  
    }
    catch(exp)
    {
      Log["Error"](exp["description"])
    }
}

//**************************************************************************
//*  FunctionName : CreatingAndWritingToTextFile
//*  Description: CreatingAndWritingToTextFile
//*  Input: sPath,sContent)
//*  Output: na
//*  Example: CreatingAndWritingToTextFile(sPath,sContent)
//*  Date of Creating: 30/10/2018
//*  Created By: Bhawya V J
//'************************************************************************           
function CreatingAndWritingToTextFile(sPath,sContent)
{  
    try
    {
      if(aqFile.Create(sPath) == 0)
      {
        aqFile.WriteToTextFile(sPath, sContent,aqFile["ctANSI"]);
        //Log.Message("The file is created and the specified text is written to it successfully.");
      }
      else 
        Log.Error("The file was not created.");
    }
    catch(exp)
    {
      Log["Error"]("Exception : "+exp["Description"]);
      return false;
    }
    return true;
} 

//Amar
function GetLatestRegisterIMLogFile()
{
  try
  {
    var sRegisterIMFolderpath="F:\\InstrumentOutput\\UIW\\Logs";
    var oFolderobj=aqFileSystem["GetFolderInfo"](sRegisterIMFolderpath);
    var oFileItems=oFolderobj["Files"]
    var arrLastModifiedtTime=new Array()
    var m=0
    
    if(oFileItems!=null)
    {
      for(var i=0;i<oFileItems["Count"];i++)
      {
        if(oFileItems["Item"](i).Name.search("RegisterIM*")==0)
        {
          arrLastModifiedtTime[m]=oFileItems["Item"](i)["DateLastModified"];
          //RegisterIMFiles[m]=oFileItems["Item"](i);
          m=m+1;
        } 
      } 
      var sGreater=arrLastModifiedtTime[0];
      var sGreatest=0;
      var sLatestFileName="";
      for(m=0;m<arrLastModifiedtTime["length"];m++)
      {
        if(sGreater<arrLastModifiedtTime[m])
        {
          //sGreater=arrLastModifiedtTime[m];
          sGreatest=m;
        } 
      } 
      var sLatestFileName=oFileItems["Item"](sGreatest)["Name"];
    }
    else
    {
      var sLatestFileName="";
    }
    
    return sLatestFileName;
  }
  catch(exp)
  {
    Log["Error"]("Exception: " + exp["description"]);
    return false;
  } 
}

//*********************************************************************************
//*  FunctionName :  fnInstallDiagnostics()
//*  Description: Installs Diagnostics Client
//*  Input: NA
//*  Output: NA
//*  Example:fnInstallDiagnostics()
//*  Date of Creating: 15 Jan 2019
//*  Created By: Bhawya V J
//*********************************************************************************
function fnInstallDiagnostics()
{
  try
  {  
    
    Log["AppendFolder"]("Install Diagnostics")
    Sys["OleObject"]("WScript.Shell")["Run"]("powershell -file C:\\Siemens\\ARM\\Bin\\Diagnostics\\Add-AppDevPackage.ps1")
    aqUtils["Delay"](40000,"Wait to Install Diagnostics")
    
	
	for(i=0; i<10; i++) // 5 minutes
    {
        aqUtils["Delay"](60000, "Waiting for diagnostic to install");
    }
    
    //Close Powershell
    Options["Run"]["Delay"] =0;
    Options["Run"]["Timeout"] =0;
    var proparr=["WndClass","WndCaption", "wText"]
    var vararr=["ConsoleWindowClass", "Administrator: Windows PowerShell","*Press Enter to continue...:*"];
        
    var cmdObj =Sys["Find"](proparr,vararr,200)
    if(cmdObj["Exists"])
    {
      cmdObj["Activate"]();
      cmdObj["Close"]();
      aqUtils["Delay"](2000,"Close cmd")
	  Log["Checkpoint"]("Installed Diagnostics");
    }  
	else
	{
		Log["Error"]("Unable to Install Diagnostics");
		return false;
	}
          
    //Close Log
    Options["Run"]["Timeout"] =10000;
    Log["PopLogFolder"]();
    return  "Successful";
    
  }
  catch(exp)
  {
      Log["Enabled"] =true;
      Log["Error"]("Unable to Install Diagnostics");
      Log["Error"]("Exception : "+exp["description"]);
      Log["PopLogFolder"]();  
      return "Failed"; 
  }
}

//***************************************************************************************
//*  FunctionName :fnRunTCCSHydra
//*  Description: Run TCCS
//*  Input: na
//*  Output:Boolean
//*  Example:  fnRunTCCSHydra
//*  Date of Creating: 12 Feb 2019
//*  Last Modified date: NA
//* Created By : Bhawya V J
//*****************************************************************************************
function fnRunTCCSHydra()
{
  try{
                
        //Project path
        var ProjPath = ProjectSuite["Path"];
        var arrPath  = ProjPath["split"]("Hydra")   
        var TestData =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\";
  
        //TCCS
        Log["AppendFolder"]("TCCS Configuration")
        obj = new ActiveXObject("WScript.shell")
        obj["Run"]("C:\\Siemens\\Bin\\TCCSConfigurationEditor.exe")
        TCCSConfigurationEditor =Sys["WaitProcess"]("TCCSConfigurationEditor",240000)
        if(!TCCSConfigurationEditor["Exists"])
           Log["Error"]("TCCS didnt open")   
        
        //Set DL IP
        aqUtils["Delay"](1000)
        TCCSConfig = Aliases["TCCSConfigurationEditor"]["VistaConfigurationMainForm"]["m_tabControlAdv"]["m_tabPageAdvTwinningConfig"]["m_tccsConfigControl"]["m_groupBoxRightInstrument"]["m_tccsConfig"];
        moduleIDEntry = TCCSConfig["moduleIDEntryPrimary"];
        moduleIDEntry["m_cbModuleType"]["ClickItem"]("DL");
        aqUtils["Delay"](1000)
        textBoxExt = moduleIDEntry["m_tbModule"];
        textBoxExt["SetText"]("");
        textBoxExt["SetText"]("192.168.1.7");
        aqUtils["Delay"](1000)
  
        //Set Hydra IP
        numericUpDown = Aliases["TCCSConfigurationEditor"]["VistaConfigurationMainForm"]["m_tabControlAdv"]["m_tabPageAdvTwinningConfig"]["m_tccsConfigControl"]["m_groupBoxRightInstrument"]["m_tccsConfig"]["m_nudModules"];
        upDownEdit = numericUpDown["UpDownEdit"];
        numericUpDown["wValue"] = 1;
        upDownEdit["Keys"]("[Tab]");
        aqUtils["Delay"](1000)
        moduleIDEntry = TCCSConfig["moduleIDEntry1"];
        moduleIDEntry["m_cbModuleType"]["ClickItem"]("Hydra");
        aqUtils["Delay"](1000)
        textBoxExt = moduleIDEntry["m_tbModule"];
        textBoxExt["SetText"]("192.168.1.7");
        aqUtils["Delay"](1000)
  
        //SIM Serial Number
        var vistaConfigurationMainForm;
        var comboBox;
        vistaConfigurationMainForm = Aliases["TCCSConfigurationEditor"]["VistaConfigurationMainForm"];
        vistaConfigurationMainForm["Activate"]();
        aqUtils["Delay"](1000)
        comboBox = vistaConfigurationMainForm["m_tabControlAdv"]["m_tabPageAdvTwinningConfig"]["m_tccsConfigControl"]["m_groupBoxLeftInstrument"]["m_cbIpAddresses"];
        comboBox["ClickItem"]("192.168.1.7");
        aqUtils["Delay"](1000)
        
        //Apply changes
        Aliases["TCCSConfigurationEditor"]["VistaConfigurationMainForm"]["m_tabControlAdv"]["m_tabPageAdvTwinningConfig"]["m_tccsConfigControl"]["m_xpTaskBar"]["m_xpTaskBarBoxActions"]["m_panelActions"]["m_buttonAdvApply"]["ClickButton"]();
        aqUtils["Delay"](2000)
        
        //Verify IM Sucess
        if(!VerifyRegisterIMMessageInLogs())
          return false
        else{
            Log["Checkpoint"]("TCCS Sucessfull")
        }
               
        //Exit TCCS
         Aliases["TCCSConfigurationEditor"]["VistaConfigurationMainForm"]["m_buttonAdvExit"]["ClickButton"]();
         aqUtils["Delay"](2000);
         Log["PopLogFolder"]()
  
    }
    catch(exp)
    {
      Log["Error"](exp["description"])
      return false;
    }
    return true
}

//**************************************************************************
//*  FunctionName : AddPasscodeInRegistry
//*  Description: First time login- Add PHI key in Registry
//*  Input: na
//*  Output: na
//*  Example: AddPasscodeInRegistry()
//*  Date of Creating: 30/10/2018
//*  Created By: Ramitha
//'************************************************************************  
function AddPasscodeInRegistry() 
{  
  try
  {        
    Log["AppendFolder"]("Updating passcode in Registry");  
    
    //Intialize variable
    var PrimaryKey =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\PrimaryKey";
    var Key, Name, Count, ValueName, Value;
        
    //Adding Passcode registry through Primary.exe file
    var oShell=Sys["OleObject"]("Shell.Application");
    oShell.ShellExecute("PrimaryKey.exe","",PrimaryKey,"runas",1);
  
    //Gets an object for the Windows system registry key
    Key = Storages.Registry("SOFTWARE\\Siemens Healthcare Diagnostics\\UIW\\Encryption", HKEY_LOCAL_MACHINE, true);
    Name = Key.Name;

    //Determines how many values the key contains
    Count = Key.OptionCount;
    if (Count > 0)
    {
    // Iterates through the values
    for (var i = 0; i < Count; i++)
      {
          // Obtains the name of the value
          ValueName = Key.GetOptionName(i);
          Value = Key.GetOption(ValueName, "not specified");
          if(ValueName=="Passcode")
          {
              Log.Message(ValueName + " added in Registry");       
              break;
          }
      }
    }
    else
    {
      //Log.Error(" Passcode is not added in Registry");
    }
    Log["PopLogFolder"]();
    return true;
  }
  catch(e)
  {
    Log["Error"](e["description"]);
    Log["PopLogFolder"]();
    return false;
  } 
}

//**************************************************************************
//*  FunctionName : InsertSecurityQuestionsG1InDB
//*  Description: First time login- InsertSecurityQuestionsInDB
//*  Input: na
//*  Output: na
//*  Example: InsertSecurityQuestionsG1InDB()
//*  Date of Creating: 30/10/2018
//*  Created By: Ramitha
//'************************************************************************  
function InsertSecurityQuestionsG1InDB()
{
  try
  {
    Log["AppendFolder"]("Insert Security question for G1 in DB");
    //Initialize Variables
    var Returnval = true;
    var res,arrTestData,dictColumn,strQuery,strConString;
        
    //Read data for DB
    var arrTestData = GetTestItemsByTestName(DBDataFile,"GenericARM","SecurityQuestions");
    var dictColumn=arrTestData[0];
    var strQuery = dictColumn["Item"]("Query1")
    var UserID = dictColumn["Item"]("UserID1")
    var strSelectQuery="SELECT * FROM [Bus_DM].[dbo].[UserSecurityQuestion] where UserID='"+UserID+"'";
    var strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
 
    RecordSet =ReturnQueryRecordSetFromString(strSelectQuery,strConString);
    if(RecordSet["RecordCount"]>0)
    {
    Log["Checkpoint"]("Security questions are already present in [UserSecurityQuestion] table")                                 
    }
    else
    {
        if(ExecSQLQueryFromString(strQuery,strConString)!=-1)
        {     
        Log["Checkpoint"]("Security questions inserted successfully in [UserSecurityQuestion] table")
        }         
    }
    Log["PopLogFolder"]();
    return true;
  }
  catch(e)
  {
    Log["Error"](e["description"]);
    Log["PopLogFolder"]();
    return false;
  } 
}

//**************************************************************************
//*  FunctionName : InsertSecurityQuestionsG0InDB
//*  Description: First time G0 login- InsertSecurityQuestionsInDB
//*  Input: na
//*  Output: na
//*  Example: InsertSecurityQuestionsG0InDB()
//'************************************************************************  
function InsertSecurityQuestionsG0InDB()
{
  try
  {
    Log["AppendFolder"]("Insert Security question for G0 in DB");
    //Initialize Variables
    var Returnval = true;
    var res,arrTestData,dictColumn,strQuery,strConString;
        
    //Read data for DB
    var arrTestData = GetTestItemsByTestName(DBDataFile,"GenericARM","SecurityQuestions");
    var dictColumn=arrTestData[0];
    var strQuery = dictColumn["Item"]("Query2");
    var UserID = dictColumn["Item"]("UserID2")
    var strSelectQuery="SELECT * FROM [Bus_DM].[dbo].[UserSecurityQuestion] where UserID='"+UserID+"'";
    var strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
 
    RecordSet =ReturnQueryRecordSetFromString(strSelectQuery,strConString);
    if(RecordSet["RecordCount"]>0)
    {
    Log["Checkpoint"]("Security questions for G0 are already present in [UserSecurityQuestion] table")                                 
    }
    else
    {
        if(ExecSQLQueryFromString(strQuery,strConString)!=-1)
        {     
        Log["Checkpoint"]("Security questions for G0 inserted successfully in [UserSecurityQuestion] table")
        }         
    }
    Log["PopLogFolder"]();
    return true;
  }
  catch(e)
  {
    Log["Error"](e["description"]);
    Log["PopLogFolder"]();
    return false;
  } 
}  

//**************************************************************************
//*  FunctionName : LoadRTReagents()
//*  Description: loads RT reagents - temporary function
//*  Input: na
//*  Output: boolean
//*  Example: LoadRTReagents()
//'************************************************************************  
function LoadRTReagents()
{
  try
  {
      Log["AppendFolder"]("Load RT Reagents");
      
      //Initialize variables
      var ProjPath = ProjectSuite["Path"];
      var arrPath  = ProjPath["split"]("Hydra") 
      var RTFiles =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\IoT\\ReagentsForRT\\";
      var SimulationPath = "C:\\data\\deploy\\simulation\\";
      var obj = new ActiveXObject("WScript.shell");
      
      //Create Simulation Folder  
      if(!aqFileSystem["Exists"](SimulationPath))
      {
        if(aqFileSystem["CreateFolder"](SimulationPath) !=0)
        {
            Log["Error"]("Unable to create folder "+SimulationPath)
            Log["PopLogFolder"]();
            return false;
        }
        else
            Log["Message"]("Created Simulation folder") 
      } 
  
      //Copy Primary Barcodes file to simulation folder
      aqFile["Copy"](RTFiles+"\\PrimaryBarcodes.txt",SimulationPath,false);  
      Log["Message"]("Copied IM Primary Barcodes file to simulation folder");
      
      //Copy Ancillary Barcodes file to simulation folder
      aqFile["Copy"](RTFiles+"\\AncillaryBarcodes.txt",SimulationPath,false);  
      Log["Message"]("Copied IM Ancillary Barcodes file to simulation folder");
      
      //Copy CH Ring Barcodes file to simulation folder
      aqFile["Copy"](RTFiles+"\\CHRingBarcodes.txt",SimulationPath,false);  
      Log["Message"]("Copied CH Ring Barcodes file to simulation folder");
      
      //Copy CH Input Barcodes file to simulation folder
      aqFile["Copy"](RTFiles+"\\CHInputBarcodes.txt",SimulationPath,false);  
      Log["Message"]("Copied CH Input Barcodes file to simulation folder");
      
      //Push IM primary barcodes file to IoT
      Log["AppendFolder"]("Copied IM primary barcodes file to IoT");
      obj["Run"](RTFiles+"CopyIAPR_IOT.bat");
      aqUtils["Delay"](7000,"Wait for IM primary barcodes file to be copied to IoT");
      Log["PopLogFolder"]();
      
      //Push IM Ancillary barcodes file to IoT
      Log["AppendFolder"]("Copied IM Ancillary barcodes file to IoT");
      obj["Run"](RTFiles+"CopyIAA_IOT.bat");
      aqUtils["Delay"](7000,"Wait for IM Ancillary barcodes file to be copied to IoT");
      Log["PopLogFolder"]();
      
      //Push CH Ring barcodes file to IoT
      Log["AppendFolder"]("Copied CH Ring barcodes file to IoT");
      obj["Run"](RTFiles+"CopyCHRingBarcodes.bat");
      aqUtils["Delay"](7000,"Wait for CH Ring barcodes file to be copied to IoT");
      Log["PopLogFolder"]();
      
      //Push CH Input barcodes file to IoT
      Log["AppendFolder"]("Copied CH Input barcodes file to IoT");
      obj["Run"](RTFiles+"CopyCHR_IOT.bat");
      aqUtils["Delay"](7000,"Wait for CH Input barcodes file to be copied to IoT");
      Log["PopLogFolder"]();
       
      Log["Checkpoint"]("All RT related reagents loaded successfully"); 
      Log["PopLogFolder"]();
      return true;
  }
  catch(e)
  {
    Log["Error"](e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function LoadSuppliesthroughQuery()
{
    try
    {
        //Project path
        var ProjPath = ProjectSuite["Path"];
        var arrPath  = ProjPath["split"]("Hydra")     
        var SuppliesQueryPath =  arrPath[0] + "TestcaseLayer\\ARM\\TestData\\AppConfigFiles\\Supplies_Testing_Sql";
        
        //Open log
        Log["Enabled"] = true;
        Log["AppendFolder"]("Prerun :: Loading Supplies through query ")
         
        var oShell=Sys["OleObject"]("Shell.Application");
        oShell.ShellExecute("Supplies_RoundTrip.bat","",SuppliesQueryPath,"runas",1);
        aqUtils["Delay"](5000,"Reagent Load Query")
        Log["Checkpoint"]("Supplies_RoundTrip.bat successful")
        Log["PopLogFolder"]();       
        
//        //Close CMD
//        Options["Run"]["Delay"] =0;
//        Options["Run"]["Timeout"] =0;
//        var proparr=["WndClass","WndCaption", "wText"]
//        var vararr=["ConsoleWindowClass", "C:\windows\System32\cmd.exe","*Press any key to continue . . .*"];
//        
//        var cmdObj =Sys["Find"](proparr,vararr,200)
//        if(cmdObj["Exists"]){
//          cmdObj["Activate"]();
//          cmdObj["Close"]();
//          aqUtils["Delay"](1000,"Close cmd")}   
        
        //Close Log
        Options["Run"]["Timeout"] =10000;
        Log["Enabled"] = true;
        Log["Checkpoint"]("Application closed successfully");
        Log["PopLogFolder"]();
        
    }catch(e){
      Log["Enabled"] =true;  
      Options["Run"]["Timeout"] =10000;
      Log["PopLogFolder"]();
      Log["Error"]("Exception : "+e["Description"]);
      return false;
    } 
    return true;
}
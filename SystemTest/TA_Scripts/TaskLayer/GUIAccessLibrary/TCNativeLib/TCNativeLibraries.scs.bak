//USEUNIT LocalizationUtilities
//USEUNIT ControlAccessLibrary
function SelectRadioBtn(control)
{
  try
  {
    var objControl = eval(control);
    objControl["ClickButton"]();
    Delay(1500);
  }
  catch(exp)
  {
    Log["Message"]("Exception " + exp["Description"]);
    
  }
}

function VerifyItemsInListBox(Control,sItem)
{
  try
  {
    var objControl = eval(Control);
   
   
   for(var i=0;i<objControl["wItemCount"];i++)
   {
    if(objControl["Items"]["Item"](i)["Mnemonic"]["OleValue"]==sItem)
      return true;
   }
   
   if(i==objControl["wItemCount"])
    return false;
    
  }
  catch(exp)
  {
    Log["Message"]("Exception " + exp["Description"]);
    
  }
}

//function LaunchApplication(ItemName)
//{
//  TestedApps[ItemName]["Run"]();
//  Delay("5000");
//    
//}
function SetDatePickerValue(Control,Text)
{
  try
  {
    var objControl = eval(Control);
    objControl["wdate"]=Text;
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function SetDatePickerValue_New(Control,Text)
{
  try
  {
    var objControl = eval(Control);
    objControl["SelectedDate"]=Text;
    Log["Message"]("Date is set to " + Text);
  } 
  catch(exp)
  {
    Log["Message"]("Exception -"+ exp["Description"]);
  }
}

function KeyInText(Control,Text)  //Use SendKeys instead of this
{
  try
  {
    var objControl = eval(Control);
    objControl["Keys"](Text);
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

// ***********************************************************************************************
// Function Name : SendKeys(Control, KeyCode)
// Function Description: This function uses the native Testcomplete API to Clicka control.
// Inputs : Control -> Control/Object Name of the target to be clicked
//          KeyCode -> KeyCode for the keystroke to be simulated. e.g. "[Enter]" to simulate Enter key pres
// Usage : SendKeys(Control, "[Enter]")   
// ***********************************************************************************************
function SendKeys(Control, KeyCode)
{
  try
  {
    var objControl = eval(Control);
    objControl["Keys"](KeyCode);
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function clickR(control)
{
  try
  {
    var objControl = eval(control);
    objControl["ClickR"]();
    Delay(1500);
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
    
  }
}


function ToLowerCase(Text)
{
  try
  {
    return(aqString["ToLower"](Text));
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
    
  }
}



function ToUpperCase(Text)
{
  try
  {
    return(aqString["ToUpper"](Text));
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);  
  }
}


function SetTubeInSlot(objSlot,Tube)
{
  try
  {
    var objControl = eval(objSlot);
    objSlot["set_SlotOccupancy"](Tube);
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
    
  }
}

// ***********************************************************************************************
// Function Name : CheckboxStatus(Control)
// Function Description: This function gets the state of the checkbox control
// Inputs : Control -> Control/Object Name to be verified       
// ***********************************************************************************************
function DVSCheckboxStatus(Control)
{
 try
  {
    var objControl = eval(Control);
    var chkbxstatus = objControl["Checked"];
    return chkbxstatus;
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

//---PCC

// ***********************************************************************************************
// Function Name : SelectCheckbox(Control)
// Function Description: This function uses the native Testcomplete API to select/unselect a checkbox
// Inputs : Control -> Control/Object Name of the Checkbox
// ***********************************************************************************************

function SelectCheckbox(Control)
{
  try
  {
 //  if(Control["CheckState"]["OleValue"]=="Unchecked")
 //   {
    var objControl = eval(Control);
    objControl["Click"]();
 //   }
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

// ***********************************************************************************************
// Function Name : SetCheckboxChecked(Control)
// Function Description: This function uses the native Testcomplete API to select/unselect a checkbox
// Inputs : Control -> Control/Object Name of the Checkbox
// ***********************************************************************************************

function SetCheckboxChecked(Control)
{
  try
  {
    //var objControl = eval(Control);
    if(Control["CheckState"]["OleValue"]=="Unchecked")
    {
      Control["set_Checked"](true);
      Delay(200);
    }
  } 
  catch(exp)
  {
    Log["Message"]("Exception" + " " +exp["Description"]);
  }
}

// ***********************************************************************************************
// Function Name : SetCheckboxUnChecked(Control)
// Function Description: This function uses the native Testcomplete API to select/unselect a checkbox
// Inputs : Control -> Control/Object Name of the Checkbox
// ***********************************************************************************************

function SetCheckboxUnChecked(Control)
{
  try
  {
    //var objControl = eval(Control);
    if(Control["CheckState"]["OleValue"]=="Checked")
    {
      Control["set_Checked"](false);
      Delay(200);
    }
  } 
  catch(exp)
  {
    Log["Message"]("Exception" + " " +exp["Description"]);
  }
}



//Description : Sets a WPFCheckBox to checked or unchecked state
//Parameters  : Control - Checkbox object
//             intValue - 0 for unchecking; 1 for checking

function SetWPFCheckBox(Control, intValue )
{
  try
  {
    if(Control["Exists"]==true)
    {
      Control["wState"] = intValue;
    }
    else
    {
      return(false)
    }
  }
  catch(exp)
  {
      Log["Message"]("Exception: " + exp["Description"]);
  } 
}

//Description : Sets a WPFCheckBox to checked or unchecked state
//Parameters  : Control - Checkbox object
//             intValue - 0 for unchecking; 1 for checking

function SetShellCheckBox(Control, boolValue )
{
  try
  {
    if(Control["Exists"]==true)
    {
      Control["Checked"] = boolValue;
    }
    else
    {
      return(false)
    }
  }
  catch(exp)
  {
      Log["Message"]("Exception: " + exp["Description"]);
  } 
}


// ***********************************************************************************************
// Function Name : CheckboxStatus(Control)
// Function Description: This function gets the state of the WPF checkbox control
// Inputs : Control -> Control/Object Name to be verified       
// ***********************************************************************************************
function CheckboxStatus(Control)
{
 try
  {
    var objControl = eval(Control);
    var chkbxstatus = objControl["IsChecked"]["OleValue"]();
    return chkbxstatus;
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

// ***********************************************************************************************
// Function Name : CheckboxStatus(Control)
// Function Description: This function gets the state of the WinForms checkbox control
// Inputs : Control -> Control/Object Name to be verified       
// ***********************************************************************************************
function WinFormCheckboxStatus(Control)
{
 try
  {
    var objControl = eval(Control);
    var chkbxstatus = objControl["Checked"];
    return chkbxstatus;
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

// ***********************************************************************************************
// Function Name : UnselectAll(Control,Column)
// Function Description: This function unselect all Checkboxes within the Grid Control for the given Column
// Inputs : Control -> Control/Object Name to be verified
//        :Column -> Column number in which the checkbox to be unselected
// ***********************************************************************************************
function UnselectAll(Control,Column)
{
  Rowcount = Control["RowCount"];
  for(Row=0;Row<Rowcount;Row++)
  {
    Control["Rows"]["Item"](Row)["Cells"]["Item"](Column)["SetValue"](Row,false);
  }  

}

// ***********************************************************************************************
// Function Name : Selectitem(Control,Columnval)
// Function Description: This function selects the checkbox in first column if the value in second column is equal to expected value
// Inputs : Control -> Control/Object Name to be verified
//        :Columnval -> Expected Text for which the first column should be selected
// ***********************************************************************************************

function Selectitem(Control,Columnval)
{
  Rowcount = Control["Rowcount"];
  for(Row=0;Row<Rowcount;Row++)
  {
    if(Control["Rows"]["Item"](Row)["Cells"]["Item"](1)["Value"] ==Columnval)
    {
     Delay(500);
     Control["Rows"]["Item"](Row)["Cells"]["Item"](0)["SetValue"](Row,true); 
     break;     
    }
    else
    {
     // Do Nothing

    }    
  }
}


// Function Name : SetText(Control,Text)
// Function Description: This function uses the native Testcomplete API to set a text in textbox
// Inputs : Control -> Control/Object Name of the Textbox
//        : Text -> Text to be entered in the Textbox
// ***********************************************************************************************

function SetText(Control,Text)
{
  try
  {
    var objControl = eval(Control);
    objControl["SetText"](Text);
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}



// ***********************************************************************************************
// Function Name : Clickbutton(Control)
// Function Description: This function uses the native Testcomplete API to Click a Button.
// Inputs : Control -> Control/Object Name of the target Button to be clicked
// ***********************************************************************************************

function Clickbutton(Control)
{
  try
  {
    var objControl = eval(Control);
    objControl["ClickButton"]();
    aqUtils["Delay"](1000, "Sync for click"); 
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

// ***********************************************************************************************
// Function Name : ClickControl(Control)
// Function Description: This function uses the native Testcomplete API to click a control.
// Inputs : Control -> Control/Object Name of the target to be clicked
// ***********************************************************************************************

function ClickControl(Control)
{
  try
  {
	var objControl = eval(Control);
  Log["Enabled"]=false;
	var Class = objControl["ClrClassName"]
  Log["Enabled"]=true;
	switch(Class)
	{
		case "Button":
    case "ShellButton":
    case "ShellTabButton":
    case "SignOutButton":
    case "DVSButton":
      			objControl["ClickButton"]();
      			break;
    //case "ToggleButton":
            
     //       if(objControl["wState"]==0)
      //			objControl["Click"]();
      //			break;
			
		default:
      			objControl["Click"]();
      			break;
	}
	aqUtils["Delay"](1000, "Sync for click"); 
  }
  catch(exp)
  {
    Log["Message"]("Exception "+ exp["Description"]);
  }
}


function ClickItem(objctrl, intIndex)
{
  try
  {
    objctrl["ClickItem"](intIndex);
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

// ***********************************************************************************************
// Function Name : SetFocus(Control)
// Function Description: This function uses the native Testcomplete API to focus on a given control
// Inputs : Control -> Control/Object Name of the target to be focused
// ***********************************************************************************************

function SetFocus(Control)
{
  try
  {
    var objControl = eval(Control);
    objControl["SetFocus"]();
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}


// ***********************************************************************************************
// Function Name : ScreenExists(Control,Time)
// Function Description: This function uses the native Testcomplete API to check whether the target object exists or not
// Inputs : Control -> ControlName of the Window or object to be verified.
//        : Time -> Duration for which we need to check whether the screen exist or not. 
// ***********************************************************************************************

function ScreenExists(Control,Time)
{
  try
  {
    var objControl = eval(Control);
    Wait = 0;
    for(Wait=0;Wait<Time;Wait=Wait+1000) //Wait for the object for 15 seconds
    {
    
      if(objControl["Exists"]==true)
      {
        break;
        //return(true);        
      }
      aqUtils["Delay"](1000, "Synchronization time for exist()")
    }
      if(objControl["Exists"]==true)
      {
        return(true);
      }
      else
      {
        return(false);
      }
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
  
}


//************************************************************************************************************************************************************************************
//*  FunctionName : VerifyControlText(objctrl,strText)
//*  Description: This function verifies whether runtime text of the control matches with strText
//*  Input: objctrl -> Control of the Message box
//*         strText -> Status message to be verified in the Message box
//************************************************************************************************************************************************************************************

function VerifyControlText(objctrl,strText)
{

  var objItem = eval(objctrl);
  if( aqString["ToLower"](objItem["Text"]) == aqString["ToLower"](strText) )
  {
    Log["Message"]("Text matched. Actual : " + objItem["Text"] + " Expected : " + strText);
    return true;
  }
  else
  {
    Log["Message"]("Text not matched. Actual : " + objItem["Text"] + " Expected : " + strText);
    return false; 
  }
}


// ***********************************************************************************************
// Function Name : Waitforwindow(Control)
// Function Description: This function waits for the control to be invisible on screen
// Inputs : Control -> Control/Object Name to be verified
// ***********************************************************************************************
function Waitforwindow(Control)
{
  try
  {
    intStartTime = aqDateTime["Time"]();
    while(Control["VisibleOnScreen"]==true && intWaitTime < 15000)
    {
      aqUtils["Delay"](1000, "Waiting for control to disappear");
      intWaitTime = aqDateTime["Time"]() - intStartTime;
    }
  }
  catch(exp)
  {
      Log["Message"]("Exception: " + exp["Description"]);
  } 
    
}



function WaitForControl(Control,iWaitTime)
{
  try
  {
    var intStartTime = aqDateTime["Time"]();
    var intElapsedTime = 0;
    while(Control["VisibleOnScreen"]==false && intElapsedTime < iWaitTime)
    {
      aqUtils["Delay"](1000, "Waiting for control to appear");
      intElapsedTime = aqDateTime["Time"]() - intStartTime;
    }
    
    if(Control["VisibleOnScreen"]==true)
      return true;
    else
      return false;
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
    return false;
  } 
    
}

function WaitForControlToGetEnabled(Control, iWaitTime)
{
  try
  {
    var intStartTime = aqDateTime["Time"]();
    var intElapsedTime = 0
    while(Control["Enabled"]==false && intElapsedTime < iWaitTime)
    {
      aqUtils["Delay"](1000, "Waiting for control to get enabled");
      intElapsedTime = aqDateTime["Time"]() - intStartTime;
    }
    
    if(Control["Enabled"]==false)
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Control did not get enable after waiting for " + iWaitTime + " seconds.");
      return false;
    }
    else
      return true;
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
    return false;
  } 
    
}



// ***********************************************************************************************
// Function Name :  CheckTextonUI(objctrl,ColumnVal,Column)
// Function Description: This function verifies whether the given text is available on the GridControl
// Inputs : objctrl -> Grid Control that contains the Testlist on UI
//        :ColumnVal -> The Text that needs to be verified on the given column of Grid
//        :Column -> Column Number in which the Text should be verified
// ***********************************************************************************************

function CheckTextonUI(objctrl,ColumnVal,Column)
{
  Rowcount = objctrl["RowCount"];//No. of Rows in the Gridobject
  var Textfound=0;
  for(Row=0;Row<Rowcount;Row++)
  {
    if(objctrl["Rows"]["Item"](Row)["Cells"]["Item"](Column)["Value"] ==ColumnVal)
    {       
     Textfound=1;
     break;
    }
    else
    {
    //Do Nothing
    }
  } 
  return(Textfound);       
}

function SelectListBoxItemByMnemonicValue(Control, value)
{
  if(Control.Exists==true)
  {
    intItemCount = Control.wItemCount
    for(intIndex = 0; intIndex < intItemCount; intIndex++)
    {
      if(Control.Items.Item(intIndex).Mnemonic.OleValue == value)
      {
        //Control.SelectItem(intIndex, true)
        Control.ClickItem(intIndex)
        break;
      }
    }
  }
  else
  {
    return(false)
  }
}


function SelectListBoxItem(Control, value)
{
  if(Control.Exists==true)
  {
    intItemCount = Control.wItemCount
    for(intIndex = 0; intIndex < intItemCount; intIndex++)
    {
      if(Control.Items.Item(intIndex).Name.OleValue == value)
      {
        //Control.SelectItem(intIndex, true)
        Control.ClickItem(intIndex)
        break;
      }
    }
  }
  else
  {
    return(false)
  }
}

function ClickCellInGrid(Control,intRowIndex, intColIndex)
{
  //var ColumnIndex = GetGridColumnIndex(Control,ColumnName);
  Control.ClickCell(intRowIndex, intColIndex);  
  
}

function ClickItemInGrid(Control,ItemName,ColumnName)
{
  var ColumnIndex = GetGridColumnIndex(Control,ColumnName);
  var RownNo = GetGridRowNo(Control,ColumnName,ItemName)
  Control.ClickCell(RownNo,ColumnIndex);  
}

function GetGridColumnIndex(objGrid,ColumnName)
{
  var Class = objGrid["ClrClassName"]
  switch(Class)
  {
    case "DataGridEx":
      var ColCount = objGrid["Columns"]["Count"];
      for(index=0;index<ColCount;index++)
      {
        if (objGrid["Columns"]["Item"](index)["Header"]["OleValue"]==ColumnName)

        {
          return(index);

        }    
      }
      break;
    default:
      //For WinShellGridView
      var ColCount = objGrid["ColumnCount"];
      for(index=0;index<ColCount;index++)
      {
        if (objGrid["Columns"]["Item"](index)["HeaderText"]["OleValue"]==ColumnName)
        {
          return(index);
        }    
      }
      break;
  }
  return(false);
}

function GetGridRowCount(obj)
{
  Class = obj.ClrClassName
  switch(Class)
  {
    case "WinShellGridView":
                            var TotalRows = obj["RowCount"];
                            break;
    case "DataGrid":
                            var TotalRows = obj["wRowCount"];
                            break;
    case "DataGridEx":		var TotalRows = obj["Items"]["Count"];
                            break;
                            //break;
  }
  return TotalRows;
}


function GetGridRowNo(obj, ItemHeader, ItemValue)
{
  Class = obj.ClrClassName
  switch(Class)
  {
    case "WinShellGridView":
    
        var ColumnIndex = GetGridColumnIndex(obj,ItemHeader);
        var TotalRows = obj["RowCount"];
        for(Row=0;Row<TotalRows;Row++)
        {
          strCellValue = obj["Rows"]["Item"](Row)["Cells"]["Item"](ColumnIndex)["Value"];
          if(strCellValue == ItemValue)
          {
            return(Row);
          }  
        }
        break;
        
    case "DataGrid":
    
        var TotalRows = obj["wRowCount"];
        for(Row=0;Row<TotalRows;Row++)
        {
          strCellValue = eval("obj.Items.Item("+Row+")."+ ItemHeader + ".OleValue");
          if(strCellValue == ItemValue)
          {
            return(Row);
          }  
        }
        break;
        
    case "DataGridEx":
        var ColumnIndex = GetGridColumnIndex(obj,ItemHeader);
        var Row
        Row = -1;
        ColumnIndex = ColumnIndex+1
        var arrDataGridCell = obj.FindAllchildren(Array("ClrClassName","WPFControlOrdinalNo"),Array("DataGridCell",ColumnIndex),20)["toArray"]()
        for (var j=0;j<arrDataGridCell["length"];j++)
        {   
          var arrTextBlock = arrDataGridCell[j].FindChild(Array("ClrClassName","WPFControlOrdinalNo"),Array("TextBlock",ColumnIndex),10)
          var strCellvalue = arrTextBlock["WPFControlText"]
          if (strCellvalue== ItemValue)

            {
              Row = arrDataGridCell[j].parent.WPFControlOrdinalNo
              return(Row);

            }     
        }

		break;
  }
}

function GetGridRowNos(obj, ItemHeader, ItemValue)
{
  Class = obj.ClrClassName
  switch(Class)
  {     
    case "DataGridEx":
        var ColumnIndex = GetGridColumnIndex(obj,ItemHeader);
        var Row
        Row = -1;
        var intTest = 0;
        var arrTestData = new Array();
        ColumnIndex = ColumnIndex+1
        var arrDataGridCell = obj.FindAllchildren(Array("ClrClassName","WPFControlOrdinalNo"),Array("DataGridCell",ColumnIndex),20)["toArray"]()
        for (var j=0;j<arrDataGridCell["length"];j++)
        {   
          var arrTextBlock = arrDataGridCell[j].FindChild(Array("ClrClassName","WPFControlOrdinalNo"),Array("TextBlock",ColumnIndex),10)
          var strCellvalue = arrTextBlock["WPFControlText"]
          if (strCellvalue== ItemValue)
            {
              Row = arrDataGridCell[j].parent.WPFControlOrdinalNo
              arrTestData[intTest++]= Row
            }     
        }
        return arrTestData;
        break;
  }
}


function CheckTextonOneColumnGrid(objctrl, strText)
{
 try
  {
    Class = objctrl["ClrClassName"]
    switch(Class)
    {
      case "DataGrid":
    
          Rowcount = objctrl["wRowCount"];
          var Textfound=0;
          for(Row=0; Row<Rowcount; Row++)
          {
            objctrl["SelectedIndex"] = Row;
            strValue = eval("objctrl.Items.Item("+Row+").OleValue");
            if(strValue == strText)
            { 
              Log["Message"]("The Item: "+strText+" is available in Row number: " + Row);      
              return(true);
              break;
            }
          }
      break;
    }
    
  } 
  catch(exp)
  {
      Log["Message"]("Exception: " + exp["Description"]);
  }
  
}

/*
Description : This method searches all the rows in a given grid <objctrl> for Text <strText> in the column <ColName> 
*/

function CheckTextonGrid(objctrl,ColName, strText)
{
  try
  {
    Class = objctrl["ClrClassName"]
    switch(Class)
    {
      case "WinShellGridView":
    
          var ColumnIndex = GetGridColumnIndex(objctrl,ColName);
          Rowcount = objctrl["RowCount"];
          for(Row = 0; Row < Rowcount; Row++)
          {
            strValue = objctrl["Item"](ColumnIndex, Row)["Value"]["OleValue"]
            if( aqString["ToLower"](strValue) == aqString["ToLower"](strText))
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(true);
            }
          }
          break;
    
      case "DataGrid":
    
          Rowcount = objctrl["wRowCount"];
          var Textfound=0;
          for(Row=0; Row<Rowcount; Row++)
          {
            objctrl["SelectedIndex"] = Row;
            strValue = eval("objctrl.Items.Item("+Row+")."+ ColName + ".OleValue");
            if(strValue == strText)
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(true);
            }
          }
          break;
	case "DataGridEx":
    
          Rowcount = objctrl  ["Items"]["Count"];
      
          var Textfound=0;
          for(Row=0; Row<Rowcount; Row++)
          {
            strValue = eval("objctrl.Items.Item("+Row+")."+ ColName + ".OleValue");
            if(strValue == strText)
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(true);
            }
          }
          break;
    }
    
  } 
  catch(exp)
  {
      Log["Message"]("Exception: " + exp["Description"]);
  }
  
  //Log["Warning"]("The Item "+strText+" is not available in the Column: " + ColName);  
  return false;
}



/*
Description : This method searches all the rows in a given grid <objctrl> for Text <strText> in the column <ColName> 
*/

function CheckTextonGridRow(objctrl,ColName, Row,strText)
{
  try
  {
    Class = objctrl["ClrClassName"]
    switch(Class)
    {
      	case "DataGridEx":
    
          Rowcount = objctrl  ["Items"]["Count"];
          var Textfound=0;

          strValue = eval("objctrl.Items.Item("+Row+")."+ ColName + ".OleValue");
          if(strValue == strText)
          {       
            return(true);
          }
          break;
          
        case "WinShellGridView":
//          Rowcount = objctrl["RowCount"];
          var ColumnIndex = GetGridColumnIndex(objctrl,ColName);
          strValue = objctrl["Item"](ColumnIndex, Row)["Value"]["OleValue"]
          if( aqString["ToLower"](strValue) == aqString["ToLower"](strText))
          {      
            return(true);
          }
          break;
        
    } 
    
  }
  catch(exp)
  {
      Log["Message"]("Exception: " + exp["Description"]);
  }

}

function GetGridCellText(objctrl,RowNum,ColumName)
{
  var strCellText = "";
  Class = objctrl.ClrClassName
  
  switch(Class)
  {
      case "WinShellGridView":
            var ColumnIndex = GetGridColumnIndex(objctrl,ColumName)
            //strCellText = objctrl["Rows"]["Item"](" +RowNum+ ")["Cells"]["Item"](" +ColumnIndex+ ")["Value"]["OleValue"];
            strCellText = objctrl["Rows"]["Item"](RowNum)["Cells"]["Item"](ColumnIndex)["Value"]["OleValue"];
            break;
      
      case "DataGrid":
			
			      strCellText = eval("objctrl.Items.Item("+RowNum+")."+ ColumName + ".OleValue");
            break;
    
      case "DataGridEx":
            //strCellText = eval("objctrl.Items.Item("+RowNum+")."+ ColumName + ".OleValue");
            var ColumnIndex = GetGridColumnIndex(objctrl,ColumName)
            ColumnIndex =ColumnIndex+1
            
            oDataGridRow = objctrl.findchild(Array("ClrClassName", "WPFControlOrdinalNo"), Array("DataGridRow", RowNum), objctrl.ChildCount, true)
            var oDataGridCell = oDataGridRow.Findchild(Array("ClrClassName", "WPFControlOrdinalNo"),Array("DataGridCell",ColumnIndex),20,true)                       
            var oTextBlock = oDataGridCell.Findchild(Array("ClrClassName"),Array("TextBlock"),10)
            strCellText = oTextBlock.WPFControlText
            break;
  }
            
  return aqString["Trim"](strCellText);
  
}

function VerifyObjectExistance(objctrl) //This function needs to be replaced with GetPropertyValue
{
  if ((objctrl["Exists"]) & (objctrl["Visible"]))
  {
    return true;
  }
  else
  {
    return false;
  }
}


function VerifyObjectExists(objctrl)  //This function needs to be replaced with GetPropertyValue
{
  if (objctrl["Exists"])
  {
    return true;
  }
  else
  {
    return false;
  }
}

function VerifyObjectEnabled(objctrl) //This function needs to be replaced with GetPropertyValue
{
  if ((objctrl["Exists"]) & (objctrl["Enabled"]))
  {
    return true;
  }
  else
  {
    return false;
  }

}

function GetPropertyValue(objctrl,PropertyName)
{
  var PropertyValue=aqObject["GetPropertyValue"](objctrl,PropertyName);
  return PropertyValue;
}

function GetSampleProperty(objctrl, PropertyName)
{
  try
  {
    if(objctrl["Exists"])
    {
      switch(PropertyName)
      {
        case "Priority" :
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["get_Priority"]()))
                        break;
        case "Status" :
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["get_SampleStatusDisplayLocalized"]()))
                        break;
        case "CapStatus" :
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["get_CapStatus"]()))
                        break;
        case "ModuleID" :   
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["get_ErrorStatusLocalized"]()));
                        break;
        case "Location" :   
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["zcurrentLocation"]["zmoduleID"]["zTypeOfModule_k__BackingField"]));
                        break;
        case "DrawerZone" :   
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["zcurrentLocation"]["zZoneLocationWithinDrawer_k__BackingField"]));
                        break;
        case "DrawerNumber" :   
                        retval= aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["zcurrentLocation"]["zDrawerID_k__BackingField"]);
                        return aqString["GetChar"](retval,aqString["GetLength"](retval)-1)
                        break;

	case "SampleContainerType":
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["get_Container"]));
                        break;
	case "SampleType" :
                        return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["get_OrderType"]()));
						break;
	case "SealStatus" : 
                              return (aqString["Trim"]( objctrl["DataContext"]["SelectedSample"]["get_SealStatus"]()));
                              break;
                        
        default :
                        return "";
                        break;
      }
    }
    else
      return "";
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function GetSampleErrStatus(objctrl)
{
  try
  {
    if(objctrl["Exists"])
    { 
      var ErrList="";
      aqString["ListSeparator"]=";";
      for(cnt=0;cnt<(objctrl["Items"]["Count"]);cnt++)
      {
      ErrList=aqString["AddListItem"](ErrList,objctrl["Items"]["Item"](cnt)["Olevalue"],cnt); 
      }
      return ErrList;
    }
    else
      return "";
  }
  catch(exp)
  {
    Log["Message"]("Exception - " +exp["Description"]);
  }
}


//This method can handle only the "GRID" class
function GetGridAttribute(objctrl, ChildNumber, AttributeName)
{
  try
  {
    if(objctrl["Exists"])
      return ( aqString["Trim"](objctrl["Children"]["Item"](ChildNumber)["DataContext"][AttributeName]["OleValue"]));
    else
      return "";
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function SelectListViewItem(objctrl, PropertyName, ListViewItem)
{
  try
  {
    var iCount = objctrl["wItemCount"];
    for(var i=0; i<iCount; i++)
    {
      if(objctrl["Items"]["Item"](i)[PropertyName]["OleValue"]==ListViewItem)
      {
        objctrl["ClickItem"](i); 
        return true;
      }
    }
    if(icheck ==0)
    {
      return false;
    } 
  }
  catch(exp)
    {
      Log["Message"]("Exception " + exp["Description"]);
    }
}

function VerifyListViewItem(objctrl,PropertyName,ListViewItem)
{
  try
  {
    var icheck = 0;
    var iCount=objctrl["wItemCount"];
    for(i=0;i<iCount;i++)
      {
        if (objctrl["Items"]["Item"](i)[PropertyName]["OleValue"]==ListViewItem)
        {
          icheck = 1;
		  objctrl["ClickItem"](i);
          return true;
          break;
        }
      }
    if(icheck ==0)
    {
      return false;
    } 
  }
  catch(exp)
    {
      Log["Message"]("Exception: " + exp["Description"]);
    }
}

function SetFocusComboBox(Control)
{
  try
  {
    var objControl = eval(Control);
    objControl["Focus"]();
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

//Select combo item based on the sub-string
function SelectComboValue(objctrl,value)
{
 
  var iCount=objctrl["wItemCount"]
  for(var i=1;i<iCount;i++)
  {
    if (aqString["Find"](objctrl["Items"]["Item"](i)["Mnemonic"]["OleValue"],value)==0)
    {
      objctrl["SelectedIndex"]=i
      return true;
    }
    
  }
  
}

function SelectAnalyzerComboValue(objctrl,value)
{
  var iCount=objctrl["wItemCount"]
  for(var i=1;i<iCount;i++)
  {
    if(aqString["Find"](value, objctrl["Items"]["Item"](i)["ModuleName"]["OleValue"])!= -1)
    {
      objctrl["SelectedIndex"]=i
      return true;
    }
  }
}

//Get combo box item value based on Item index
function GetComboxItemValue(Control, intItemIndex)
{
  if(Control["Exists"]==true)
  {
    return Control["Items"]["Item"](intItemIndex)["Name"]["OleValue"];
  }
  else
  {
    return(false)
  }
  
}

//Parameter <Value> can take index of the combo box item that has to be selected
function GetComboxBoxValue(Control)
{
  if(Control["Exists"]==true)
  {
    return Control["wText"];
  }
  else
  {
    return(false)
  }
}

//Parameter <Value> can take index of the combo box item that has to be selected 
function SetComboValue(Control,value)
{
  if(Control["Exists"]==true)
  {
    Control["ClickItem"](value);
  }
  else
  {
    return(false)
  }
}

function SetComboText(Control,value)
{
  if(Control["Exists"]==true)
  {
    Control["set_Text"](value);
  }
  else
  {
    return(false)
  }
  
}

function setWPFComboText_New(Control, value)          //Joby - For QC Definition
{
  if(Control.Exists==true)
  {
    intItemCount = Control.wItemCount
    for(intIndex = 0; intIndex < intItemCount; intIndex++)
    {
      if(Control.wItem(intIndex) == value)
      {
        Control.SelectedIndex = intIndex
        Log["Message"]("Comboboxvalue set to "+value);
        break;
      }
    }
  }
  else
  {
    return(false)
  }
}

function setWPFComboText(Control, value)
{
  if(Control.Exists==true)
  {
    intItemCount = Control.wItemCount
    for(intIndex = 0; intIndex < intItemCount; intIndex++)
    {
      if(Control.Items.Item(intIndex).ModuleName.OleValue == value)
      {
        Control.SelectedIndex = intIndex
        break;
      }
    }
  }
  else
  {
    return(false)
  }
}

function GetComboItemsList(Control)
{
  try
  {
    var Class = Control["ClrClassName"]
    switch(Class)
    {
      case "ShellComboBox":
                      
                        if(Control["Exists"]==true)
                        {
                          return Control["wItemList"];
                        }
                        else
                        {
                          return false;
                        }
                        break;
      default:
                        break;
    } 
  }
  catch(exp)
  {
    Log["Message"]("Exception: "+ exp["Description"]);
    return false;  
  }
} 

function SelectGridRow(Control, intRowNum)
{
  try
  {
  var Class = Control["ClrClassName"]
  switch(Class)
  {
    case "DataGridEx":
                      
                      if(Control["Exists"]==true)
                      {
                        Control["SelectedIndex"] = intRowNum;
                      }
                      else
                      {
                        return(false)
                      }
                      break;
    case "DataGrid":
                      
                      if(Control["Exists"]==true)
                      {
                        Control["SelectedIndex"] = intRowNum;
                      }
                      else
                      {
                        return(false)
                      }
                      break;
    
    default:
                      break;
   } 
  }
  catch(exp)
  {
    Log["Message"]("Exception: "+ exp["Description"]);
    return false;  
  }
}

//************************************************************************************************************************************************************************************
//*  FunctionName : SelectPicBoxTest(objctrl, TestName)
//*  Description: This function will select the given Test from Test selection grid on Patient screen 
//*  Input: objctrl, Test Name
//***********************************************************************************************************************************************************************************

function SelectPicBoxTest(objctrl, TestName)
{
try
{
  TestItemCount=objctrl["Items"]["Count"];
  for (i=0; i<TestItemCount;i++)
  {
   PatTestName=objctrl["Item"](i)["Name"]["OleValue"];
   if (aqString["ToUpper"](PatTestName)==aqString["ToUpper"](TestName)) 
   {
    TestID=objctrl["Item"](i)["ID"];
    objctrl["SelectItem"](TestID,true);
    Log["Message"](TestName + " is selected from Test selection Grid")
    return true;
   }
  }
  return false;
  }
  catch(exp)
  {
        Log["Error"]("Exception - " + exp["description"]);
    return false;
  }
}


//This method selects the menu items from a StripMenu object. Parameter should be given in the form of hierarchy separated by pipe key (|)
// e.g. "Reagents|Reagent Drawer Load..."
function SelectStripMenuItem(Control, strItemHierarchy)
{
  try
  {
    if(Control["Exists"]==true)
    {
      Control["StripMainMenu"]["Click"](strItemHierarchy);
      return true;
    }
    else
    {
      return false;
    } 
  }
  catch(exp)
  {
    Log["Error"]("Exception - " + exp["description"]);
    return false;
  } 
} 


function GetGridCellTextByColumnIndex(objctrl,RowNum,ColumnIndex)
{
  var strCellText = "";
  Class = objctrl.ClrClassName
  
  switch(Class)
  {
      case "WinShellGridView":
            strCellText = objctrl["Rows"]["Item"](RowNum)["Cells"]["Item"](ColumnIndex)["Value"]["OleValue"];
            break;
            
  }
  
  return aqString["Trim"](strCellText);
}

function GetParent(Control)
{
  try
  {
    if(Control["Exists"]==true)
    {
      return Control["Parent"];
    }
    else
    {
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception - " + exp["description"]);
    return false;
  } 
}

function ReplaceString(InputString, StringToReplace, SubString, CaseSensitive)
{
  try
  {
    return aqString.Replace(InputString, StringToReplace, SubString, CaseSensitive)
  }
  catch(exp)
  {
    Log["Error"]("Exception - " + exp["description"]);
    return false;
  } 
} 

function SelectTdefTabs(objCtrl,TabName)
{
  for(i=0;i<=objCtrl.TabCount;i++)
  {
    objCtrl.SelectedIndex=i;
    if(objCtrl["SelectedTab"]["Text"]["OleValue"]==GetTranslatedString(TabName,""))
    {
      return true;
    } 
  } 
  return false;
  
} 

//*---------------------------- HYDRA Functions -------------------------------*/

/*-------
 BHAWYA 
 -------*/

//Description :Function for highlighted log message
function LogHighlight(strMsg)

{
  var Attr,attrBlock;
  Attr = Log.CreateNewAttributes();
  Attr.FontColor = RGB(0, 0, 205);
  Attr["BackColor"] = RGB(255, 255, 0)
  
  attrBlock = Log.CreateNewAttributes();
  attrBlock.Bold = true;
  attrBlock.Italic = true;
  attrBlock.FontColor = RGB(0, 0, 255);
 
  if(aqString["Find"](strMsg,"Scenario Count",0,false)!= -1){
    Log["Message"](strMsg, "", pmNormal, attrBlock);
  }
  else{
    Log["Message"](strMsg, "", pmNormal, Attr);
  }
  

  

}


//Description :Function for RGB component
function CorrectRGBComponent(component)
{
  component = aqConvert.VarToInt(component);
  if (component < 0)
    component = 0;
  else
    if (component > 255)
      component = 255;
  return component;
}

//Description :Function to specify log color
function RGB(r, g, b)
{
  r = CorrectRGBComponent(r);
  g = CorrectRGBComponent(g);
  b = CorrectRGBComponent(b);
  return r | (g << 8) | (b << 16);
}

function CheckTextonGridReturnRowNo(objctrl,ColName, strText)
{
  try
  {
    Class = objctrl["ClrClassName"]
    switch(Class)
    {
      case "WinShellGridView":
    
          var ColumnIndex = GetGridColumnIndex(objctrl,ColName);
          Rowcount = objctrl["RowCount"];
          for(Row = 0; Row < Rowcount; Row++)
          {
            strValue = objctrl["Item"](ColumnIndex, Row)["Value"]["OleValue"]
            if( aqString["ToLower"](strValue) == aqString["ToLower"](strText))
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(Row);
            }
          }
          break;
    
      case "DataGrid":
    
          Rowcount = objctrl["wRowCount"];
          var Textfound=0;
          for(Row=0; Row<Rowcount; Row++)
          {
            objctrl["SelectedIndex"] = Row;
            strValue = eval("objctrl.Items.Item("+Row+")."+ ColName + ".OleValue");
            if(strValue == strText)
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(Row);
            }
          }
          break;
	case "DataGridEx":
    
          Rowcount = objctrl  ["Items"]["Count"];
      
          var Textfound=0;
          for(Row=0; Row<Rowcount; Row++)
          {
            strValue = eval("objctrl.Items.Item("+Row+")."+ ColName + ".OleValue");
            if(strValue == strText)
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(Row);
            }
          }
          break;
    }
    
  } 
  catch(exp)
  {
      Log["Message"]("Exception", exp["Description"]);
  }
  
  //Log["Warning"]("The Item "+strText+" is not available in the Column: " + ColName);  
  return -1;
}

function GetGridCellTextForHydra(objctrl,RowNum,ColumName)
{
  var strCellText = "";
  Class = objctrl.ClrClassName
  
  switch(Class)
  {
      case "WinShellGridView":
            var ColumnIndex = GetGridColumnIndex(objctrl,ColumName)
            //strCellText = objctrl["Rows"]["Item"](" +RowNum+ ")["Cells"]["Item"](" +ColumnIndex+ ")["Value"]["OleValue"];
            strCellText = objctrl["Rows"]["Item"](RowNum)["Cells"]["Item"](ColumnIndex)["Value"]["OleValue"];
            break;
      
      case "DataGrid":
			
			      strCellText = eval("objctrl.Items.Item("+RowNum+")."+ ColumName + ".OleValue");
            break;
    
      case "DataGridEx":
            strCellText = eval("objctrl.Items.Item("+RowNum+")."+ ColumName + ".OleValue");
            break;
  }
            
  return aqString["Trim"](strCellText);
  
}

function GetGridCellImageTextByColumnIndex(objctrl,RowNum,ColumnIndex,PropertyName)
{
  
  try
  {
    var strCellImageText = "";
    Class = objctrl.ClrClassName
  
    switch(Class)
    {
        case "DataGridEx" :
              ColumnIndex =ColumnIndex+1;
            
              oDataGridRow = objctrl.findchild(Array("ClrClassName", "WPFControlOrdinalNo"), Array("DataGridRow", RowNum), objctrl.ChildCount, true)
              var oDataGridCell = oDataGridRow.Findchild(Array("ClrClassName", "WPFControlOrdinalNo"),Array("DataGridCell",ColumnIndex),20,true)                       
              var oImage = oDataGridCell.Findchild(Array("ClrClassName"),Array("Image"),10)
            
              strCellImageText = GetImageProperty(oImage, PropertyName)
              break;
              
        default :
              break;
     }
   
     return strCellImageText;
   }
   catch(exp)
   {
      Log["Message"]("Exception: " + exp["Description"]);
   }
}

function GetImageProperty(objctrl,PropertyName)
{
  
  try
  {
    if(objctrl["Exists"])
      {
        switch(PropertyName)
        {
          case "PackStatusIconList" :
        
                    var strActualImageMessage="";
                    var iconmessagecount = objctrl["DataContext"]["PackStatusIconList"]["Count"]
                    for (var index =0 ;index <iconmessagecount; index ++)
                    {
                      var strImageMessage = aqString["Trim"](objctrl["DataContext"]["PackStatusIconList"]["Item"](index))
                    
                      strActualImageMessage = aqString["Concat"](strActualImageMessage,strImageMessage +";" )
                    }
                  
                    return strActualImageMessage;
                    break;
        
           default :
                    return "";
                    break;
        }// end of switch
      }
      
   }
   catch(exp)
   {
      Log["Message"]("Exception: " + exp["Description"]);
   }   

}

function UnselectGridRow(Control)
{
  try
  {
  var Class = Control["ClrClassName"]
  switch(Class)
  {
    case "DataGridEx":
                      
                      if(Control["Exists"]==true)
                      {
                        Control["SelectedIndex"] = -1;
                        return true;
                      }
                      else
                      {
                        return(false)
                      }
                      break;
    case "DataGrid":
                      
                      if(Control["Exists"]==true)
                      {
                        Control["SelectedIndex"] = -1;
                        return true;
                      }
                      else
                      {
                        return(false)
                      }
                      break;
    
    default:
                      break;
   } 
  }
  catch(exp)
  {
    Log["Message"]("Exception: "+ exp["Description"]);
    return false;  
  }
}

function CheckSubstringTextonGrid(objctrl,ColName, strText, startPosition, length)
{
  try
  {
    Class = objctrl["ClrClassName"]
    switch(Class)
    {
      case "WinShellGridView":
    
          var ColumnIndex = GetGridColumnIndex(objctrl,ColName);
          Rowcount = objctrl["RowCount"];
          for(Row = 0; Row < Rowcount; Row++)
          {
            strValue = objctrl["Item"](ColumnIndex, Row)["Value"]["OleValue"];
            subStrValue = aqString["SubString"](strValue, startPosition, length);
            if( aqString["ToLower"](strText) == aqString["ToLower"](subStrValue))
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(true);
            }
          }
          break;
    
      case "DataGrid":
    
          Rowcount = objctrl["wRowCount"];
          var Textfound=0;
          for(Row=0; Row<Rowcount; Row++)
          {
            objctrl["SelectedIndex"] = Row;
            strValue = eval("objctrl.Items.Item("+Row+")."+ ColName + ".OleValue");
            subStrValue = aqString["SubString"](strText, startPosition, length);
            if(strText == subStrValue)
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(true);
            }
          }
          break;
	case "DataGridEx":
    
          Rowcount = objctrl  ["Items"]["Count"];
      
          var Textfound=0;
          for(Row=0; Row<Rowcount; Row++)
          {
            strValue = eval("objctrl.Items.Item("+Row+")."+ ColName + ".OleValue");
            subStrValue = aqString["SubString"](strText, startPosition, length);
            if(strText == subStrValue)
            { 
              Log["Message"]("The Item: "+strText+" is available in Column: " + ColName + ", Row number: " + Row);      
              return(true);
            }
          }
          break;
    }
    
  } 
  catch(exp)
  {
      Log["Message"]("Exception: " + exp["Description"]);
  }
  
  Log["Error"]("The Item "+strText+" is not available in the Column: " + ColName);  
  return false;
}


function ScenarioPassOrFail(boolValue)
{
  var attr = Log["CreateNewAttributes"]();
  attr["Bold"] = true;
  attr["Italic"] = true;
  if(boolValue == true)
  {
    attr["FontColor"] = clGreen
    Log["Message"]("Test Passed",null,pmNormal,attr);
  }
  else
  {
    attr["FontColor"] = clRed
    Log["Message"]("Test Failed",null,pmNormal,attr);  
  }
}


//*---------------------------- Primary Display Functions -------------------------------*/

// Function Name : SetValue(Control,Text)
// Function Description: This function uses the native Testcomplete API to set a text in textbox
// Inputs : Control -> Control/Object Name of the Textbox
//        : Text -> Text to be entered in the Textbox
// ***********************************************************************************************
function SetValue(Control,Text)
{
  try
  {
    var objControl = eval(Control);
    objControl["SetValue"](Text);
  } 
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function GetToggleState(Control) {
  try
  {
      var objControl = eval(Control);
      return objControl["ToggleState"];
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function GetRadioButtonStatus(Control) {
  try
  {
      var objControl = eval(Control);
      return objControl["IsSelected"];
  }
  catch(exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function GetComboBoxValueSelected(Control, ControlType) {
  try
  {
    switch (ControlType)
    {
      case "UWP":
      default:
        if(VerifyObjectExists(Control)) {
          return Control["Selection"].toArray()[0];
        } else {
          return false;
        }
    }
  }
  catch (exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function SelectComboBoxItem(Control, TextValue) {
  try
  {
    if(VerifyObjectExists(Control)) {
      ClickCtrl(Control);
      //SendKeys(Control, TextValue)
      var childElements = Control["FindAllChildren"]("ClassName", "ComboBoxItem", 35, true);
      var listItems = childElements.toArray();
      var isItemFound = false;
      for(i=0; i<listItems.length;i++) {     
        var actualValue = GetNativeObjectName(listItems[i]);
        if(aqString["ToLower"](actualValue) == aqString["ToLower"](TextValue)) 
        {
          if(listItems[i]["Visible"])
          {
            Log["Message"]("List item '" + TextValue + "' located in the drop down list and selecting the value");
            isItemFound = true;
            ClickCtrl(listItems[i]);
            break;  
          } else {
            listItems[i]["ScrollIntoView"]();
            ClickCtrl(listItems[i]);
          }
          
        }
      }
      if(!isItemFound) {
        Log["Error"]("Unable to locate the list item '" + TextValue + "' in the drop down list");
      }
    }
  }
  catch (exp)
  {
    Log["Message"]("Exception: " + exp["Description"]);
  }
}

function GetDataGridRowCount(Control) {
	var objCtrl = eval(Control);
	return objCtrl["RowCount"];
}

function GetNativeObjectName(Control) {
	var objCtrl = eval(Control);
	return objCtrl["NativeUIAObject"]["Name"];
}

function GetCheckBoxState(Control) {
	var objCtrl = eval(Control);
	return objCtrl["ToggleState"];
}

function GetObjectIdentifier(Control)
{
  var objCtrl = eval(Control);
  return objCtrl["ObjectIdentifier"];
}

function WaitForControlToGetDisappeared(Control, waitCounterValue)
{
  try
  {
    var counterValue = 0
    while(Control["Visible"] == true && counterValue <= waitCounterValue)
    {
      aqUtils["Delay"](1000, "Waiting for control to be disappeared");
      counterValue = counterValue + 1;
      Control["Parent"]["Refresh"]();
      
      if(Control["Visible"] == false)
      {
        break;
      }
      
      if(counterValue > waitCounterValue)
      {
        return false;
      }
    }
    
    if(Control["Visible"] == true) {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Control did not disappeared after waiting for " + waitCounterValue);
      return false;
    } else {
      return true; 
    }      
  }
  catch(exp)
  {
    Log["Error"]("Exception: " + exp["Description"]);
    return false;
  }   
}

function ClickCtrl(Control)
{
  try
  {
  	var objControl = eval(Control);
	  objControl["Click"]();
    aqUtils["Delay"](1000, "Sync for click"); 
  }
  catch(exp)
  {
    Log["Message"]("Exception "+ exp["Description"]);
  }
}

function ScrollIntoView(Control)
{
  try
  {
    //Disabling the log for avoiding the warning message of scroll into view
    Log["Enabled"] = false;
          
    //Scroll to the Control
    Control["ScrollIntoView"]();
          
    //Enabling the log
    Log["Enabled"] = true;
  }
  catch (e)
  {
    Log["Error"]("Failed to perform the scroll operation");
    Log["Error"]("Exception : " + e["description"]);      
  }
}

function SelectDateFromCalendarViewControl(date,month,year)
{
  try
  {
    Log["AppendFolder"]("DatePicker Calendar ::  Select the date, month and year");
    
    //get the root element
    var parentElement = Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75");
    
    //Calendar Popup
    var calendarViewCtrl = Getchild(parentElement,["AutomationId","ClassName"],["CalendarView","CalendarView"])
  
    //Calendar Header
    var headerCtrl = Getchild(calendarViewCtrl,"AutomationId", "HeaderButton");
  
    //Click the calender header to display the months
    ClickCtrl(headerCtrl);
    
    //Click the calender header to display the Years
    ClickCtrl(headerCtrl);
  
    //Get the Year control From Calendar popup
    var yearCtrl = Getchild(calendarViewCtrl,"AutomationId", "DecadeViewScrollViewer");
    
    //Get the required year control
    var requiredYearCtrl = Getchild(yearCtrl,["ClassName","NativeUIAObject.Name"],["CalendarViewItem", year]);
    
    //Check the required year control exists
    if(VerifyObjectExistance(requiredYearCtrl)) {
      //Select the required Year From Calendar
      ClickCtrl(requiredYearCtrl)
    } else {
      Log["Message"]("Unable to find the year specified to select");
      Log["PopLogFolder"]();
      return false;
    }
  
    //Get the Year control From Calendar popup
    var monthCtrl = Getchild(calendarViewCtrl,"AutomationId", "YearViewScrollViewer");
    
    //Get the required month control
    var requiredMonthCtrl = GetAllChildren(monthCtrl,["ClassName","NativeUIAObject.Name"],["CalendarViewItem", month]);
    if(requiredMonthCtrl.length > 1) {
      Log["Message"]("Selecting the month :" + GetNativeObjectName(requiredMonthCtrl[1]));
      //select the required month
      ClickCtrl(requiredMonthCtrl[1]);
    } else {
      Log["Message"]("Selecting the month :" + GetNativeObjectName(requiredMonthCtrl[0]));
      ClickCtrl(requiredMonthCtrl[0]);
    }
  
    //Get the date control From Calendar popup
    var dateCtrl = Getchild(calendarViewCtrl,"AutomationId", "MonthViewScrollViewer");
    
    //Get the required date control
    var requiredDateCtrl = GetAllChildren(dateCtrl,["ClassName","NativeUIAObject.Name"],["CalendarViewDayItem", date]);
    
    //check if the date number is displayed twice (for prev/next month) as well
    if(requiredDateCtrl.length > 1) 
    {
      var dateCtrlTobeSelect = undefined;
      
      //check the date is greater than 15 and to select the active date
      if(date > 15)
      {
        dateCtrlTobeSelect = requiredDateCtrl[0];
      } else {
        dateCtrlTobeSelect = requiredDateCtrl[1];
      }
      
      //Check the date is already selected      
      if(dateCtrlTobeSelect["IsSelected"])
      {
        Log["Message"]("Selecting the date :" + GetNativeObjectName(dateCtrlTobeSelect));
        Log["Message"]("Date is already in selected status");
        ClickCtrl(dateCtrlTobeSelect);
        ClickCtrl(dateCtrlTobeSelect);
      } else {
        Log["Message"]("Selecting the date :" + GetNativeObjectName(dateCtrlTobeSelect));
        ClickCtrl(dateCtrlTobeSelect);
      }
    } else {
      //Check the date is already selected      
      if(requiredDateCtrl[0]["IsSelected"])
      {
        Log["Message"]("Selecting the date :" + GetNativeObjectName(requiredDateCtrl[0]));
        Log["Message"]("Date is already in selected status");
        ClickCtrl(requiredDateCtrl[0]); 
        ClickCtrl(requiredDateCtrl[0]);
      } else {
        Log["Message"]("Selecting the date :" + GetNativeObjectName(requiredDateCtrl[0]));
        ClickCtrl(requiredDateCtrl[0]);  
      }          
    }    
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function IsDataGridDisplayedAsFullView()
{
  try
  {
    Log["AppendFolder"]("Worklist :: Check the Filter Section Is Expanded");
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"]();
    
    var filterExpanderCtrl = GetAutomationIDControl("Worklist","filterExpanderCtrl");
    
    if(VerifyObjectExists(filterExpanderCtrl))
    {
      Log["Message"]("Filter Section is located in the screen");
      
      var filterExpanderChildCount = filterExpanderCtrl["ChildCount"];
      
      if(filterExpanderChildCount > 1)
      {
        Log["Message"]("Filter Section is expanded and Datagrid is in Normal View");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Filter section is collapsed and Datagrid is in Full View");
        Log["PopLogFolder"]();
        return true;
      }      
    } else {
      Log["Error"]("Unable to locate the filter expander control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

//Added by Prabu Ramaraj - reusable method to get the row details of the SF datagrid
function GetSFGridRowDetails(datagridCtrl)
{
  try
  {
    //Get the row count of the worklsit datagrid
    var rowDetails = GetAllChildren(datagridCtrl, "ClassName", "GridRow");
      
    //check the row count greter than zero
    if(typeof rowDetails == "boolean")
    {
      Log["Error"]("There are no records displayed in the event Log datagrid");
      return false;
    } else {
      rowDetails = rowDetails.reverse();
      return rowDetails;
    }    
  }
  catch (e)  
  {
    Log["Error"]("Exception : " + e["description"]);
    return false;  
  }
}

//***************************************************************************************
//*   Function Name       : GetDataGridColumnIndexByColumnHeader()
//*   Function Description: This function is used to get the column index of the given column header name
//*   Input               : DatagridControl, ColumnName
//*   Output              : return true, if the worklist screen is displayed
//*                         return false, if the worklist screen is not displayed
//*   Date of Creating    : 17 June 2019
//*   Last Modified date  : 28 June 2019
//*   Created By          : Prabu Ramaraj
//*****************************************************************************************
function GetDataGridColumnIndexByColumnHeader(datagridCtrl,columnName) 
{ 
  try
  {
    //Get list of column headers from the datagrid control
    var columnHeaderCtrl = Getchild(datagridCtrl,"ClassName", "GridHeaderRow");        
    
    var headerCtrlList = GetAllChildren(columnHeaderCtrl,"ClassName","GridCell").reverse();
    var isHeaderIdentified = false;
    
    //Iterate the column header list
    for(var headerIndex=0; headerIndex<headerCtrlList.length; headerIndex++) 
    {
      if(headerCtrlList[headerIndex]["ChildCount"] > 0)
      {
        var headerNameCtrl = Getchild(headerCtrlList[headerIndex],"ClassName","TextBlock");
        var headerName = headerNameCtrl["Text"];
      
        //Check the current iteration column name matches with the given column header name
        if(aqString["ToLower"](headerName) == aqString["ToLower"](columnName)) {
          Log["Message"]("Column header '" + columnName + "' identifed with index '" + headerIndex + "'");
        
          //return the iteration index as a column index
          return headerIndex;
        }        
      }      
    }
    
    if(!isHeaderIdentified)
    {
      Log["Error"]("Unable to locate the column header from the datagrid");
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception",e["description"]);
    return false;
  }
}

//********************************************************************************************
// <summary>To Verify The Record Exists In Datagrid.</summary>
// <param name="objCtrl">Datagrid Object Control</param>
// <param name="referenceColumn">referenceColumn as integer value</param>
// <param name="recordName">recordName as string value</param>
// <remarks>
//    Author: Prabu Ramaraj
//    Date of Creation: 14 June 2019
//    Last Modified: --
//    Modified By: --
// </remarks> 
// <return>true,if the Record Exists & Verified Successfully </return>
// <return>false,if the Record Not Exists</return>
//**********************************************************************************************
function VerifyTheRecordExistsInDatagrid(objCtrl, datagridName, referenceColumnName, recordName) 
{
  try
  {
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(objCtrl);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Get the column index from datagrid metadata xml file
    var columnIndex = GetDataGridColumnIndexFromMetadataSheet(datagridName,referenceColumnName);
  
    var isDataExist = false;
  
    //Iterate the datarows of the datagrid
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++) 
    {
      var rowParent = rowDetails[rowIndex];
      var dataCellList = GetAllChildren(rowParent, "ClassName", "GridCell").reverse();
      var dataCellCtrl = Getchild(dataCellList[columnIndex], "ClassName", "TextBlock");
      var actualRecordValue = dataCellCtrl["Text"];      
      if(actualRecordValue == recordName) 
      {
        Log["Message"]("The record name '" + referenceColumnName + " - " + recordName + "' exists in the datagrid");
        isDataExist = true;
        break;
      }
    }  
    return isDataExist;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    return false;
  }  
}

//#datagridCode = datagrid name; #columnName = reference column Name #isFullView = (Optional, required only if the filter section is collapsed)
function GetDataGridColumnIndexFromMetadataSheet(datagridCode,columnName,isFullView)
{
  try
  {        
    //Project file Paths
    var ProjPath = ProjectSuite["Path"];
    var projNames = ProjPath["split"]("\\");
    var arrPath  = ProjPath["split"](projNames[projNames.length-2]);
    var strMetadataXMLPath = arrPath[0] +"TaskLayer\\PrimaryDisplay\\syncFusionDataGrid_Metadata.xml";
    var syncFusionGridMetaData = ReadXML(strMetadataXMLPath);
    var categoryName = datagridCode["split"]("_")[0];
    var columnIndexNode = undefined; 
    var columnIndex = -1;
    
    //check the fullview status
    if(!isFullView)
    {
      //is the filter is expanded
      columnIndexNode = syncFusionGridMetaData["selectSingleNode"]("SyncFusionDatagrids/Category[@Name='"+categoryName+"']/Datagrid[@Code='"+datagridCode+"']/Column[@Name='"+columnName+"']/ColumnIndex")
    } else {
      //is the filter is collapsed
      columnIndexNode = syncFusionGridMetaData["selectSingleNode"]("SyncFusionDatagrids/Category[@Name='"+categoryName+"']/Datagrid[@Code='"+datagridCode+"']/Column[@Name='"+columnName+"']/ColumnIndexFullView")
    }
    
    //check the index of the column is found
    if(!columnIndexNode)
    {
      Log["Error"]("Unable to locate and get the column index for the column name '" + columnName + "' in the datagrid '" + datagridCode + "'");
      return false;
    } else {
      columnIndex = columnIndexNode["Text"] ;
      return columnIndex;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    return false;
  }  
}

function IsDataGridDisplayedAsFullViewReagent()
{
  try
  {
    Log["AppendFolder"]("Worklist :: Check the Filter Section Is Expanded");
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"]();
    
    var filterExpanderCtrl = GetAutomationIDControl("ReagentNeeds_ReagentOverview","filterExpanderCtrlReagent");
    
    if(VerifyObjectExists(filterExpanderCtrl))
    {
      Log["Message"]("Filter Section is located in the screen");
      
      var filterExpanderChildCount = filterExpanderCtrl["ChildCount"];
      
      if(filterExpanderChildCount > 1)
      {
        Log["Message"]("Filter Section is expanded and Datagrid is in Normal View");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Filter section is collapsed and Datagrid is in Full View");
        Log["PopLogFolder"]();
        return true;
      }      
    } else {
      Log["Error"]("Unable to locate the filter expander control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}
//USEUNIT TCNativeLibraries
//USEUNIT ControlAccessLibrary
//USEUNIT WorkflowNavigator

function VerifySampleAttributesFromSampleList(SampleId, ExpectedSampleAttribute)
{
  try
  {
    Log["AppendFolder"]("Samples::GetSampleAttributesFromSampleList");
    Log["Message"]("Checking the Sample list grid for " +SampleId); 
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
    var transSampleAttributes =GetTranslatedString(ExpectedSampleAttribute,"")
    //Verify the sample ID
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
        break;
    }
    if(blnSampleCheck == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
      objctrl = GetControl("Samples_SampleList","grdSampleDetails");
      if(objctrl["Exists"])
      {
        ActualSampleAttribute = GetGridAttribute(objctrl, 0, "SelectedSampleAttributes");
        Log["Message"]("Sample Attribute for SampleID: " + SampleId + " is coming as: " + ActualSampleAttribute);
        if(aqString["Compare"](transSampleAttributes, ActualSampleAttribute,true) == 0)
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample attribute: "+ transSampleAttributes +" matches with actual sample attribute: " + ActualSampleAttribute);
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample attribute: "+ transSampleAttributes +" does not match with actual sample attribute: " + ActualSampleAttribute);
          Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Message"]("Sample attributes grid not found");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Message"](SampleId + " did not appear on the list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function VerifySampleProperty(SampleId, PropertyName, ExpectedPropertyValue)
{
  try
  {
    Log["AppendFolder"]("Samples::VerifySampleProperty");
    Log["Message"]("Checking the Sample list grid for " +SampleId); 
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
    var transPropertyName =GetTranslatedString(PropertyName,"")
    var transExpectedPropertyValue =ExpectedPropertyValue//GetTranslatedString(ExpectedPropertyValue,"")
    
    //Verify the sample ID
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
        break;
    }
    if(blnSampleCheck == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
      objctrl = GetControl("Samples_SampleList","grdSampleDetails");
      if(objctrl["Exists"])
      {        
        PropertyValue = GetSampleProperty(objctrl, PropertyName);
        Log["Message"](PropertyName + " for SampleID: " + SampleId + " is coming as: " + PropertyValue);
        if(aqString["Compare"](transExpectedPropertyValue, PropertyValue, true) == 0)
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample property value: "+ ExpectedPropertyValue +" matches with actual sample property value: " + PropertyValue);
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          //Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample property value: "+ ExpectedPropertyValue +" does not match with actual sample property value: " + PropertyValue);
          Log["Warning"]("Expected sample property value: "+ transExpectedPropertyValue +" does not match with actual sample property value: " + PropertyValue);
          if(aqString["Compare"](ExpectedPropertyValue, PropertyValue, true) == 0)
          {
            Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample property verification passed");
			      Log["PopLogFolder"]();
            return true;
          }
          else
          {
            Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample " + PropertyName + " verification failed");
			      Log["PopLogFolder"]();
            return false;
          }
        }
      }
      else
      {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample attributes grid not found");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " did not appear on the list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


/*function VerifySampleProperty(SampleId, PropertyName, ExpectedPropertyValue)
{
  try
  {
    Log["AppendFolder"]("Samples::VerifySampleProperty");
    Log["Message"]("Checking the Sample list grid for " +SampleId); 
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
    var transPropertyName =GetTranslatedString(PropertyName,"")
    var transExpectedPropertyValue =ExpectedPropertyValue//GetTranslatedString(ExpectedPropertyValue,"")
    
    //Verify the sample ID
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
        break;
    }
    if(blnSampleCheck == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
      objctrl = GetControl("Samples_SampleList","grdSampleDetails");
      if(objctrl["Exists"])
      {
        blnPropCheck = false;
        for(var intCount=0; intCount < 10; intCount++)
        {
          if(!blnPropCheck)
          {
            PropertyValue = GetSampleProperty(objctrl, PropertyName);
            Log["Message"](PropertyName + " for SampleID: " + SampleId + " is coming as: " + PropertyValue);
            if(aqString["Compare"](transExpectedPropertyValue, PropertyValue, true) == 0)
            {
              Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample property value: "+ ExpectedPropertyValue +" matches with actual sample property value: " + PropertyValue);
              Log["PopLogFolder"]();
              blnPropCheck = true;
              break;
            }
            else
            {
//              Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample property value: "+ ExpectedPropertyValue +" does not match with actual sample property value: " + PropertyValue);
//              Below warning is for localized text. If text is not localized but functionality is working fine, then warning is given in the logs.
              Log["Warning"]("Expected sample property value: "+ transExpectedPropertyValue +" does not match with actual sample property value: " + PropertyValue + " ; Property value not translated");
              if(aqString["Compare"](ExpectedPropertyValue, PropertyValue, true) == 0)
              {
                Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample property verification passed");
    			      Log["PopLogFolder"]();
                blnPropCheck = true;
                break;
              }
              else
              {
                blnPropCheck = false;
              }
            }
          }
          aqUtils["Delay"](2000, "Waiting for property: " + PropertyName);
        }
        if(blnPropCheck)
          return true;
        else 
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample " + PropertyName + " verification failed");
  	      Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample attributes grid not found");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " did not appear on the list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}*/


function IsSampleCapped(SampleId, ExpectedSampleAttribute)
{
  try
  {
    Log["AppendFolder"]("Samples::IsSampleCapped");
    Log["Message"]("Checking the Sample list grid for " +SampleId);
    //Delay(30000); 
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    //Verify the sample ID
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Checking the Sample on the list")
      if(blnSampleCheck == true)
        break;
    } 
    if(blnSampleCheck == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
      //objctrl = GetControl("Samples_SampleList","txtBlockCapped");
      boolFlag = VerifySampleAttributesFromSampleList(SampleId, ExpectedSampleAttribute)
      if(boolFlag)
      {
        Log["Message"]("The sample attribute is identified as Capped")
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Message"]("The sample attribute is identified as Not Capped")
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Message"](SampleId + " did not appear on the list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
     Log["PopLogFolder"]();
      return false;
  }
}

function VerifySampleProblemsAssociated(SampleId, ExpectedText)
{
  try
  {
    Log["AppendFolder"]("Samples::VerifySampleProblemsAssociated");
    Log["Message"]("Checking the sample problems associated grid  for " +SampleId);
    
    //Verify the sample problems
    var transExpectedText =GetTranslatedString(ExpectedText,"")
    
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    for(i=0; i<90;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      if(blnSampleCheck == true)
        break;
      aqUtils["Delay"](1000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")

    }
    
    if(blnSampleCheck==true)
    {
      var objctrl = GetControl("Samples_SampleList","grdProblemsAssociated"); 
      for(k=1;k<=15;k++)
      {
        if (CheckTextonOneColumnGrid(objctrl, transExpectedText))
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample problem for " + SampleId + " is identified as: " + ExpectedText);
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          aqUtils["Delay"](2000, "Verifying Sample problem for " + SampleId + " as: " + ExpectedText);
          if(k==15)
          {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample problem for " + SampleId + " is not identified as: " + ExpectedText);
          Log["PopLogFolder"]();
          return false;
          }
        }// end of else
      }// end of for loop
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " is not showing up on the Sample list after waiting for 90 seconds");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCapError(SampleId)
{
  try
  {
    Log["AppendFolder"]("Sample::VerifyCapError");
    Log["Message"]("Checking the Sample list grid for SampleID: " +SampleId);
    
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    //Verify the sample ID
    if(CheckTextonGrid(objctrl, "zid", SampleId) == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
      strSampleStatus = GetGridCellText(objctrl, RowNum, "zsampleStatusDisplayLocalized");
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status for " + SampleId + " is coming as: " + strSampleStatus)
      var transCapError = GetTranslatedString("Cap Error", "");
      if( aqString["ToLower"](strSampleStatus) == aqString["ToLower"](transCapError))
      {
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["PopLogFolder"]();
        return false;
      }
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function VerifySortAreaHasEmptySlots(TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
{
  try
  {
    Log["AppendFolder"]("Samples::VerifySortAreaHasEmptySlots");
    var objDrawerPanels = new ActiveXObject("Scripting.Dictionary");
    var objDrawerPanels = GetDrawerZonePanel(TrayType,DrawerNumber,DrawerZone,DrawerPanels)
     
    var DrawerPanelcount
    DrawerPanelcount = objDrawerPanels["Count"] 
    
    aqUtils["Delay"](5000, "Check for empty slots")
    
    for(var k=0;k<DrawerPanelcount;k++)
    {
      var objDrawerPanelName  = objDrawerPanels["Item"](k)
      var objtempDrawerPanel = new Array();
      objtempDrawerPanel = objDrawerPanelName["split"]("()")
      var objDrawerPanel = objtempDrawerPanel[0]
      var DrawerPanel = objtempDrawerPanel[1]
     
    RowNumbers = aqConvert["VarToStr"](RowNumbers)
    var Rows = new Array();
    Rows = RowNumbers["split"](",");
    var TotalRows = Rows["length"]
    if (TotalRows >0)
    {
      for (var count=0;count<TotalRows;count++)
      {
        var RowNumber = Rows[count]
      
        var iHiddenSlot = 0
        var iEmptySlot=0
        var i
        var j;
        i=(RowNumber-1)*5 + 1;
  
        for(j=i;j<i+5;j++)
          { 
                var PropArray=["ClrClassName","WPFControlOrdinalNo"]
                var PropValue=["ListBoxItem",j]
                var TraytubeObj = GetFindchild(eval(objDrawerPanel),PropArray,PropValue,100)
				        //var TraytubeObj= objDrawerPanel["FindChild"](PropArray,PropValue,100)
                if (TraytubeObj["Exists"])
                {
                  if ((TraytubeObj["Content"]["Status"]["OleValue"]=="Empty")||(TraytubeObj["Content"]["Status"]["OleValue"]=="Unknown"))
                  {
                    iEmptySlot = iEmptySlot+1
                  }
                  else if (TraytubeObj["Content"]["Status"]["OleValue"]=="Hidden")
                  {
                    iHiddenSlot = iHiddenSlot+1
                  }
                }
          } // end of j varibale for loop
        
        TrayType = ToUpperCase(TrayType); 
        if(iEmptySlot>0)
        {
              switch(TrayType)
                {
                case "ROUTINE15" :
                case "STAT" :
                  Log["Message"](iEmptySlot+" Empty slots are available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone in " + DrawerPanel +" panel of " +TrayType +" tray");
                  break;
                case "ROUTINE55":
                  Log["Message"](iEmptySlot+" Empty slots are available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray");
                  break;
                }
              Log["PopLogFolder"]();
              return true;
        }
        else if(iHiddenSlot>1) 
        {
              switch(TrayType)
                {
                 case "ROUTINE15" :
                 case "STAT" :
                    Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone in " + DrawerPanel +" panel");
                    break;
                 case "ROUTINE55":
                    Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone");
                    break;
                 }
                 Log["PopLogFolder"]();
                 return false;
        }
        else
        {
              switch(TrayType)
                {
                case "ROUTINE15" :
                case "STAT" :
                  Log["Message"]("There are no Empty slots available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone in" + DrawerPanel +" panel");
                  break;
                case "ROUTINE55":
                  Log["Message"]("There are no Empty slots available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray" );
                  break;
                }
                
                Log["PopLogFolder"]();
                return false;
        }
        
        
      
    }// end of outer for loop 
    }// end of if
    
    } // end of outermost for loop
    
    //Log["PopLogFolder"]();
    }// end of try
    
    catch(exp)
    {
      Log["Error"]("Exception",exp["description"]);
      Log["PopLogFolder"]();
      return false;
    } 
}

function VerifySHAreaHasNoEmptySlots(TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
{
  try
  {
    Log["AppendFolder"]("Samples::VerifySHAreaHasNoEmptySlots");
    var objDrawerPanels = new ActiveXObject("Scripting.Dictionary");
    var objDrawerPanels = GetDrawerZonePanel(TrayType,DrawerNumber,DrawerZone,DrawerPanels)
     
    var DrawerPanelcount
    DrawerPanelcount = objDrawerPanels["Count"] 
    
    aqUtils["Delay"](5000, "Check for no empty slots")
    
    for(var k=0;k<DrawerPanelcount;k++)
    {
      var objDrawerPanelName  = objDrawerPanels["Item"](k)
      var objtempDrawerPanel = new Array();
      objtempDrawerPanel = objDrawerPanelName["split"]("()")
      var objDrawerPanel = objtempDrawerPanel[0]
      var DrawerPanel = objtempDrawerPanel[1]
     
    RowNumbers = aqConvert["VarToStr"](RowNumbers)
    var Rows = new Array();
    Rows = RowNumbers["split"](",");
    var TotalRows = Rows["length"]
    if (TotalRows >0)
    {
      for (var count=0;count<TotalRows;count++)
      {
        var RowNumber = Rows[count]
      
        var iHiddenSlot = 0
        var iEmptySlot=0
        var i
        var j;
        i=(RowNumber-1)*5 + 1;
  
        for(j=i;j<i+5;j++)
          { 
                var PropArray=["ClrClassName","WPFControlOrdinalNo"]
                var PropValue=["ListBoxItem",j]
                var TraytubeObj = GetFindchild(eval(objDrawerPanel),PropArray,PropValue,100)
				        //var TraytubeObj= objDrawerPanel["FindChild"](PropArray,PropValue,100)
                if (TraytubeObj["Exists"])
                {
                  if ((TraytubeObj["Content"]["Status"]["OleValue"]=="Empty")||(TraytubeObj["Content"]["Status"]["OleValue"]=="Unknown"))
                  {
                    iEmptySlot = iEmptySlot+1
                  }
                  else if (TraytubeObj["Content"]["Status"]["OleValue"]=="Hidden")
                  {
                    iHiddenSlot = iHiddenSlot+1
                  }
                }
          } // end of j varibale for loop
        
        TrayType = ToUpperCase(TrayType); 
        if(iEmptySlot>0)
        {
              switch(TrayType)
                {
                case "ROUTINE15" :
                case "STAT" :
                  Log["Message"](iEmptySlot+" Empty slots are available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone in " + DrawerPanel +" panel of " +TrayType +" tray");
                  break;
                case "ROUTINE55":
                  Log["Message"](iEmptySlot+" Empty slots are available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray");
                  break;
                }
              Log["PopLogFolder"]();
              return false;
        }
        else if(iHiddenSlot>1) 
        {
              switch(TrayType)
                {
                 case "ROUTINE15" :
                 case "STAT" :
                    Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone in " + DrawerPanel +" panel");
                    break;
                 case "ROUTINE55":
                    Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone");
                    break;
                 }
                 Log["PopLogFolder"]();
                 return false;
        }
        else
        {
              switch(TrayType)
                {
                case "ROUTINE15" :
                case "STAT" :
                  Log["Message"]("There are no Empty slots available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone in" + DrawerPanel +" panel");
                  break;
                case "ROUTINE55":
                  Log["Message"]("There are no Empty slots available in row "+RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray" );
                  break;
                }
                
                Log["PopLogFolder"]();
                return true;
        }
        
        
      
    }// end of outer for loop 
    }// end of if
    
    } // end of outermost for loop
    
    //Log["PopLogFolder"]();
    }// end of try
    
    catch(exp)
    {
      Log["Error"]("Exception",exp["description"]);
      Log["PopLogFolder"]();
      return false;
    } 
}
function VerifyDuplicateSample(SampleId, SampleStatus)
{
  try
  {
    Log["AppendFolder"]("Sample::VerifyDuplicateSample");
    Log["Message"]("Checking the Sample list grid for SampleID: " +SampleId);
    
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
//    for(i=0; i<60;i++)
//    {
//      intSampleCount = GetGridRowCount(objctrl);
//      if(intSampleCount == 2)
//        break;
//      else
//        aqUtils["Delay"](1000, "Waiting for duplicate sample to appear on the Sample list grid")
//    }
    
    if(CheckTextonGrid(objctrl, "zid", SampleId) == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
      strSampleStatus = GetGridCellText(objctrl, RowNum, "zsampleStatusDisplayLocalized");
      //Log["Message"]("Sample status for " + SampleId + " is coming as: " + strSampleStatus);
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status for " + SampleId + " is coming as: " + strSampleStatus);
      if(aqString["Trim"](strSampleStatus) == aqString["Trim"](SampleStatus))
      {
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " is not showing up on the Sample list");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }

}

// This function verifies the sample location matches with <ExpectedSampleLocation> in Samples>SampleList tab
function VerifySampleLocationOnTrack(SampleId, ExpectedSampleLocation)
{
  try
  {
    Log["AppendFolder"]("Sample::VerifySampleLocationOnTrack");
    Log["Message"]("Getting the sample location from Sample list grid for SampleID: " +SampleId);
    
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
        break;
    }
    if(blnSampleCheck == true) 
    //if(CheckTextonGrid(objctrl, "zid", SampleId) == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)

      intStartTime = aqDateTime["Time"]()
      var boolFlag = false;
      intTimeElapsed = 0;
      while( (boolFlag!=true) && (intTimeElapsed < 120000) )
      {
        //strSampleLocation = GetGridCellText(objctrl, RowNum, "zcurrentLocationModuleId");
        strSampleLocation = GetGridCellText(objctrl, RowNum, "zcurrentLocation.zmoduleID.zTypeOfModule_k__BackingField")
        if( aqString["Trim"](strSampleLocation) == aqString["Trim"](ExpectedSampleLocation))
          boolFlag = true;
        else
        {
          intTimeElapsed = aqDateTime["Time"]() - intStartTime;
          aqUtils["Delay"](1000, "Waiting for location of "+SampleId+" to show as " + ExpectedSampleLocation +" on Sample list");
        }
      }

      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample location for " + SampleId + " is displayed as: " + strSampleLocation);
      if(boolFlag)
      {
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " is not showing up on the Sample list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function VerifySampleLocationInSampleList(SampleId, ExpectedSampleLocation)
{
  try
  {
    Log["AppendFolder"]("Sample::VerifySampleLocationInSampleList");
    Log["Message"]("Getting the sample location from Sample list grid for SampleID: " +SampleId);
    
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
    for(var i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
        break;
    }
    
    if(blnSampleCheck == true) 
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)

      intStartTime = aqDateTime["Time"]();
      var boolFlag = false;
      intTimeElapsed = 0;
      while( (boolFlag!=true) && (intTimeElapsed <60000) )
      {
        strSampleLocation = GetGridCellText(objctrl, RowNum, "zcurrentLocationModuleId");
        if( aqString["Trim"](strSampleLocation) == aqString["Trim"](ExpectedSampleLocation))
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId+ " location is displayed as "+strSampleLocation);
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          intTimeElapsed = aqDateTime["Time"]() - intStartTime;
          aqUtils["Delay"](2000, "Verifying sample "+ SampleId + " location for 60 seconds");
        }
      }

      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample location for " + SampleId + " is displayed as: " + strSampleLocation);
      Log["PopLogFolder"]();
      return false;
      
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " is not showing up on the Sample list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function WaitForSampleStatus(SampleId, SampleStatus)
{
  try
  {
    Log["AppendFolder"]("Sample::WaitForSampleStatus");
    Log["Message"]("Checking the Sample list grid for SampleID: " +SampleId);
	  var blnTranslationCheck = false;
    
    var transSampleStatus=GetTranslatedString(SampleStatus,"")
    
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
    for(i=0; i<90;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
      {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample: " + SampleId + " came up on Sample list grid.")
        break;        
      } 

    }
     
    if(blnSampleCheck == true)
    //if(CheckTextonGrid(objctrl, "zid", SampleId) == true)
    {
      for(var i=0; i<120;i++)
      {
		    var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
	    //strSampleStatus = GetGridCellText(objctrl, RowNum, "zsampleStatusDisplayLocalized");
        strSampleStatus = GetSampleProperty(objctrl, "Status");
        
        if( aqString["Trim"](strSampleStatus) == aqString["Trim"](transSampleStatus))
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status for " + SampleId + " is displayed as: " + strSampleStatus);
          Log["PopLogFolder"]();
			    blnTranslationCheck = true;
          return true;
        }
        else
        {   
          aqUtils["Delay"](5000, "Waiting for Sample: " + SampleId + " to be "+SampleStatus+" on Sample list grid")
        }
      }
      
      if (blnTranslationCheck == false)
      {
        Log["Warning"]("Expected sample status : "+ transSampleStatus +" does not match with actual sample status: " + strSampleStatus);
        if(aqString["Compare"](SampleStatus, strSampleStatus, true) == 0)
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status verification passed");
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status verification failed");
          Log["PopLogFolder"]();
          return false;
        }
      }
	    Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status for " + SampleId + " is displayed as: " + strSampleStatus);
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " is not showing up on the Sample list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
    Log["PopLogFolder"]();
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifySampleStatus(SampleId, SampleStatus)
{
  try
  {
    Log["AppendFolder"]("Sample::VerifySampleStatus");
    Log["Message"]("Checking the Sample list grid for SampleID: " +SampleId);
    
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
        break;
    }
    if(blnSampleCheck == true)
    //if(CheckTextonGrid(objctrl, "zid", SampleId) == true)
    {
      var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
      strSampleStatus = GetGridCellText(objctrl, RowNum, "zsampleStatusDisplayLocalized");
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status for " + SampleId + " is displayed as: " + strSampleStatus);
      if( aqString["Trim"](strSampleStatus) == aqString["Trim"](SampleStatus))
      {
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " is not showing up on the Sample list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
    Log["PopLogFolder"]();
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
      return false;
  }
}


function VerifyUnloadedSample(SampleIDs,TrayType,DrawerNumber, DrawerZone,DrawerPanels,RowNumbers)
{
  try
  {
    Log["AppendFolder"]("Samples::VerifyUnloadedSample");
//  var strWorkflowXMLPath=Project["Path"]+"TestData\\TrinidadWorkflows.xml";
//var strControlXMLPath = Project["Path"]+"Testdata\\TrinidadControls.xml";
//    InitializeWorkflowXML(strWorkflowXMLPath);
//  InitializeControlXML(strControlXMLPath);
//  AddNameMappingObjects();
//     var Navigation = InvokeWorkflow("Samples_SampleHandler");
//  if (!Navigation)
//    Runner["Stop"]();

    TrayType = ToUpperCase(TrayType); 
//    SampleIDs = aqConvert["VarToStr"](SampleIDs)
//    var Samples = new Array();
//    Samples = SampleIDs["split"](",");
//    var TotalSamples = Samples["length"]
    
//    for(var waittime =0; waittime<7 ;waittime++)
//    {
//      aqUtils["Delay"](6000,"Waiting for all input samples to get processed and unloaded")

//    }

//    if (TotalSamples>0)
//    {
//      for (var samplecount = 0; samplecount<TotalSamples; samplecount++)
//      {
        
        var objDrawerPanels = new ActiveXObject("Scripting.Dictionary");
        var objDrawerPanels = GetDrawerZonePanel(TrayType,DrawerNumber,DrawerZone,DrawerPanels)
     
        var DrawerPanelcount
        DrawerPanelcount = objDrawerPanels["Count"] 
    
        for(var k=0;k<DrawerPanelcount;k++)
        {
          var objDrawerPanelName  = objDrawerPanels["Item"](k)
          var objtempDrawerPanel = new Array();
          objtempDrawerPanel = objDrawerPanelName["split"]("()")
          var objDrawerPanel = eval(objtempDrawerPanel[0])
          var DrawerPanel = objtempDrawerPanel[1]
      
          RowNumbers = aqConvert["VarToStr"](RowNumbers)
          var Rows = new Array();
          Rows = RowNumbers["split"](",");
          var TotalRows = Rows["length"]
      
          if (TotalRows >0)
            {      
              for (count=0;count<TotalRows;count++)
                {
                  var RowNumber = Rows[count]

                  var i
                  var j;
                  var iHiddenSlot
                  var iSamplePresent;
                  iHiddenSlot = 0
                  i=(RowNumber-1)*5 + 1;
  
                  for(j=i;j<i+5;j++)//for(j=i;j<i+5;j++)
                    { 
                          var PropArray=["ClrClassName","WPFControlOrdinalNo"]
                          var PropValue=["ListBoxItem",j]
                          var TraytubeObj = GetFindchild(objDrawerPanel,PropArray,PropValue,100)
                          if (TraytubeObj["Exists"])
                          {
                            //if (TraytubeObj["Content"]["AccessionNumber"]["OleValue"]==SampleID)
                            if (TraytubeObj["Content"]["Status"]["OleValue"]!="Hidden")
                            {
                                  if ((TraytubeObj["Content"]["AccessionNumber"]["OleValue"]!= SampleIDs)||(TraytubeObj["Content"]["AccessionNumber"]["OleValue"]== ""))
                                  {
                                    if ((TraytubeObj["Content"]["Status"]["OleValue"]=="Empty")||(TraytubeObj["Content"]["Status"]["OleValue"]=="Unknown"))
                                    {
                                      for(var sampletime =0; sampletime<40 ;sampletime++)
                                      {
                                          switch(TrayType)
                                          {
                                            case "ROUTINE15" :
                                            case "STAT" :
                                            {
                                            aqUtils["Delay"](5000,"Waiting for sample " + SampleIDs + " to appear in drawer "+ DrawerNumber+ " in zone " +DrawerZone +" in panel " +DrawerPanel + " in row "+RowNumber + " in slot "+ j)
                                            break;
                                            }
                                            case "ROUTINE55" :
                                            {
                                            aqUtils["Delay"](5000,"Waiting for sample " +Samples[samplecount] + " to appear in drawer "+ DrawerNumber+ " in zone " +DrawerZone + " in row " +RowNumber +" in slot "+ j)
                                            break;
                                            }
                                          }// end of switch
                                          if (TraytubeObj["Content"]["AccessionNumber"]["OleValue"]== SampleIDs)
                                          {
                                            iSamplePresent = 1;
                                            Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Unloaded sample screenshot for SampleID: " +SampleIDs);
                                            break;
                                          }
                                      }// end of sampletime for loop
                                    }// end of if check for empty
                                  }// end of if other accession nunber check
                                  else if (TraytubeObj["Content"]["AccessionNumber"]["OleValue"]== SampleIDs)
                                    {
                                      iSamplePresent = 1;
                                      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Unloaded sample screenshot for SampleID: " +SampleIDs);
                                      break;
                                    }
                            }// end of if check for not hidden
                            else if (TraytubeObj["Content"]["Status"]["OleValue"]=="Hidden")
                            {
                              iHiddenSlot = iHiddenSlot+1
                            }

                          }// end of Traytubeobj exists
                    if (iSamplePresent == 1)
                    {
                      break;
                    }
                    
                    //added to handle comes out for full row slots check for sample unloading if previous slot is empty
                    if (TraytubeObj["Content"]["Status"]["OleValue"]== "Empty")
                    {
                      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "slot"+j + " is empty in row"+ RowNumber + " of drawer" + DrawerNumber + " " +DrawerZone+ " zone");
                      break;
                    }//added to handle comes out for full row slots check for sample unloading if previous slot is empty 
                    } // end of j varibale for loop
            
                if (iSamplePresent == 1)
                {
                  break;
                }
                }// end of count for loop
             
              }// end of if
    
        if (iSamplePresent == 1)
        {
          break;
        }
        
        } //end of outer for loop 

        switch(TrayType)
          {
              case "ROUTINE15" :
              case "STAT" :
                if (iSamplePresent == 1)
                {
                  Log["Message"](SampleIDs + " is unloded in row " +RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone in " + DrawerPanel +" panel of " +TrayType +" tray");
                  Log["PopLogFolder"]();
                  return true;
                }
                else if(iHiddenSlot>1)
                {
                  Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone in " + DrawerPanel +" panel")
                  //Log["PopLogFolder"]();
                  return false;
                }
                else
                {
                  Log["Error"](SampleIDs + " is not unloded in row " +RowNumber + " in drawer " + DrawerNumber+ " " +DrawerZone+ " zone in " + DrawerPanel +" panel of " +TrayType +" tray");
                  Log["PopLogFolder"]();
                  return false;
                }
                break;
              case "ROUTINE55":
                if (iSamplePresent == 1)
                {
                  Log["Message"](Samples[samplecount] + " is unloded in row " +RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray");
                  Log["PopLogFolder"]();
                  return true;
                }
                else if(iHiddenSlot>1)
                {
                  Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone");
                  Log["PopLogFolder"]();
                  return false;
                }
                else
                {
                  Log["Error"](Samples[samplecount] + " is not unloded in row " +RowNumber + " in drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray");
                  Log["PopLogFolder"]();
                  return false;
                }
                break;
          }
      
//      } // end of samplecount for loop
//    }// end of total samples if condition 
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyInputTrayEmpty(SampleCount,TrayType,DrawerNumber,DrawerZone,DrawerPanels,RowNumbers)
{
  try
  {
    Log["AppendFolder"]("Samples::VerifyInputTrayEmpty");
    var SHscreen=SampleHandlerScreen()
    if (SHscreen ==true)
    {
      TrayType = ToUpperCase(TrayType); 
      var objDrawerPanels = new ActiveXObject("Scripting.Dictionary");
      var objDrawerPanels = GetDrawerZonePanel(TrayType,DrawerNumber,DrawerZone,DrawerPanels)
     
      var DrawerPanelcount
      DrawerPanelcount = objDrawerPanels["Count"]  
    
      var iHiddenSlot = 0
      var iEmptySlot=0
      var i
      var j;
            
      for(var k=0;k<DrawerPanelcount;k++)
      {
        var objDrawerPanelName  = objDrawerPanels["Item"](k)
        var objtempDrawerPanel = new Array();
        objtempDrawerPanel = objDrawerPanelName["split"]("()")
        var objDrawerPanel = objtempDrawerPanel[0]
        var DrawerPanel = objtempDrawerPanel[1]
     
        var SlotStatus = InputSlotsNotUnknown(objDrawerPanel)
        if (SlotStatus==false)
        {
          RowNumbers = aqConvert["VarToStr"](RowNumbers)
          var Rows = new Array();
          Rows = RowNumbers["split"](",");
          var TotalRows = Rows["length"]
       
          if (TotalRows >0)
          {
            for (var count=0;count<TotalRows;count++)
            {
                var RowNumber = Rows[count]
                i=(RowNumber-1)*5 + 1;
                for(j=i;j<i+5;j++)
                  { 
                        var PropArray=["ClrClassName","WPFControlOrdinalNo"]
                        var PropValue=["ListBoxItem",j]
                        var TraytubeObj = GetFindchild(eval(objDrawerPanel),PropArray,PropValue,100)
                        if (TraytubeObj["Exists"])
                        {                         
                          if ((TraytubeObj["Content"]["Status"]["OleValue"]=="UnidentifiedTube")&&(j<=SampleCount))
                          {   
                              for(var slottime =0; slottime<20 ;slottime++)
                              {
                                  switch(TrayType)
                                  {
                                    case "ROUTINE15" :
                                    case "STAT" :
                                      {
                                      aqUtils["Delay"](1000,"Waiting for slot " +j+ "to get empty in drawer "+ DrawerNumber+ " in zone " +DrawerZone +" in panel " +DrawerPanel + " in row "+RowNumber)
                                      break;
                                      }
                                    case "ROUTINE55" :
                                      {
                                      aqUtils["Delay"](1000,"Waiting for slot " +j+ "to get empty in drawer "+ DrawerNumber+ " in zone " +DrawerZone + " in row " +RowNumber)
                                      break;
                                      }
                                  }// end of switch
                                  if ((TraytubeObj["Content"]["Status"]["OleValue"]=="Empty")&&(j<=SampleCount))
                                  {
                                    iEmptySlot = iEmptySlot+1
                                    break;
                                  }
                              }// end of slottime for loop
                          }// end of not empty if condition
                          else if ((TraytubeObj["Content"]["Status"]["OleValue"]=="Empty")&&(j<=SampleCount))
                          {
                            iEmptySlot = iEmptySlot+1
                          }
                          else if (TraytubeObj["Content"]["Status"]["OleValue"]=="Hidden")
                          {
                            iHiddenSlot = iHiddenSlot+1
                          }
                        }// end of Traytubeobj exist if condition
                  } // end of j varibale for loop
              }// end of row count for loop
       
              Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Input Tray screenshot");
              
              if(iEmptySlot==SampleCount)
              {
                    switch(TrayType)
                      {
                      case "ROUTINE15" :
                      case "STAT" :
                        Log["Message"]("All " +SampleCount+" input samples has moved from input drawer" + DrawerNumber+ " " +DrawerZone+ " zone in " + DrawerPanel +" panel of " +TrayType +" tray");
                        Log["PopLogFolder"]();
                        return true;
                        break;
                      case "ROUTINE55":
                        Log["Message"]("All " +SampleCount+" input samples has not moved from input drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray");
                        Log["PopLogFolder"]();
                        return true;
                        break;
                      }
              }
              else if(iHiddenSlot>1) 
              {
                    switch(TrayType)
                      {
                       case "ROUTINE15" :
                       case "STAT" :
                          Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone in " + DrawerPanel +" panel");
                          Log["PopLogFolder"]();
                          return false;
                          break;
                       case "ROUTINE55":
                          Log["Error"]("Tray is not visible in drawer" + DrawerNumber+ " " +DrawerZone + " zone");
                          Log["PopLogFolder"]();
                          return false
                          break;
                       }
              }
              else
              {
                    switch(TrayType)
                      {
                      case "ROUTINE15" :
                      case "STAT" :
                        Log["Error"]("All " +SampleCount+" input samples has not moved from input drawer" + DrawerNumber+ " " +DrawerZone+ " zone in " + DrawerPanel +" panel of " +TrayType +" tray");
                        Log["Error"]("Input tray did not get empty");
                        Log["PopLogFolder"]();
                        return false;
                        break;
                      case "ROUTINE55":
                        Log["Error"]("All " +SampleCount+" input samples has not moved from input drawer" + DrawerNumber+ " " +DrawerZone+ " zone of " +TrayType+ " tray");
                        Log["Error"]("Input tray did not get empty");
                        Log["PopLogFolder"]();
                        return false;
                        break;
                      }
              }
        
            }// end of if totalrows condition
          }// end of if NotUnknown slots
          else
          {
            Log["Error"]("Input tray slots are displayed as Unknown after waiting for 20 seconds");
            Log["PopLogFolder"]();
            return false;
          }    
        } // end of drawerpanel for loop
    
      }// end of Sample handler screen if conditon 
      else
      {
        Log["Error"]("Sample Handler screen did not come up after waiting for 10 seconds");
        Log["PopLogFolder"]();
        return false;
      }
      }// end of try
    catch(exp)
    {
      Log["Error"]("Exception",exp["description"]);
      Log["PopLogFolder"]();
      return false;
    }

}

function SampleHandlerScreen()
{
  try
  {
      //  Wait for Sample Handler screen to appear
      intStartTime = aqDateTime["Time"]();
      var boolFlag = false;
      intTimeElapsed = 0;
    
      var objctrl = GetControl("Samples_SampleHandler","tabItemRacks");
      while((boolFlag!=true)&& (intTimeElapsed < 10000) )
      {
        if(objctrl["Exists"])
        {
          Log["Message"]("Sample Handler screen is visible");
          boolFlag = true;
          return boolFlag;
        }
        else
          {
            intTimeElapsed = aqDateTime["Time"]() - intStartTime;
            aqUtils["Delay"](1000, "Wait for Sample Handler screen to appear")
          }
      }
      if (intTimeElapsed>10000)
      return boolFlag;
  }
  catch(exp)
      {
        Log["Error"]("Exception",exp["description"]);
        return false;
      }
}
function InputSlotsNotUnknown(objDrawerPanel)
{
  try
  {
      var PropArray=["ClrClassName","WPFControlOrdinalNo"]
      var PropValue=["ListBoxItem","1"]
      var TraytubeObj = GetFindchild(eval(objDrawerPanel),PropArray,PropValue,100)
      intStartTime = aqDateTime["Time"]();
      var boolFlagUnknown = true;
      intTimeElapsed = 0;
      if (TraytubeObj["Exists"])
      {
        while((boolFlagUnknown!=false)&& (intTimeElapsed < 20000) )
        {
          if(TraytubeObj["Content"]["Status"]["OleValue"]=="Unknown")
          {
            aqUtils["Delay"](1000, "Wait for Input tray Unknown slots to disappear and appear as Unidentified tube")
            intTimeElapsed = aqDateTime["Time"]() - intStartTime;
          }
          else
            {
              Log["Message"]("Tray Unknown slots disappeared and appeared as Unidentified tube ");
              boolFlagUnknown = false;
              return boolFlagUnknown;  
            }
        }
//        Log["Message"](intTimeElapsed);             
//        Log["Message"](intStartTime); 
        if (intTimeElapsed>20000)
        return boolFlagUnknown;
      }
     aqUtils["Delay"](1000, "Wait for slots to get stable") 
  }
  catch(exp)
      {
        Log["Error"]("Exception",exp["description"]);
        return false;
      }
}
function GetDrawerZonePanel(TrayType,DrawerNumber,DrawerZone,DrawerPanels)
{
    try
    {
      var objctrl = GetControl("Samples_SampleHandler","griddetailsLayout")
      var objMainRegion = GetFindchild(objctrl,Array("WPFControlName","WPFControlOrdinalNo"),Array("MainRegion","2"),200)
      var objDrawerGrid = GetFindchild(objMainRegion,Array("ClrClassName","WPFControlOrdinalNo"),Array("Grid","2"),1)
      var objDrawer = GetFindchild(objDrawerGrid ,Array("ClrClassName","WPFControlOrdinalNo"),Array("ContentPresenter",DrawerNumber),200)
      var objTrayZoneList = GetFindchild(objDrawer ,Array("WPFControlName","WPFControlOrdinalNo"),Array("TrayZoneList","1"),200)
  
      DrawerZone = ToUpperCase(DrawerZone); 
      switch(DrawerZone)
        {
          case "FRONT":
            var objDrawerZone = GetFindchild(objTrayZoneList ,Array("ClrClassName","WPFControlOrdinalNo"),Array("ListBoxItem","2"),200)
            break;
          case "BACK":
            var objDrawerZone = GetFindchild(objTrayZoneList ,Array("ClrClassName","WPFControlOrdinalNo"),Array("ListBoxItem","1"),200)   
            break;      
        }

      var x = objDrawerZone["Width"];
      var y = objDrawerZone["Height"];
      objDrawerZone["Click"](x/2,y/2);
      Delay(1000);
  
  
      //var objctrl =GetControl("Samples_SampleHandler","lstTrayItems")
      var objctrl =GetControl("Samples_SampleHandler","lstTrayZone")
  
      TrayType = ToUpperCase(TrayType); 
      
      DrawerPanels = aqConvert["VarToStr"](DrawerPanels)
      var Panels = new Array();
      Panels = DrawerPanels["split"](",");
      var TotalPanels = Panels["length"]
      
      var dictobjDrawerPanels = new ActiveXObject("Scripting.Dictionary");
      
      if (TotalPanels >0)
      {
          for (var count=0;count<TotalPanels;count++)
          {
            var DrawerPanel = Panels[count]
      
            DrawerPanel = ToUpperCase(DrawerPanel);
    
            switch(TrayType)
            {
              case "ROUTINE15" :
              case "STAT" :
                switch(DrawerPanel)
                  {
                    case "TOP":
                      var objDrawerPanel = GetFindchild(objctrl ,Array("ClrClassName","WPFControlOrdinalNo"),Array("ListBoxItem","1"),200)
                      break;
                    case "MIDDLE":
                      var objDrawerPanel = GetFindchild(objctrl ,Array("ClrClassName","WPFControlOrdinalNo"),Array("ListBoxItem","2"),200)     
                      break; 
                    case "BOTTOM":
                      var objDrawerPanel = GetFindchild(objctrl ,Array("ClrClassName","WPFControlOrdinalNo"),Array("ListBoxItem","3"),200)    
                      break;           
                  }
                break;
              case "ROUTINE55":
                var objDrawerPanel = GetFindchild(objctrl ,Array("ClrClassName","WPFControlOrdinalNo"),Array("ListBoxItem","1"),200)
                break;
            }// end of switch

            var objtempDrawerPanel = aqObject.GetPropertyValue(objDrawerPanel, "FullName")
            objDrawerPanelName = objtempDrawerPanel + "()" + DrawerPanel
            
            dictobjDrawerPanels["Add"](count,objDrawerPanelName);             
          }// end of for loop 
          return dictobjDrawerPanels
      }//end of if
    
      
    
    }// end of try block
    catch(exp)
    {
      Log["Error"]("Exception",exp["description"]);
      return false;
    }
    
}

function VerifyArchiveTimerExpires(intArchiveTimeout)
{
  try
  {
    Log["AppendFolder"]("Setup::VerifyArchiveTimerExpires");
    //var intArchiveTimeout=15;    //this is default time - when executed on 10 OCT
    var intArchiveTimeoutMS = (intArchiveTimeout * 60000)
    aqUtils["Delay"](intArchiveTimeoutMS, "Waiting for archive timeout to elapse. Archival Timeout is "+intArchiveTimeout + " mins")
    Log["Message"]("Archival timeout expired")
    Log["PopLogFolder"]();
    return true;
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyTrayNotPresent(TrayType,DrawerNumber,DrawerZone,DrawerPanels)
{
  try
  {    
    Log["AppendFolder"]("Samples::VerifyTrayNotPresent");
    var objDrawerPanels = new ActiveXObject("Scripting.Dictionary");
    var objDrawerPanels = GetDrawerZonePanel(TrayType,DrawerNumber,DrawerZone,DrawerPanels)
     
    var DrawerPanelcount
    DrawerPanelcount = objDrawerPanels["Count"] 
    
    aqUtils["Delay"](1000)
    
    for(var k=0;k<DrawerPanelcount;k++)
    {
      var objDrawerPanelName  = objDrawerPanels["Item"](k)
      var objtempDrawerPanel = new Array();
      objtempDrawerPanel = objDrawerPanelName["split"]("()")
      var objDrawerPanel = objtempDrawerPanel[0]
      var DrawerPanel = objtempDrawerPanel[1]
     
      var iHiddenSlot = 0

      var PropArray=["ClrClassName","WPFControlOrdinalNo"]
      var PropValue=["ListBoxItem",1]
      var TraytubeObj = GetFindchild(eval(objDrawerPanel),PropArray,PropValue,100)
      if (TraytubeObj["Exists"])
      {
        if (TraytubeObj["Content"]["Status"]["OleValue"]=="Hidden")
        {
          iHiddenSlot = iHiddenSlot+1
        }
        else
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample Handler screen to verify tray present or not in drawer" + DrawerNumber+ " " +DrawerZone + " zone");
        }
      }

        
      TrayType = ToUpperCase(TrayType); 
      if(iHiddenSlot>0) 
      {
        switch(TrayType)
          {
           case "ROUTINE15" :
           case "STAT" :
              Log["Message"]("Tray is not present in drawer" + DrawerNumber+ " " +DrawerZone + " zone in " + DrawerPanel +" panel");
              Log["PopLogFolder"]();
              return true;
           case "ROUTINE55":
              Log["Message"]("Tray is not present in drawer" + DrawerNumber+ " " +DrawerZone + " zone");
              Log["PopLogFolder"]();
              return true;
           }
      } 
      else if(iHiddenSlot=0) 
      {
        switch(TrayType)
          {
           case "ROUTINE15" :
           case "STAT" :
              Log["Error"]("Tray is present in drawer" + DrawerNumber+ " " +DrawerZone + " zone in " + DrawerPanel +" panel");
              Log["PopLogFolder"]();
              return false;
           case "ROUTINE55":
              Log["Error"]("Tray is present in drawer" + DrawerNumber+ " " +DrawerZone + " zone");
              Log["PopLogFolder"]();
              return false;
           }
      }   
    } // end of for loop
    
    Log["PopLogFolder"]();
    }// end of try
    
    catch(exp)
    {
      Log["Error"]("Exception",exp["description"]);
      Log["PopLogFolder"]();
      return false;
    } 
}

function WaitForSampleProperty(SampleId, PropertyName, ExpectedPropertyValue, intWaitTimeMS)
{
  try
  {
  
    Log["AppendFolder"]("Samples::WaitForSampleProperty");
    Log["Message"]("Checking the Sample ID: " + SampleId); 
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    var transPropertyName =GetTranslatedString(PropertyName,"")
    var transExpectedPropertyValue =ExpectedPropertyValue//GetTranslatedString(ExpectedPropertyValue,"")
    var RowNum = GetGridRowNo(objctrl, "zid", SampleId)
    
    var blnSampleCheck  =false;
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      if(blnSampleCheck == true)
        break;
    }
    if(blnSampleCheck == true)
    {
      var boolFlag = false;
      objctrl = GetControl("Samples_SampleList","grdSampleDetails");
      if(objctrl["Exists"])
      {
        var intStartTime = aqDateTime["Time"]();
        var intTimeElapsed = 0;
        while((intTimeElapsed < intWaitTimeMS) && boolFlag == false)
        {  
          PropertyValue = GetSampleProperty(objctrl, PropertyName);
          if(aqString["Compare"](transExpectedPropertyValue, PropertyValue, true) == 0)
          {
            Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample property value: "+ ExpectedPropertyValue +" matches with actual sample property value: " + PropertyValue);
            Log["PopLogFolder"]();
            return true;
          }
          intTimeElapsed = aqDateTime["Time"]() - intStartTime;
        }
        if(!boolFlag)
        {
          Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Expected sample property value: "+ transExpectedPropertyValue +" does not match with actual sample property value: " + PropertyValue);
  	      Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample attributes grid not found");
        Log["PopLogFolder"]();
        return false;
      } 
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " did not appear on the list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function WaitForSample(SampleId)
{
  try
  {
    Log["AppendFolder"]("Sample::WaitForSample");
    Log["Message"]("Checking the Sample list grid for SampleID: " +SampleId);
    var objctrl = GetControl("Samples_SampleList","grdSamples");
    blnSampleCheck = false;
    for(i=0; i<30;i++)
    {
      blnSampleCheck = CheckTextonGrid(objctrl, "zid", SampleId);
      if(blnSampleCheck == true)
      {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " came up on the Sample list grid");
        return true;
      }
      else
        aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid");
    }
    if(!blnSampleCheck)
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " did not come up on the Sample list grid");
      return false;    
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}
function ConfirmArchiveRackIsEmpty()
{
   try
  {
   Log["AppendFolder"]("Sample::ConfirmArchiveRackIsEmpty");
   var objctrl = GetControl("Samples_SampleHandler","winArchiveTrayEmptyWindow");
   
   WaitForControl(objctrl,10000);
   if(objctrl["Exists"])
   {
    Log["Picture"](Sys["Desktop"]["ActiveWindow"](), " Confirm archive rack empty window displayed");
     var objctrl = GetControl("Samples_SampleHandler","btnArchiveRackEmptyYes");
     ClickControl(objctrl);
     Log["PopLogFolder"]();
     return true;
   } 
   else
   {
     Log["Message"]("Unable to confirm archive rack is empty")
     Log["Picture"](Sys["Desktop"]["ActiveWindow"](), " Unable to confirm archive rack is empty");
     Log["PopLogFolder"]();
     return false;
   } 
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
   
} 

function ConfirmArchiveRackIsFull()
{
   try
  {
   Log["AppendFolder"]("Sample::ConfirmMakeArchiveRackIsFull");
   var objctrl = GetControl("Samples_SampleHandler","winArchiveTrayEmptyWindow");
   
   if(objctrl["Exists"])
   {
    Log["Picture"](Sys["Desktop"]["ActiveWindow"](), " Confirm archive rack empty window displayed");
     var objctrl = GetControl("Samples_SampleHandler","btnArchiveRackEmptyNo");
     ClickControl(objctrl);
     Log["Message"]("Confirmed archive rack is empty")
     Log["PopLogFolder"]();
     return true;
   } 
   else
   {
     Log["Message"]("Unable to confirm archive rack is full")
     Log["Picture"](Sys["Desktop"]["ActiveWindow"](), " Unable to confirm archive rack is full");
     Log["PopLogFolder"]();
     return false;
   } 
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
   
} 

//'***************************************************************************************************************************
//*  FunctionName : LoadSamplesThroughDL
//*  Description: LoadSamplesThroughDL
//*  Input: SID1,SID2,SID3,SID4,SID5,SID6
//*  Output: na
//*  Example: LoadSamplesThroughDL()
//*  Date of Creating: 30 Oct 2018
//*  Created By: Shahana
//'***************************************************************************************************************************
function LoadSamplesThroughDL(SID1,SID2,SID3,SID4,SID5,SID6)
{
try{
        Log["AppendFolder"]("Load Sample -Direct Load")
  
        //Enter Sample details for tube 1 barcode
        Log["Message"]("Entering tube 1 barcode");
        var objBarcode1=GetControl("Samples_SimulateLoadRack","txtBarcode1");
        SetText(objBarcode1, SID1);
        aqUtils["Delay"](1000)
  
        //Enter Sample details for tube 2 barcode
        Log["Message"]("Entering tube 2 barcode");
        var objBarcode1=GetControl("Samples_SimulateLoadRack","txtBarcode2");
        SetText(objBarcode1, SID2);
  
        //Enter Sample details for tube 3 barcode
        Log["Message"]("Entering tube 3 barcode");
        var objBarcode1=GetControl("Samples_SimulateLoadRack","txtBarcode3");
        SetText(objBarcode1, SID3);
  
        //Enter Sample details for tube 4 barcode
        Log["Message"]("Entering tube 4 barcode");
        var objBarcode1=GetControl("Samples_SimulateLoadRack","txtBarcode4");
        SetText(objBarcode1, SID4);
  
        //Enter Sample details for tube 5 barcode
        Log["Message"]("Entering tube 5 barcode");
        var objBarcode1=GetControl("Samples_SimulateLoadRack","txtBarcode5");
        SetText(objBarcode1, SID5);
  
        //Enter Sample details for tube 6 barcode
        Log["Message"]("Entering tube 6 barcode");
        var objBarcode1=GetControl("Samples_SimulateLoadRack","txtBarcode6");
        SetText(objBarcode1, SID6)
  
        //Click Load rack button
        Log["Message"]("Clicking Load Rack button");
        var objctrl=GetControl("Samples_SimulateLoadRack","btnLoadRack");
        objctrl.Click();
        
        Log["Message"]("Sample Tube loaded successfully");
        Log["PopLogFolder"]()
        return true;
   }
   catch(e)
   {
      Log["Error"]("Exception", e["Description"]);
      Log["PopLogFolder"]();
      return false;
    } 
} 

//****************************************************************************************************************************
//*  FunctionName : VerifySampleStatusHydra(SampleId, SampleStatus)
//*  Description: Fetches Sample ID details from Test data and sends to function fnVerifyTestResult
//*  Input: SampleId, SampleStatus
//*  Output: boolean
//*  Example: VerifySampleStatusHydra(SampleId, SampleStatus)
//*  Created By: Shahana
//'***************************************************************************************************************************
function VerifySampleStatusHydra(SampleId, SampleStatus)
{
  try
  { 
    Log["AppendFolder"]("Sample::VerifySampleStatus");
    Log["Message"]("Checking the Sample list grid for SampleID: " +SampleId);
        
    var objctrl = GetControl("Samples_SampleList","grdSamplesList");
    
    //Checks for SID availability  
    for(i=0; i<30;i++)
    {
      RowNo = CheckTextonGridReturnRowNo(objctrl, "zid", SampleId);
      aqUtils["Delay"](2000, "Waiting for SampleID: " + SampleId + " to show up on Sample list grid")
      
      if(RowNo != -1)
        break;
    }
    
    //Checks for Sample status for the corresponding SID
    if(RowNo != -1)
    {
      strSampleStatus = GetGridCellTextForHydra(objctrl, RowNo, "zsampleStatusDisplayLocalized");
      var count=0;
      while(strSampleStatus != SampleStatus && count<8)
      {
        RowNo = CheckTextonGridReturnRowNo(objctrl, "zid", SampleId);      
        strSampleStatus = GetGridCellTextForHydra(objctrl, RowNo, "zsampleStatusDisplayLocalized");
        aqUtils["Delay"](60000)
        count= count+1;
      } 
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample status for " + SampleId + " is displayed as: " + strSampleStatus);
      if( aqString["Trim"](strSampleStatus) == aqString["Trim"](SampleStatus))
      {
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), SampleId + " is not showing up on the Sample list after waiting for 60 seconds");
      Log["PopLogFolder"]();
      return false;
    }
    Log["PopLogFolder"]();
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
      return false;
  }
}
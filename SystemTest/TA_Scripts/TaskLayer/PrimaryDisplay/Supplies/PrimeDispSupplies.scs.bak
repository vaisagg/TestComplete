//USEUNIT TCNativeLibraries
//USEUNIT ControlAccessLibrary
//USEUNIT PrimeDispAuthentication

//---------------------------------------Supply Needs / Supply Alerts-------------------------------------------

//***************************************************************************************
//*   Function Name        : VerifyTheSupplyStatusInSupplyNeedsDatagrid()
//*   Function Description : This function is used to get the status of Supply name from Supply Alert datagrid
//*   Input                : supplyName,supplyStatus
//*   Output               : return true, if Actual and Expeted status of Supply name is same
//*                          return false, if Actual and Expeted status of Supply name is not same
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function VerifyTheSupplyStatusInSupplyNeedsDatagrid(supplyName,supplyStatus) 
{
  try
  {
    Log["AppendFolder"]("SupplyNeeds :: Verify the Supply Status in SupplyNeeds Grid");
    
    //Get supply alert datagrid
    var supplyNeedsAlertGridCtrl = GetAutomationIDControl("Supplies_SupplyNeeds", "dtgrdSupplyNeedsDataGrid");
    
    //Check the supply alert datagrid is displayed
    if(VerifyObjectExists(supplyNeedsAlertGridCtrl)) 
    {
      //Get the datagrid row items as list
      var rowDetails = GetSFGridRowDetails(supplyNeedsAlertGridCtrl);
    
      //check the daatgrid is having records displayed
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the supply needs alert datagrid");
        Log["PopLogFolder"]();
        return false;
      }
      
      //get the column index of the given reference column name from the datagrid column header list
      var supplyNameIndex = GetDataGridColumnIndexFromMetadataSheet("Supplies_SupplyNeeds","Supply")
      var supplyStatusIndex = GetDataGridColumnIndexFromMetadataSheet("Supplies_SupplyNeeds", "Status");
      
      var isSupplyNameExist=false;
      var isStatusDisplayed = false;

      //Iterate the data row list  
      for(var rowindex=0; rowindex<rowDetails.length; rowindex++) 
      {
        var rowParent = rowDetails[rowindex];
        
        //Get the Cell items of the datagrid as list items
        var dataCellList = GetAllChildren(rowParent,"ClassName","GridCell").reverse();
      
        //Get the supplyName & supply status control
        var supplyNameCellCtrl = Getchild(dataCellList[supplyNameIndex], "ClassName", "TextBlock");
        var supplyStatusCellCtrl = Getchild(dataCellList[supplyStatusIndex], "ClassName", "TextBlock");
      
        //Get the text for the supplyName & supply status
        var supplyNameRecordValue = supplyNameCellCtrl["Text"];
        var supplyStatusRecordValue = supplyStatusCellCtrl["Text"];
      
        //Check the Status text is matches to the expected supplyStatus
        if((supplyNameRecordValue == supplyName) & (aqString["Find"](supplyStatusRecordValue,supplyStatus,0, false) != -1) ) 
        {
          Log["Message"]("Supply Status Expected Value:"+supplyStatusRecordValue+"")
          Log["Message"]("Supply Status Actual Value:"+supplyStatus+"")
          isStatusDisplayed = true;
          break;
        }
      }
     
      //Check the supply name displayed in alert screen
      if (!isStatusDisplayed)
      {
        Log["Error"]("Supply Status is not Displayed as Expected")
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Expected supply status '" + supplyStatus + "' for the supply '" + supplyName + "' is displayed in the supply alert screen");
        Log["PopLogFolder"]();
        return true;       
      }     
    } else {
      Log["Error"]("Failed to Locate the SupplyNeeds Alert Grid")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : VerifyTheSupplyNameNotDisplayedInSupplyNeedsAlert()
//*   Function Description : This function is used to check the SupplyName not displaying in Supply Needs datagrid
//*   Input                : expectedSupplyName
//*   Output               : return true, if the Supply name is not displayed in Supply Needs datagrid
//*                          return false, if the Supply name is displayed in Supply Needs datagrid
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function VerifyTheSupplyNameNotDisplayedInSupplyNeedsAlert(expectedSupplyName)
{
  try
  {
    Log["AppendFolder"]("SupplyNeeds::Check the Supply '" + expectedSupplyName + "' is not displayed in the suply needs datagrid");
    
    var isSupplyListed = true;
    
    //Get supply alert datagrid
    var supplyNeedsAlertGridCtrl = GetAutomationIDControl("Supplies_SupplyNeeds", "dtgrdSupplyNeedsDataGrid");
    
    //Check the supply alert datagrid is displayed
    if(VerifyObjectExists(supplyNeedsAlertGridCtrl)) 
    {
      //Check the given supply name is listed in the alert datagrid
      if(VerifyTheRecordExistsInDatagrid(supplyNeedsAlertGridCtrl, "Supply", expectedSupplyName)) 
      {
        Log["Error"]("The supply '" + expectedSupplyName + "' record is displayed in the Supply Needs datagrid");
        isSupplyListed = false;
      } else {
        Log["Message"]("The supply '" + expectedSupplyName + "' record is not displayed in Supply Needs datagrid");        
      }
    } else {
      Log["Error"]("Unable to locate the supply needs alert datagrid ");
      isSupplyListed = false;
    }
    
    Log["PopLogFolder"]();
    return isSupplyListed;
  }
  catch (e)
  {
    Log["Error"]("Exception : "+e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : ClickOnReplaceButtonForSupplyFromSupplyNeeds()
//*   Function Description : This function is used to click on the 'Replace' button displayed for the supply name in Supply Needs datagrid
//*   Input                : supplyName
//*   Output               : return true, if the replace button is clicked on the respective Supply Name
//*                          return false, if the replace button is not able to click for the respective Supply Name
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function ClickOnManualEntryButtonForSupplyFromSupplyNeeds(supplyName)
{
  try
  {    
    Log["AppendFolder"]("SupplyNeeds :: Click on the Replace button to refill the supply '" + supplyName + "'");

    //Get supply alert datagrid
    var supplyNeedsAlertGridCtrl =GetAutomationIDControl("Supplies_SupplyNeeds", "dtgrdSupplyNeedsDataGrid");
    
    //Check the supply alert datagrid is displayed
    if(VerifyObjectExists(supplyNeedsAlertGridCtrl)) 
    {      
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(supplyNeedsAlertGridCtrl);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the supply needs datagrid");
        Log["PopLogFolder"]();
        return false;
      }
        
      //get the column index of the given reference column name from the datagrid column header list
      var supplyNameIndex = GetDataGridColumnIndexByColumnHeader(supplyNeedsAlertGridCtrl,"Supply");      
      var isSupplyNameExist = false;

      //Iterate the data row list  
      for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++) 
      {
        var rowParent = rowDetails[rowIndex];
        
        //Get the supply name details from rowparent
        var dataCellList = GetAllChildren(rowParent, "ClassName", "GridCell").reverse();
        var supplyNameCtrl = Getchild(dataCellList[supplyNameIndex], "ClassName", "TextBlock");
        var actualSupplyName = supplyNameCtrl["Text"];
        
        //Check the Status text is matches to the expected supplyStatus
        if(actualSupplyName == supplyName)
        {
          Log["Message"]("Supply '" + supplyName + "' is located in the supply needs grid");
            
          //get replace button 
          var manualEntryBtn = Getchild(rowParent, "AutomationId", "ReplaceButton");
            
          if(VerifyObjectEnabled(manualEntryBtn))
          {
            Log["Message"]("Replace button is located and enabled for the supply '" + supplyName + "'");
              
            //click on the replace button
            ClickCtrl(manualEntryBtn);
            
            Log["Message"]("Clicked on the manual entry button for the supply '" + supplyName + "'");
            isSupplyNameExist = true;
            break;
          }
        }
      }
      
      //Check the supply name found in the list
      if(isSupplyNameExist)
      {
        Log["Message"]("Supply '" + supplyName + "' is located and successfully clicked on the replace button to refill");
        Log["PopLogFolder"]();
        return true;        
      } else {
        Log["Error"]("Unable to locate and click on the replace button for the supply '" + supplyName + "'");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the supply needs datagrid");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : "+e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


//--------------------------------------------------------------------------------------------------------------



//----------------------------------------Supply Threshold Configuration Popup----------------------------------


//***************************************************************************************
//*   Function Name        : ClickOnThresholdIcon()
//*   Function Description : This function is used to Click on Threshold setting Icon in All Supplies Screen
//*   Input                : - 
//*   Output               : return true, if Clicked on Threshold setting Icon in All Supplies Screen
//*                          return false, if not Clicked on Threshold setting Icon in All Supplies Screen
//*   Created By           : Prabu Ramaraj
//*   Created Date         : -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function ClickOnThresholdIcon()
{
  try
  {
    Log["AppendFolder"]("View All Supplies :: Click on the Threshold Settings Icon");
    
    //Get the Threshold settings icon control
    var thresholdIconCtrl = GetAutomationIDControl("Supplies_ViewAllSupplies", "btnThresholdConfiguration");
 
    //Check the threshold icon is enabled
    if(VerifyObjectEnabled(thresholdIconCtrl))
    {
      Log["Message"]("Threshold settings icon is located and enabled in view all supplies screen");
      
      //Click on the threhsold icon
      ClickCtrl(thresholdIconCtrl);
      
      Log["Message"]("Clicked on the threshold settings icon in view all supplies screen")
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Unable to locate the threshold settings icon or the icon is not enabled in view all supplies screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : "+ e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : IsThresholdSettingsPopupDisplayed()
//*   Function Description : This function is used to check the Threshold Setting Popup is Displyed 
//*   Input                : -
//*   Output               : return true, if the Threshold Setting Popup is Displayed
//*                          return false, if the Threshold Setting Popup is not Displayed
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function IsThresholdSettingsPopupDisplayed()
{
  try
  {
    Log["AppendFolder"]("View All Supplies :: Check the Threshold Settings Popup Displayed");
    
    //get the threshold popup ctrl
    var thresholdPopupCtrl = GetAutomationIDControl("Supplies_ViewAllSupplies","popUpThresholdConfig")
     
    //check the popup is displayed
    if(VerifyObjectExists(thresholdPopupCtrl))
    {
      Log["Message"]("Threshold Settings Popup is located and displayed in the view all supplies screen");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Message"]("Unable to locate the threshold settings popup in view all supplies screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : "+ e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function CloseThresholdSettingsPopup()
{
  try
  {
    Log["AppendFolder"]("Supply Threshold Popup :: Close the supply threshold settings popup");
    
    //get the threshold popup ctrl
    var thresholdPopupCtrl = GetAutomationIDControl("Supplies_ViewAllSupplies","popUpThresholdConfig")
     
    //check the popup is displayed
    if(VerifyObjectExists(thresholdPopupCtrl))
    {
      //get the close icon from the threshold settings popup
      var closeIcon = Getchild(thresholdPopupCtrl,"AutomationId","CloseButton");
      
      //check the close icon is displayed and enabled
      if(VerifyObjectEnabled(closeIcon))
      {
        Log["Message"]("Close icon in the threshold setting popup located");
        
        ClickCtrl(closeIcon);
        
        Log["Message"]("Clicked  on the close icon to close the threshold settings popup");
        Log["PopLogFolder"]();
        return true;        
      } else {
        Log["Error"]("Unable to locate the close icon for the supplies threshold settings popup");
        Log["PopLogFolder"]();
        return false;
      }
    
    } else {
      Log["Error"]("unable to locate the supply threshold popup to close");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

//***************************************************************************************
//*   Function Name        : EnterThresholdValueInThresholdConfiguration()
//*   Function Description : This function is used to enter Threshold value for Supply Name
//*   Input                : supplyName,thresholdValue
//*   Output               : return true, if entered Supply Name's Threshold value
//*                          return false, if unable to enter Supply Name's Threshold value
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function EnterThresholdValueInThresholdConfiguration(supplyName,supplyThresholdValue)
{
  try
  {
    Log["AppendFolder"]("Supply Threshold Popup :: Enter the threshold value '" + supplyThresholdValue + "' for the supply '" + supplyName + "'");
    var isThresholdUpdated = false;
    switch (supplyName)
    {
      case "System Fluid Volume":
          //get the system fluid volume control
          var sfvControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbSystemFluidVolumeThreshold");
          isThresholdUpdated = UpdateThresholdConfigurationDropDown("System Fluid Volume",sfvControl,supplyThresholdValue);
          break;      
      case "IMT Fluid Volume":
          //get the imt fluid volume control
          var imtfvControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbIMTFluidVolumeThreshold");
          isThresholdUpdated = UpdateThresholdConfigurationDropDown("IMT Fluid Volume",imtfvControl,supplyThresholdValue);
          break;
      case "IMT Sensor":
          //get the IMT sensor count control
          var imtSensorControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtIMTSensorCountThreshold");
          isThresholdUpdated = SetThresholdConfigurationValue("IMT Sensor",imtSensorControl,supplyThresholdValue);
          break;
      case "Pretreatment":
      case "Pretreatment Volume":
          //get the pretreatment volume control      
          var pvControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbPretreatmentFluidVolumeThreshold");
          isThresholdUpdated = UpdateThresholdConfigurationDropDown("Pretreatment Volume",pvControl,supplyThresholdValue);
          break;
      case "Onboard Stability":
          //get the obs threshold control
          var obsControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtOnBoardStabilityThreshold");
          isThresholdUpdated = SetThresholdConfigurationValue("Onboard Stability",obsControl,supplyThresholdValue);
          break;
      case "Lot Expiration":
          //get lot expiration control
          var lotExpirationControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtLotExpirationThreshold");
          isThresholdUpdated = SetThresholdConfigurationValue("Lot Expiration",lotExpirationControl,supplyThresholdValue);
          break;
      case "Tips":
      case "Tips Remaining":
          //get tips remaining control
          var tipsControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtTipsRemainingThreshold");
          isThresholdUpdated = SetThresholdConfigurationValue("Tips Remaining",tipsControl,supplyThresholdValue);
          break;
      case "Waste Bin Level":
          //get the waste bin level control      
          var wblControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbWasteBinLevelThreshold");
          isThresholdUpdated = UpdateThresholdConfigurationDropDown("Waste Bin Level",wblControl,supplyThresholdValue);
          break;
      case "Sealer Foil Sheets Remaining":
          //get the sealer foil sheets remaining
          var sfsControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtSealerFoilSheetRemainingThreshold");
          isThresholdUpdated = SetThresholdConfigurationValue("Sealer Foil Sheet Remaining",sfsControl,supplyThresholdValue);
          break;
    }
    
    //check the supply threshold configuration updated
    if(isThresholdUpdated)
    {
      Log["Message"]("Threshold configuration for the supply '" + supplyName + "' has been updated successfully");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Failed to update the supply threhsold confoguration for the supply '" + supplyName + "'");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetThresholdValueDisplayedInThresholdCOnfiguration(supplyName)
{
  try
  {
    Log["AppendFolder"]("Supply Threshold Popup :: Get the existing threshold value configured for the supply '" + supplyName + "'");
    
    var thresholdValueDisplayed = "";
    
    switch (supplyName)
    {
      case "System Fluid Volume":
          //get the system fluid volume control
          var sfvControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbSystemFluidVolumeThreshold");
          thresholdValueDisplayed = sfvControl["Selection"].toArray()[0]["split"]("%")[0];
          break;
      case "IMT Fluid Volume":
          //get the imt fluid volume control
          var imtfvControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbIMTFluidVolumeThreshold");
          thresholdValueDisplayed = imtfvControl["Selection"].toArray()[0]["split"]("%")[0];
          break;
      case "IMT Sensor":
          //get the IMT sensor count control
          var imtSensorControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtIMTSensorCountThreshold");
          var imtSensorValue = Getchild(imtSensorControl,"AutomationId","NumberText");
          thresholdValueDisplayed = imtSensorValue["Text"];
          break;
      case "Pretreatment":
      case "Pretreatment Volume":
          //get the pretreatment volume control      
          var pvControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbPretreatmentFluidVolumeThreshold");
          thresholdValueDisplayed = pvControl["Selection"].toArray()[0]["split"]("%")[0];
          break;
      case "Onboard Stability":
          //get the obs threshold control
          var obsControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtOnBoardStabilityThreshold");
          var obsValue = Getchild(obsControl,"AutomationId","NumberText")
          thresholdValueDisplayed = obsValue["Text"];
          break;
      case "Lot Expiration":
          //get lot expiration control
          var lotExpirationControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtLotExpirationThreshold");
          var lotExpirationValue = Getchild(lotExpirationControl,"AutomationId","NumberText")
          thresholdValueDisplayed = lotExpirationValue["Text"];
          break;
      case "Tips":
      case "Tips Remaining":
          //get tips remaining control
          var tipsControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtTipsRemainingThreshold");
          var tipsValue = Getchild(tipsControl,"AutomationId","NumberText")
          thresholdValueDisplayed = tipsValue["Text"];
          break;
      case "Waste Bin Level":
          //get the waste bin level control      
          var wblControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "cbWasteBinLevelThreshold");
          thresholdValueDisplayed = wblControl["Selection"].toArray()[0]["split"]("%")[0];
          break;
      case "Sealer Foil Sheets Remaining":
          //get the sealer foil sheets remaining
          var sfsControl = GetAutomationIDControl("Supplies_ViewAllSupplies", "txtSealerFoilSheetRemainingThreshold");
          var sfsValue = Getchild(sfsControl,"AutomationId","NumberText")
          thresholdValueDisplayed = sfsValue["Text"];
          break;
      default:
          Log["Error"]("Please check the supply name threhsold to be configured");
          Log["PopLogFolder"]();
          return false;
    }
    
    Log["Message"]("Existing threshold value displayed as '" + thresholdValueDisplayed + "' for the supply '" + supplyName + "' in the Threshold Configuration Popup");
    Log["PopLogFolder"]();
    return thresholdValueDisplayed;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

//***************************************************************************************
//*   Function Name        : SaveSupplyAlertThresholdConfiguration()
//*   Function Description : This function is used to Click on Save button in Threshold Setting popup
//*   Input                : - 
//*   Output               : return true, if Clicked on Save Button in Threshold Setting popup
//*                          return false, if not Clicked on Save Button in Threshold Setting popup
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function SaveSupplyAlertThresholdConfiguration()
{
  try
  {
    Log["AppendFolder"]("View All Supplies :: Click on the save button in Threshold Settings / Configuration popup");
    
    //Get the save button control from the threshold settings popup
    var saveBtnCtrl = GetAutomationIDControl("Supplies_ViewAllSupplies","btnThresholdSave");
        
    //check the save button is enabled
    if(VerifyObjectEnabled(saveBtnCtrl))
    {
      Log["Message"]("Save button is located and enabled in threshold configuration popup");
      
      //Click on the save button in Threshold configuration popup
      ClickCtrl(saveBtnCtrl);
      Log["Message"]("Clicked on the save button in the threshold configuration popup");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Unable to locate the save button in the threshold configuration popup");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : "+ e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function UpdateThresholdConfigurationDropDown(supplyName,supplythresholdControl,supplyThresholdValue)
{
  try
  {
    Log["AppendFolder"]("Supply Threshold Popup :: Setting Up '" + supplyName + "' Threshold % as '" + supplyThresholdValue + "'");
    
    supplyThresholdValue = supplyThresholdValue + "%";
    
    //check the control is displayed and enabled
    if(VerifyObjectEnabled(supplythresholdControl))
    {
      Log["Message"]("Supply Threshold Field '" + supplyName  + "' is located and enabled");
      
      //Select the given threshold percentage from the fluids Combobox
      SelectComboBoxItem(supplythresholdControl, supplyThresholdValue);
      
      //Get the selected text value from system fluid volume
      var selectedValue = supplythresholdControl["Selection"].toArray()[0];
      
      //Check the selected threshold value is valid
      if(aqString["ToLower"](selectedValue) == aqString["ToLower"](supplyThresholdValue))
      {
        Log["Message"]("Given threshold value '" + supplyThresholdValue + "' has been selected successfully for '" + supplyName + "'");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Failed to select the given thresold value for '" + supplyName + "'");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the supply threshold field");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function SetThresholdConfigurationValue(supplyName,supplythresholdControl,supplyThresholdValue)
{
  try
  {
    Log["AppendFolder"]("Supply Threshold Popup :: Setting Up '" + supplyName + "' Threshold value as '" + supplyThresholdValue + "'");
    
    //check the control is displayed and enabled
    if(VerifyObjectEnabled(supplythresholdControl))
    {
      Log["Message"]("Supply Threshold Field '" + supplyName  + "' is located and enabled");
      
      //get the text field inside the threhsold container
      var thresholdTextCtrl = Getchild(supplythresholdControl, "AutomationId", "NumberText");

      //set the threshold value into the threhosld text box control
      SetValue(thresholdTextCtrl,supplyThresholdValue);
      
      //check the text is successfully updated
      if(thresholdTextCtrl["Text"] == supplyThresholdValue)
      {
        Log["Message"]("Given threshold value '" + supplyThresholdValue + "' has been selected successfully for '" + supplyName + "'");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Failed to select the given thresold value for '" + supplyName + "'");
        Log["PopLogFolder"]();
        return false;
      }       
    } else {
      Log["Error"]("Unable to locate the supply threshold field");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : UpdateSupplyThresholdValues()
//*   Function Description : This function is used to enter Threshold values for more than one Supply Names
//*   Input                : supplyNameArr,thresholdValueArr
//*   Output               : return true, if entered all the Supply Names threshold values
//*                          return false, if unable to enter all the Supply Names Threshold value
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function UpdateSupplyThresholdValues(supplyNameArr,thresholdValueArr)
{
  try
  {
    Log["AppendFolder"]("View All Supplies :: Update the Threshold value for the supply  with the threshold value");
    
    //Click on the threshold settings icon
    if(!ClickOnThresholdIcon())
    {
      Log["Error"]("Failed to click on the threshold icon in view all supplies screen");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Check the threshold settings popup is displayed
    if(!IsThresholdSettingsPopupDisplayed())
    {
      Log["Error"]("Failed to locate the Threshold Settings popup in view all supplies screen");
      Log["PopLogFolder"]();
      return false;
    }
    
      
    //--------------------------Update and configure the threshold value for the supply-------------------------
    var isAllThresholdUpdated = true;
    var isUpdateRequired = false;
    
    //Iterate the number of supply names and update the threshold
    for(var i=0; i<supplyNameArr.length; i++)
    {
      Log["AppendFolder"]("Configure threshold value for the supply '" + supplyNameArr[i] + "'");
      
      
      if(GetThresholdValueDisplayedInThresholdCOnfiguration(supplyNameArr[i]) != thresholdValueArr[i])
      {
        isUpdateRequired = true; 
      }
      
      //Update the threshold value based on the supply name
      if(!EnterThresholdValueInThresholdConfiguration(supplyNameArr[i],thresholdValueArr[i]))
      {
        isAllThresholdUpdated = false;
        Log["Error"]("Failed to update threshold value to '" + thresholdValueArr[i] + "' for the supply '" + supplyNameArr[i] + "'");
        Log["PopLogFolder"]();
      } else {
        Log["Message"]("Threshold value successfully updated to '" + thresholdValueArr[i] + "' for the supply '" + supplyNameArr[i] + "'");
        Log["PopLogFolder"]();
      }      
    }
      
    //check any threshold values are getting updated
    if(isUpdateRequired)
    {
      //Submit the threshold value updated
      if(!SaveSupplyAlertThresholdConfiguration())
      {
        Log["Error"]("Failed to save the threshold configuration");
        Log["PopLogFolder"]();
        return false;
      }
    }
        
    //Close the threshold configuration popup
    if(!CloseThresholdSettingsPopup())
    {
      Log["Error"]("Failed to close the supply threshold settings popup");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Check the thresholds are successfully configured
    if(isAllThresholdUpdated)
    {
      Log["Checkpoint"]("All the supply threshold values are successfully configured");
      Log["PopLogFolder"]();
      return true;      
    } else {
      Log["Error"]("Failed to configure for some of the supply threshold or all the threshold values");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch(e)
  {
    Log["Error"]("Exception :" + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : ActionOnTipTrayConfirmationAlert()
//*   Function Description : This function is used to perform action (Replaced/Removed/Cancel) on tip tral alert dialog
//*   Input                : trayName,action (trayName - Left/Right, action - Replaced/Removed/Cancel)
//*   Output               : return true, if the action button clicked
//*                          return false, if unable to click on action button
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function ActionOnTipTrayConfirmationAlert(trayName,action) // action : Replaced, Removed, Cancel
{
  try
  {
    var alertMessage = trayName + " was opened";
    
    Log["AppendFolder"]("Tip Tray Action : Perform '" + action + " in the tip tray alert dialog with the alert message '" + alertMessage + "'");

    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"](); 
      
    //get the alert dialog control
    var alertDialogCtrl = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Check the alert dialog is displayed
    if(VerifyObjectExists(alertDialogCtrl))
    {
      Log["Message"]("Alert Dialog is located");
      
      //get the list of text block displayed in the alert dialog
      var alertContentContainer = Getchild(alertDialogCtrl, "AutomationId", "AlertContentPresenter");      
      var alertContentCtrl = Getchild(alertContentContainer, "ClassName", "TextBlock");
      
      //Get the content of the alert dialog by the text block index
      var alertContent = alertContentCtrl["Text"];
            
      //Check the given alert message is having the content
      if(aqString["Find"](alertContent,alertMessage,0, false) != -1)
      {
        Log["Message"]("Alert dialog contains the text message given as '" + alertMessage + "'");
        
        //get the action button control ("Replaced, Removed, Cancel)
        var actionBtnCtrl = Getchild(alertDialogCtrl, ["ClassName","ObjectIdentifier"], ["Button", action]);
        
        //check the button is displayed and enabled
        if(VerifyObjectEnabled(actionBtnCtrl))
        {
          Log["Message"]("'" + action + "' button is located and enabled in confirmation alert");
          
          //Click on the action button / replace/ remove / cancel
          ClickCtrl(actionBtnCtrl);
          
          Log["Message"]("'" + action + "' button is clicked");
          Log["PopLogFolder"]();
          return true;
        } else {
          Log["Error"]("Unable to locate the action '" + action + "' button in alert dialog");
          Log["PopLogFolder"]();
          return false;
        }
      } else {
        Log["Error"]("The alert dialog displayed doesn't contain the text '" + alertMessage + "' as expected");
        Log["Error"]("Actual content displayed in the alert dialog is '" + alertContent + "'");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("Unable to locate the tip tray refill confirmation alert");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


//--------------------------------------------------------------------------------------------------------------



//----------------------------------------------View All Supplies-----------------------------------------------

//***************************************************************************************
//*   Function Name        : GetTipTrayStatusDisplayedInViewAllSupplies()
//*   Function Description : This function is used to get the trayname Status from Other supplies datagrid in All Supplies screen
//*   Input                : trayName ("Left Tray" / "Right Tray")
//*   Output               : return trayStatus
//*                          return false, if unable to get the tray status
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function GetTipTrayStatusDisplayedInViewAllSupplies(trayName)
{
  try
  {
    
    Log["AppendFolder"]("View All Supplies :: Check the status displayed for the Tips Tray in View all supply screen");
    
    //Get tips supply grid    
    var otherSupliesDataGrid = GetAutomationIDControl("Supplies_ViewAllSupplies","dtgrdOtherSupplies");
    
    //Check the tips supply grid is displayed
    if(VerifyObjectExists(otherSupliesDataGrid))
    {
      //Scroll to the other supplies datagrid
      Log["Enabled"]= false;
      otherSupliesDataGrid["ScrollIntoView"]();
      Log["Enabled"]=  true;
      

      //get the row details for the other supplies grid      
      var rowDetails = GetSFGridRowDetails(otherSupliesDataGrid);
      
      //check the row has displayed with records
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the other supplies datagrid");
        Log["PopLogFolder"]();
        return false;
      }
      
      //get column index for the tip tray
      if(trayName == "Left Tray")
      {
        trayName = "LeftTray";
      } else if(trayName == "Right Tray")
      {
        trayName = "RightTray"; 
      }

      //get the column index for the supplyname & tip tray status (Left / right)      
      var tipTrayColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Supplies_ViewAllSupplies_OtherSupplies",trayName);
      var supplyNameColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Supplies_ViewAllSupplies_OtherSupplies","SupplyName");
      var isTrayStatusIdentified = false;
      
      //iterate the rowDetails of the other supplies datagrid
      for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++) 
      {
        var rowParent = rowDetails[rowIndex];
        var dataCellList = GetAllChildren(rowParent, "ClassName", "GridCell").reverse();
        var dataCellCtrl = Getchild(dataCellList[supplyNameColumnIndex], "ClassName", "TextBlock");
       
        //check the tips is displayed in the other supplies datagrid 
        if(dataCellCtrl["Text"] == "Tips")
        {
          Log["Message"]("Tip tray row is located in other supplies grid ");
          
          //get the tip tray status control
          var tipTrayStatusControl = Getchild(dataCellList[tipTrayColumnIndex], ["ClassName","AutomationId"],["TextBlock","TrayStatusText"]);
          var tipTrayStatus = tipTrayStatusControl["Text"];
          
          Log["Message"]("Tip tray status displayed for the tray '" + trayName  + "' is '" + tipTrayStatus + "'");
          Log["PopLogFolder"]();
          return tipTrayStatus;
        }
      }
      
      //check if the tip tray is not identified / located
      if(!isTrayStatusIdentified)
      {
        Log["Error"]("Unable to locate the tip tray status for the tray '" + trayName + "'");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the other supplies datagrid");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : GetAllFluidsDetails()
//*   Function Description : This function is used to get the details of given Fluid names
//*   Input                : fluidNames
//*   Output               : return Fluid Details
//*                          return false, Unable to get the fluid details
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function GetAllFluidsDetails(fluidNames)
{
  try
  {   
    //Get fluids data for a list of fluids
    Log["AppendFolder"]("View All Supplies :: Get the row details of all the fluids");
  
    var isFluidDataRetrived = true;  
    var fluidDataArr = new Array();
    
    for(i=0;i<fluidNames.length;i++)
    {           
      //Get all fluid data
      Log["AppendFolder"]("Retriving all "+fluidNames[i]+ " fluid Data");
      
      //Get the supply details displayed based on the fluid name
      var fluidData = GetFluidDetailsFromSupplyNeeds(fluidNames[i])
      
      //Check the fluid data is retrieved
      if(fluidData == false)
      {
        isFluidDataRetrived = false;
        Log["Error"]("Failed to get all data from the fluid: "+fluidNames[i]);
        Log["PopLogFolder"]();     
      } else {
       fluidDataArr.push(fluidData);
       Log["Message"]("Retrived all "+fluidNames[i]+ " fluid Data")
       Log["PopLogFolder"]();
      }       
    } 
    
    //Check the fluid data's are successfully retrieved
    if(!isFluidDataRetrived)
    {
      Log["Error"]("Failed to get all fluid data");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["PopLogFolder"]();
    return fluidDataArr;
  }
  catch(e)
  {
    Log["Error"]("Exception :"+ e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : GetFluidDetailsFromSupplyNeeds()
//*   Function Description : This function is used to get the details of given Fluid name
//*   Input                : fluidName
//*   Output               : return Fluid Details
//*                          return false, Unable to get the fluid details
//*   Created By           : Suresh
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function GetFluidDetailsFromSupplyNeeds(fluidName)
{
  try
  {
    //Set the gridname and row name based on Fluid name
    switch(fluidName)
    {
      case "IMT Std B":
      case "IMT Standard A":
      case "IMT Diluent":
      case "A-LYTE Multisensor":
        return GetIMTFluidDetailsFromViewAllSupplies(fluidName);
      case "Pretreatment":
        return GetPreTreatmentDetailsFromViewAllSupplies();
        break;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);    
    return false;
  }
}

function GetIMTFluidDetailsFromViewAllSupplies(fluidName)
{
  try
  {
    Log["AppendFolder"]("View All Supplies :: Get the supply details for the IMT supply '" + fluidName + "'");
    
    //Get single fluid data
    var fluidInformation = new Array();    
    
    //get OtherSupplies datagrid
    var suppliesDataGridCtrl = GetAutomationIDControl("Supplies_ViewAllSupplies","dtgridHydraIMTFluid");
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(suppliesDataGridCtrl);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the supplies datagrid");
      Log["PopLogFolder"]();
      return false;
    }
        
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
    {
      var rowParent = rowDetails[rowIndex];
      var actualFluidName = GetAllChildren(rowParent, "AutomationId", "TextBlock").reverse();
      actualFluidName = actualFluidName[0]["Text"];
      
      if(aqString["Find"](actualFluidName,fluidName) != -1)
      {
        fluidInformation.push(Getchild(rowParent, "AutomationId", "txtCHSystemVolume")["Text"]);
        fluidInformation.push(Getchild(rowParent, "AutomationId", "txtSystemOnboardStability")["Text"]);
        fluidInformation.push(Getchild(rowParent, "AutomationId", "txtSystemLotExpiration")["Text"]);
        fluidInformation.push(Getchild(rowParent, "AutomationId", "LotIDTextBlock")["Text"]);
        break;
      }
    }
    
    //check the fluid informations are collected
    if(fluidInformation.length > 0)
    {
      Log["Message"]("Fluid information's for '" + fluidName + "' are retrived from view all supplies screen");
      Log["PopLogFolder"]();
      return fluidInformation;
    } else {
      Log["Error"]("Unable to retrive the fluid information for '" + fluidName  + "'");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

function GetPreTreatmentDetailsFromViewAllSupplies()
{
  try
  {
    Log["AppendFolder"]("View All Supplies :: Get the details for the Pretreatment");
    
    //get pretreatment datagrid
    var pretreatmentDatagridCtrl = GetAutomationIDControl("Supplies_ViewAllSupplies","dtgridHydraPretreatment");
    
    //Get single fluid data
    var fluidInformation = new Array();    
    
    //check the pretreatment grid is displayed
    if(VerifyObjectExists(pretreatmentDatagridCtrl))
    {
      
      //Get the pretreatment remaining count control
      var pretreatmentCountCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "txtCHSystemVolume");
      if(!VerifyObjectExists(pretreatmentCountCtrl))
      {
        pretreatmentCountCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "txtCHSystemVolumeDisable");
      }
      var pretreatmentCountValue = pretreatmentCountCtrl["Text"];
      Log["Message"]("Pretreatment Counts Remaining Value displayed in view all supplies screen '" + pretreatmentCountValue + "'");
      
      //Push the pretreatment count value
      fluidInformation.push(pretreatmentCountValue);
      

      //Get the pretreatment OBS value control
      var obsValueCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "txtSystemOnboardStability");
      if(!VerifyObjectExists(obsValueCtrl))
      {
        obsValueCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "txtSystemOnboardStabilityDisable");
      }
      var obsValue = obsValueCtrl["Text"]
      Log["Message"]("Pretreatment OBS value displayed in view all supplies screen '" + obsValue + "'");
      fluidInformation.push(obsValue);
          
    
      //Get the pretreatment lot expiration control
      var lotExpirationCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "txtSystemLotExpiration");
      if(!VerifyObjectExists(lotExpirationCtrl))
      {
        lotExpirationCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "txtSystemLotExpirationDisable");
      }
      var lotExpirationValue = lotExpirationCtrl["Text"];
      Log["Message"]("Pretreatment Lot Expiration value displayed in view all supplies screen '" + lotExpirationValue + "'");
      //Push the pretreatment lot expiration value
      fluidInformation.push(lotExpirationValue);
      
      
      //Get the pretreatment lot id control
      var lotIdCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "PretreatmentLotIDTextBlock");
      if(!VerifyObjectExists(lotIdCtrl))
      {
        lotIdCtrl = Getchild(pretreatmentDatagridCtrl, "AutomationId", "textBlockLotDisable");        
      }
      var lotIdValue = lotIdCtrl["Text"];
      Log["Message"]("Pretreatment Lot Id value displayed in view all supplies screen '" + lotIdValue + "'");
      //Push the pretreatment lot id value
      fluidInformation.push(lotIdValue);
      
      Log["PopLogFolder"]();
      return fluidInformation;
    } else {
      Log["Error"]("Unable to locate the pretreatment supply details from the view all supplies screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false; 
  }
}



//---------------------------------------------Replace Popup----------------------------------------------------

function VerifyReplacePopupDisplayed()
{
  try
  {
    Log["AppendFolder"]("SupplyNeeds :: Verify the replace popup is displayed to refill supplies");
    
    //Get the Replace popup control
    var replacePopupCtrl = GetAutomationIDControl("Supplies_ReplacePopup", "replacePopup");
    
    //verify popup exists
    if(VerifyObjectExists(replacePopupCtrl))
    {
      Log["Message"]("Replace Supply Popup is displayed");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Message"]("Replace Supply Popup is not displayed");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function EnterLotNumberInReplacePopup(lotNumber)
{
  try
  {
    Log["AppendFolder"]("ReplacePopup :: Entering lot number '" + lotNumber + "' in replace supply popup");
    
    //Get the Lotnumber control
    var lotNumberCtrl = GetAutomationIDControl("Supplies_ReplacePopup","txtReplaceLotNumber");
    
    //verify Lotnumber control exists
    if(VerifyObjectExists(lotNumberCtrl))
    {
      //enter lot number
      SetValue(lotNumberCtrl,lotNumber);
      Log["Message"]("Entered '"+lotNumber+"' as lot number")
      Log["PopLogFolder"]();
      return true;      
    } else {
      Log["Error"]("Unable to locate the lot number field in replace popup");
      Log["PopLogFolder"]();
      return false;
    }  
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function EnterSequenceNumberInReplacePopup(sequenceNumber)
{
  try
  {
    Log["AppendFolder"]("ReplacePopup :: Entering sequence number '" + sequenceNumber + "' in replace supply popup");
    
    //Get the sequence number control
    var seqNumberCtrl = GetAutomationIDControl("Supplies_ReplacePopup","txtReplaceSeqNumber");
    
    //check the sequence control exists
    if(VerifyObjectExists(seqNumberCtrl))
    {
      Log["Message"]("Sequence number textbox is located");
      
      //enter the sequence number
      SetValue(seqNumberCtrl,sequenceNumber);
      Log["Message"]("Entered '"+sequenceNumber+"' as sequence number")
      Log["PopLogFolder"]();
      return true;      
    } else {
      Log["Error"]("Unable to locate the sequence number field in replace popup");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectExpiryDateInReplacePopup(date,month,year)
{
  try
  {
    Log["AppendFolder"]("ReplacePopup :: Selecting the expiry date in replace supply popup");
    
    //Get the expiry date control
    var expriyDateCtrl = GetAutomationIDControl("Supplies_ReplacePopup","replacePopupExpiryDate");
  
    var exprydateTextCtrl = Getchild(expriyDateCtrl,"AutomationId","editText")
  
    if(VerifyObjectExists(exprydateTextCtrl))
    {
      Log["Message"]("Located the expiry date picker calendar control");
      var date = month + "/" + date + "/" + year;
      
      SetValue(exprydateTextCtrl,date);
      
      Log["Message"]("Entered the expiry date as " + date + "in manual entry popup");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Unable to locate the expiry date calendar picker control");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Commented sue to the calendar control month & year view to be enabled from dev side
    
//    var calenderDatePicker=Getchild(expriyDateCtrl,"AutomationId", "CustomDatePicker")
//    
//    //check the date picker is enabled
//    if(VerifyObjectEnabled(calenderDatePicker))
//    {
//      //click on the start date picker control
//      ClickCtrl(calenderDatePicker)
//      
//      Log["Message"]("Clicked on the Expiry Date calendar");
//      
//      //Getting parent control
//      var parentCtrl = Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75");        
//      parentCtrl["Refresh"]();
//    
//      //select the date
//      if(!SelectDateFromCalendarViewControl(date,month,year))
//      {
//        Log["Error"]("Unable to select the given date from the calendar control");
//        Log["PopLogFolder"]();
//        return false;
//      }
//    
//      Log["PopLogFolder"]();
//      return true;
//    } else {
//      Log["Error"]("Unable to locate the calendar picker control");
//      Log["PopLogFolder"]();
//      return false;
//    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SaveRefillDetailsInReplacePopup()
{
  try
  {
    Log["AppendFolder"]("ReplacePopup :: Click on Save button to refill supply information");
    
    //Get the replace popup control
    var replacePopupCtrl = GetAutomationIDControl("Supplies_ReplacePopup", "replacePopup");
    
    //Get the Save button control
    var saveButtonCtrl = Getchild(replacePopupCtrl, "AutomationId", "SaveButton");
    
    //Check save button exists
    if(!VerifyObjectEnabled(saveButtonCtrl))
    {
      Log["Error"]("Failed to locate / the save button is not enabled");
      Log["PopLogFolder"]();
      return false;
    } else {
      Log["Message"]("Save button for the replace supply popup is enabled");
      
      //click on the save button
      ClickCtrl(saveButtonCtrl);
      
      Log["Message"]("Clicked on the save button in replace supply popup");
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SubmitSupplyDetailsToRefillSupply(lotNumber,sequenceNumber,date,month,year)
{
  try
  {
    Log["AppendFolder"]("Enter the refill information for the supplies to refill");
    
    //Entering lot number in replace popup
    if(!EnterLotNumberInReplacePopup(lotNumber))
    {
      Log["Error"]("Failed to enter the lot number in replace popup");
      Log["PopLogFolder"]();
      return false;    
    }
        
    //Entering seq number in replace popup
    if(!EnterSequenceNumberInReplacePopup(sequenceNumber))
    {
      Log["Error"]("Failed to enter the sequence number in replace popup");
      Log["PopLogFolder"]();
      return false;      
    }
    
    //Selecting the expiry date
    if(!SelectExpiryDateInReplacePopup(date, month, year))
    {
      Log["Error"]("Failed to select the expiry date in calendar date picker");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click on save button to save the refill supply information
    if(!SaveRefillDetailsInReplacePopup())
    {
      Log["Error"]("Failed to save the refill supply information");
      Log["PopLogFolder"]();
      return false;
    }
  
    Log["PopLogFolder"]();
    return true;      
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function RefillSuppliesFromSupplyNeeds(suppliesList,lotNumberArr,sequenceNumberArr,expiryDateArr,expiryMonthArr,expiryYearArr)
{
  try
  {
    //Iterate the supplies to refill
    for(var i=0; i< suppliesList.length; i++)
    {
      Log["AppendFolder"]("Replace the supply '" + suppliesList[i] + "'")
      
      //Click on the replace button for the supply
      if(!ClickOnManualEntryButtonForSupplyFromSupplyNeeds(suppliesList[i]))
      {
        Log["Error"]("Failed to click on the replace button for the supply name '" + suppliesList[i] + "'");
        Log["PopLogFolder"]();
        return false;
      }
      
      //check the replace popup is displayed
      if(!VerifyReplacePopupDisplayed())
      {
        Log["Error"]("Failed to locate the replace supply popup");
        Log["PopLogFolder"]();
        return false;        
      }
      
      //Enter the details to refill
      if(!SubmitSupplyDetailsToRefillSupply(lotNumberArr[i],sequenceNumberArr[i],expiryDateArr[i],expiryMonthArr[i],expiryYearArr[i]))
      {
        Log["Error"]("Failed to submit the supply details to refill supply '" + suppliesList[i] + "'");
        Log["PopLogFolder"]();
        return false;
      }
      
      //Get the Replace error alert control
      var replaceErrorAlertCtrl = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
      //verify error alert not displayed
      if(VerifyObjectExists(replaceErrorAlertCtrl))
      {
        Log["Error"]("Replace Supply Error alert is displayed.Enter valid Lot number and sequence number");
        var okbtn=Getchild(replaceErrorAlertCtrl,"AutomationId","PrimaryButton")
        if(VerifyObjectExists(okbtn))
        {
          ClickItem(okbtn);
        }
        Log["PopLogFolder"]();
        return false;
      }
      
      //wait for the popup to get closed
      aqUtils["Delay"](5000, "Wait for the supplies refill information to reflect");
      
      if(VerifyReplacePopupDisplayed())
      {
        Log["Error"]("Replace popup is not getting closed after click on the save button in repalce supply popup");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Replace popup is closed and the supply details are updated");
        Log["PopLogFolder"]();
      }
    }
    return true;  
  }
  catch (e)
  {
    Log["Error"]("Exception : "+e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//--------------------------------------------------------------------------------------------------------------
//USEUNIT TCNativeLibraries
//USEUNIT ControlAccessLibrary
//USEUNIT PrimeDispAuthentication

//------------------------------IMT Calibration ------------------------------------------

function PerformIMTCalibration()
{
  try
  {
    Log["AppendFolder"]("IMT Calibration :: Perform IMT Calibration")
    
    //Verify IMTCalibration details are propulted
    if(!VerifyIMTCalibrationDetailsLoaded())
    {
      Log["Error"]("IMTCalibration details not displayed");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Locate the CalibrateIMT button
    var btnIMTCalibration = GetAutomationIDControl("CalibrationOverview_IMTCalibration","btnCalibrateIMT")
    if(VerifyObjectEnabled(btnIMTCalibration))
    {
      Log["Message"]("Calibrate IMT button located");
      
      //Click CalibrateIMT
      ClickCtrl(btnIMTCalibration);
      Log["Message"]("Calibrate IMT button Clicked");
      Log["PopLogFolder"]();
      
      return true;
    } 
    else 
    {
      Log["Error"]("Failed to Locate CalibrateIMT button");
      Log["PopLogFolder"]();
      return false;
    }
  }
   catch(e)
  {
    Log["Error"]("Exception:"+ e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetIMTCalibrationStatus()
{
  try
  {
    Log["AppendFolder"]("IMT Calibration :: Get IMT Calibration Status Displayed");
    
    //Get the IMT Calibration Status Control
    var statusCtrl=GetAutomationIDControl("CalibrationOverview_IMTCalibration","lblCalibrationStatus");
    if(VerifyObjectExists(statusCtrl))
    {
      var status = statusCtrl["Text"]
      Log["Message"]("Current status displayed in IMT Calibration Screen '" + status + "'");
      Log["PopLogFolder"]();
      return status;
    } 
    else 
    {
      Log["Error"]("Failed to Locate IMTCalibration Status")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception:"+ e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyIMTCalibrationDetailsLoaded()
{
  try
  {
    Log["AppendFolder"]("Verify IMT Calibration details are displayed")
    
    //Get the IMT Calibration Datagrid
    var grdIMTCalibration=GetAutomationIDControl("CalibrationOverview_IMTCalibration","grdIMTCalibration");
    grdIMTCalibration=Getchild(grdIMTCalibration,"AutomationId","dataGridControl")
    
    //Verify the IMTCalibration grid exists
    if(VerifyObjectExists(grdIMTCalibration))
    {
      //Verify the IMT Calibration details are populated
      if(grdIMTCalibration["RowCount"]>0)
      {
        Log["Message"]("IMT Calibrtation details Populated")
        Log["PopLogFolder"]();
        return true;
      } 
      else 
      {
        Log["Error"]("IMT Calibrtation details not Populated")
        Log["PopLogFolder"]();
        return false;
      }
    } 
    else 
    {
      Log["Error"]("Failed to Locate IMT Calibrtation grid")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception:"+ e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyIMTCalibrationStatusIsCompleted()
{
  try
  {    
    //Wait till IMT Calibration Status is changed to Completed
    for(i=0;i<40;i++)
    {
      //Get the IMT Calibration Status
      IMTCalibrationStatus = GetIMTCalibrationStatus();
      if(IMTCalibrationStatus==false)
      {
        Log["Error"]("Failed to Locate the Calibration Status")
        return false ;
      }
      else if(IMTCalibrationStatus=="IMT Calibration Finished" || IMTCalibrationStatus=="IMT Calibration Completed")
      {
        Log["Message"]("Status is 'IMT Calibration Finished'")
        return true;
      }
      else if(i==20)
      {
        Log["Error"]("Status is not Changed to 'IMT Calibration Finished'")
        return false;
      }
      aqUtils["Delay"](10000,"Waiting for IMT Calibration to Finish")
    }
  }
  catch(e)
  {
    Log["Error"]("Exception:"+ e["Description"]);
    Log["PopLogFolder"]();
    return false;
  } 
}



//------------------------------Calibration Definition------------------------------------

function VerifyTheCalibratorDefinitionExist(materialName,materialId,lotNo)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Verify The Calibrator Definiton Exists");
    
    //Get the cal -def grid 
    var calDefDataGrid = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "dtgrdCalibrationDefinitions");
    
    //Check the Cal Definitions datagrid is dispalyed
    if(!VerifyObjectExistance(calDefDataGrid))
    {
      Log["Error"]("Unable to locate Cal Definitions grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(calDefDataGrid);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    var isDataExist = false;
    var materialNameColumnIndex =  GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions","MaterialName");
    var materialIdColumnIndex =  GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions","MaterialId");
    var lotIdColumnIndex =  GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions","LotId");
    
    //Iterate the rows  to get the row of the given sample id
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
    {
      var rowparent = rowDetails[rowIndex];    
      var datagridcells = GetAllChildren(rowParent, "ClassName", "GridCell");
      
      //Get the material name
      var materialNameCell = Getchild(datagridcells[materialNameColumnIndex], "ClassName", "TextBlock"); 
      var materialNameCellValue = materialNameCell["Text"];
      
      //get the material id
      var materialIDCell = Getchild(datagridcells[materialIdColumnIndex], "ClassName", "TextBlock"); 
      var materialIDCellValue = materialIDCell["Text"];
        
      //get the lot it
      var lotIDCell = Getchild(datagridcells[lotIdColumnIndex], "ClassName", "TextBlock"); 
      var lotIDCellValue = lotIDCell["Text"];
      
      //If Material Name Exists => Then Check the Material ID
      if(materialNameCellValue == materialName && aqString["Trim"](materialIDCellValue) == materialId && lotIDCellValue == lotNo)
      {
        isDataExist = true;
        Log["Message"]("Material Name : " + materialName + " with material id '" + materialId + "' is located successfully");
        
        //Get CheckBox for sample
        var checkBoxObjCtrl  = Getchild(rowParent, "ClassName" , "CheckBox");
        
        //Verify the Checkbox status
        if(checkBoxObjCtrl.ToggleState == 0)
        {
          //Click On Checkbox
          ClickCtrl(checkBoxObjCtrl);
              
          if(checkBoxObjCtrl.ToggleState == 1)
          {
            Log["Message"]("Material Name '" + materialName + "'Selected Successfully");
            break;
          } else{
            Log["Error"]("Unable to select material Name '" + materialName + "'");
            Log["PopLogFolder"]();
            return false;
          }
        } else if(checkBoxObjCtrl.ToggleState == 1) {
          Log["Message"]("Material Name '" + materialName + "' is already selected");
          break;
        } else{
          Log["Error"]("Unable to select material Name '" + materialName + "'");
          Log["PopLogFolder"]();
          return false;
        }
      }
    }
    Log["PopLogFolder"]();
    return isDataExist;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ClickOnDeleteButton()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Click on Delete Button");
    
    //Get Delete button control
    var deleteButtonCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","btnCalDefinitionsDelete")
    
    //Check Delete button control
    if(VerifyObjectEnabled(deleteButtonCtrl))
    {
      Log["Message"]("Delete button is located and enabled in calibration definition screen");
      
      //Click on Delete button 
      ClickCtrl(deleteButtonCtrl);
      
      Log["Message"]("Clicked on the delete button in the calibration definition screen");
      Log["PopLogFolder"]();
      return true;      
    } else{
      Log["Error"]("Unable to locate 'Delete' button in calibration definition screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ClickOnEditButton()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Click on Edit Button");
    
    //Get AddNew button control
    var editButtonCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","btnEditCalDefinitions")
    
    //Check the edit button is enabled
    if(VerifyObjectEnabled(editButtonCtrl))
    {
      Log["Message"]("Edit button is located and enabled in calibration definition screen");
      
      //Click on Edit button 
      ClickCtrl(editButtonCtrl);
      
      Log["Message"]("Clicked on the edit button in the calibration definition screen");
      Log["PopLogFolder"]();
      return true;      
    } else{
        Log["Error"]("Unable to locate 'Edit' button in calibration definition screen");
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ClickOnAddNewButton()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Click on Add New Button");
    
    //Get AddNew button control
    var addNewButton = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","btnAddNewCalDefinitions")
    
    //Check the AddNew Button control
    if(VerifyObjectExists(addNewButton))
    {
      Log["Message"]("Add new button is located in the calibration definition");
      
      //Click on AddNew button
      ClickCtrl(addNewButton);
      
      Log["Message"]("Clicked on the add new button");
      Log["PopLogFolder"]();
      return true;
    } else {
        Log["Error"]("Unable to locate Add New Button");
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function AcceptDeleteCalibrationDefinitionConfirmationPopup()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Accept the Delete Calibration Definition Confirmation Popup");
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"](); 
 
    //Get the popup displayed
    var alertPopup = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Check the alert popup is displayed    
    if(VerifyObjectExists(alertPopup))
    {
      //Get the Ok button & title of the confirmation popup
      var yesBtn = Getchild(alertPopup, ["AutomationId", "ObjectIdentifier"], ["PrimaryButton", "Yes"]);
      var title = Getchild(alertPopup, "AutomationId", "AlertTitleTextBlock");
      
      //check the title of the alert message as confirmation alert      
      if(title["Text"] == "Confirmation")
      {
        Log["Message"]("Delete Calibration Definition Confirmation Popup is displayed");
        
        //Check the yes btn on the cofirmation popup is enabled
        if(VerifyObjectEnabled(yesBtn))
        {
               
          //Click on the yes button to accept in the confirmation popup
          ClickCtrl(yesBtn);
      
          Log["Message"]("Clicked on the 'Yes' button in the delete calibration definition confirmation popup");
          Log["PopLogFolder"]();
          return true;                  
        } else {
          Log["Error"]("Yes' button in the delete calibration definition confirmation popup is not enabled");
          Log["PopLogFolder"]();
          return false;
        }        
      } else {
        Log["Error"]("Unable to locate the delete calibration definition confirmation popup, Instead some other popup is displayed in the screen");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("There is no alert popup displayed in the screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//----------------------------------------------------------------------------------------

//----------------Control Action Methods - Add / view Calibration Screen------------------

//Added by Prabu Ramaraj
function CheckCalibrationDefinitionPopupDisplayed()
{
  try
  {
    
    Log["AppendFolder"]("Cal-def :: Checking the calibration definition popup displayed");
    
    //Get the Assay Grid in Add New Cal Definitions Pop up
    var testSearchGrid = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "pageAddCalibrationDefinitionPopup");
    
    //Check the Grid displayed
    if(VerifyObjectExists(testSearchGrid))
    {
      Log["Message"]("Add Calibration Definition Popup Displayed");
      Log["PopLogFolder"]();
      return true;
    } else{
      Log["Error"]("Unable to locate the Add Calibration Definition Popup");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : SelectAssayType()
//*   Function Description: This function is used to select the given assay name from the list of assays displayed
//*   Input               : assayType
//*   Output              : NA
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function SelectAssayType(assayType) 
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Select Assay Type '" + assayType + "'");
    
    //Get Assay Type control
    var assayTypeCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","comboBoxAssayType");
    
    //Check Assay Type control
    if(VerifyObjectExists(assayTypeCtrl)) 
    {    
      //Select the given assay type from the AssayType Combobox
      SelectComboBoxItem(assayTypeCtrl, assayType);
      
      //Get the selected text value from specimen type combobox
      var selectedValue = assayTypeCtrl["Selection"].toArray()[0];
      
      //Check the selected specimen is valid
      if(aqString["ToLower"](selectedValue) == aqString["ToLower"](assayType))
      {
        Log["Message"]("Given assay type '" + assayType + "' has been selected successfully in combo box");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Unable to select the given assay type in combo box");
        Log["PopLogFolder"]();
        return false;
      }
    } else{
        Log["Error"]("Unable to locate the Assay Type field");
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : EnterMaterialName()
//*   Function Description: This function is used to enter the material name  for the calibration Definitions
//*   Input               : materialName
//*   Output              : true / false
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function EnterMaterialName(materialName)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Enter Material Name '" + materialName + "'");
    
    //Get Material Name text box control
    var materialNameCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "txbMaterialName");
    
    //Check the Material Name text  box displayed
    if(VerifyObjectExistance(materialNameCtrl)) 
    {
      
      //Click on material name text box
      ClickControl(materialNameCtrl);
    
      //Enter the material name
      SetValue(materialNameCtrl, materialName);
      aqUtils["Delay"](1000);
      
      //Tab Out to update the other field data
      SendKeys(materialNameCtrl, "[Tab]");
      aqUtils["Delay"](1000);
      
      //Verify the materialName is entered properly
      if(materialNameCtrl["Text"] == materialName)
      {
        Log["Message"]("Material Name '" + materialName + "' successfully entered");
        Log["PopLogFolder"]();   
        return true;
      } else {
        Log["Error"]("Unable to enter the given material name value, displayed after entering the sample id is '" + materialNameCtrl["Text"] + "'");
        Log["PopLogFolder"]();   
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the Material name field");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}

//***************************************************************************************
//*   Function Name       : EnterMaterialId()
//*   Function Description: This function is used to enter the material id  for the calibration Definitions
//*   Input               : materialId
//*   Output              : true / false
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function EnterMaterialId(materialId)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Enter Material Id '" + materialId + "'");
    
    //Get Material Name text box control
    var materialIdCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "txbMaterialID");
    
    //Check the Material ID text  box displayed
    if(VerifyObjectExistance(materialIdCtrl)) 
    {
      //Click on inside the Material ID textbox
      ClickCtrl(materialIdCtrl);
      
       //Enter the Material ID
       SendKeys(materialIdCtrl,materialId);
       aqUtils["Delay"](1000);
       
       //Tab Out to update the other field data
       SendKeys(materialIdCtrl, "[Tab]");
       aqUtils["Delay"](1000);
       
       //Verify the Material ID is entered properly
       if(materialIdCtrl["Text"] == materialId)
       {
          Log["Message"]("Material Name '" + materialId + "' successfully entered in the materialName field");
          Log["PopLogFolder"]();   
          return true;
       } else {
         Log["Error"]("Unable to enter the given Material ID value displayed after entering the Material ID is '" + materialIdCtrl["Text"] + "'");
         Log["PopLogFolder"]();   
         return false;
       }
    } else {
      Log["Error"]("Unable to locate the Material ID text field ");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}

//***************************************************************************************
//*   Function Name       : EnterMaterialId()
//*   Function Description: This function is used to enter the material id  for the calibration Definitions
//*   Input               : materialId
//*   Output              : true / false
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function EnterLotId(lotNo)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Enter Lot Id '" + lotNo + "'");
    
    //Get Lot NO text box control
    var lotIdCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "txbLotID");
    
    //Check the Lot No text  box displayed
    if(VerifyObjectExistance(lotIdCtrl)) 
    {
      //Click on inside the Lot No textbox
      ClickCtrl(lotIdCtrl);
      aqUtils["Delay"](1000);
      
       //Enter the Lot No
       SetValue(lotIdCtrl,lotNo);
       aqUtils["Delay"](1000);
       
       //Tab Out to update the other field data
       SendKeys(lotIdCtrl, "[Tab]");
       aqUtils["Delay"](1000);
       
       //Verify the Lot No is entered properly
       if(lotIdCtrl["Text"] == lotNo)
       {
          Log["Message"]("Lot No'" + lotNo + "' successfully entered in the material Name field");
          Log["PopLogFolder"]();   
          return true;
       } else {
         Log["Error"]("Unable to enter the given Lot No, value displayed after entering the Lot No is '" + lotIdCtrl["Text"] + "'");
         Log["PopLogFolder"]();   
         return false;
       }
    } else {
      Log["Error"]("Unable to locate the Lot No text field");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}

//***************************************************************************************
//*   Function Name       : selectDate()
//*   Function Description: This function is used to select date
//*   Input               : date,month,year
//*   Output              : NA
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function SelectExpirationDate(date,month,year)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Enter Expiry date");
    
    //Select The ExpiryDate
    var expriyDateCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "CalDefinitionExpiryDate");
  
    //check the expiry date control is displayed 
    if(VerifyObjectExists(expiryDateCtrl))
    {
      //click on the expiry date control
      ClickCtrl(expriyDateCtrl);
      
      Log["Message"]("Clicked on the Expiry Date calendar");
      
      //Getting parent control
      var parentCtrl = Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75");        
      parentCtrl["Refresh"]();
    
      //select the date
      if(!SelectDateFromCalendarViewControl(date,month,year))
      {
        Log["Error"]("Unable to select the given date from the calendar control");
        Log["PopLogFolder"]();
        return false;
      }
      
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Unable to locate / the date picker control is not enabled");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : IsActive()
//*   Function Description: This function is used to select/Unselect isActive
//*   Input               : isActive State
//*   Output              : true / false
//*   Date of Creating    : 08 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function SelectIsActive(isActive)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Set isActive Value");
    
    //Get the isActive control
    var isActiveCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "checkBoxActive");
   
    //check the isActive control
    if(VerifyObjectExists(isActiveCtrl))
    {      
      //Check the expected input value
      if(isActive)
      {
        //Verify the isActive status
        if(GetToggleState(isActiveCtrl) == 1)
        {
          Log["Message"]("IsActive Check box is Alrady selected");
          Log["PopLogFolder"]();
          return true;          
        } else {
          
          //Select isActive checkbox
          ClickCtrl(isActiveCtrl);
        
          //Verify the isActive status
          if(GetToggleState(isActiveCtrl) == 1)
          {
            Log["Message"]("IsActive Check box is selected");
            Log["PopLogFolder"]();
            return true;
            
          } else {
            Log["Error"]("Unable to select IsActive Check box");
            Log["PopLogFolder"]();
            return false;
          }
        }
      } else {
        
        //Verify the isActive status
        if(GetToggleState(isActiveCtrl) == 1)
        {
          //Unselect the isActive
          ClickCtrl(isActiveCtrl)
        
          //Verify the isActive status
          if(GetToggleState(isActiveCtrl) == 0)
          {
            Log["Message"]("IsActive Check box is Unselected");
            Log["PopLogFolder"]();
            return true;            
          } else {
            Log["Error"]("Unable to Unselect IsActive Check box");
            Log["PopLogFolder"]();
            return false;
          }
        } else {
           Log["Message"]("IsActive Check box already Unselected");
           Log["PopLogFolder"]();
           return true;
        }
      }
    } else{
      Log["Error"]("Unable to locate isActive Check box");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : EnterCheckSum()
//*   Function Description: This function is used to enter the material name  for the calibration Definitions
//*   Input               : checckSumValue
//*   Output              : true / false
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function EnterCheckSum(checkSumValue)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Enter CheckSum '" + checkSumValue + "'");
    
    //Get Checksum text box control
    var checkSumCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "txbCheckSum");
    
    //Check the Checksum text  box displayed
    if(VerifyObjectExistance(checkSumCtrl)) 
    {
      //Click on inside the Checksum textbox
      ClickCtrl(checkSumCtrl);
      checkSumCtrl["Keys"]("^a[Del]");
      
       //Enter the Checksum
       SendKeys(checkSumCtrl,checkSumValue);
       aqUtils["Delay"](1000);
       
       //Tab Out to update the other field data
       SendKeys(checkSumCtrl, "[Tab]");
       aqUtils["Delay"](1000);
       
       //Verify the Checksum is entered properly
       if(checkSumCtrl["Text"] == checkSumValue)
       {
          Log["Message"]("Checksum '" + checkSumValue + "' successfully entered in the Checksum field");
          Log["PopLogFolder"]();   
          return true;
       } else {
         Log["Error"]("Unable to enter the given Checksum, value displayed after entering the Checksum is '" + checkSumCtrl["Text"] + "'");
         Log["PopLogFolder"]();   
         return false;
       }
    } else {
      Log["Error"]("Unable to locate the Checksum text field in batch order screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}

//***************************************************************************************
//*   Function Name       : AcceptInValidChecksumErrorPopup()
//*   Function Description: Handle the Accept confirmation dialog
//*   Input               : 
//*   Output              : return true, if controls are exist and action performed
//*                         return false, if controls are not exist and action not performed
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function AcceptInValidChecksumErrorPopup()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Accept Invalid Checksum Error Popup");
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"](); 
 
    //Get the popup displayed 
    var alertPopup = GetAutomationIDControl("SystemHealthCheck", "alertDialog");

    //Check the alert popup is displayed    
    if(VerifyObjectExists(alertPopup))
    {
      //Get the Ok button control from the confirmation popup
      var okBtn = Getchild(alertPopup, "AutomationId", "PrimaryButton");
      var title = Getchild(alertPopup, "AutomationId", "AlertTitleTextBlock");
      var message = Getchild(alertPopup, "ObjectIdentifier", "Error_invalid_checksum");
      
      //check the alert title and message contains
      if(title["Text"] == "Information" && message["Text"] == "Error - invalid checksum")
      {
        Log["Message"]("Error Checksum popup is located");
        
        //check the ok btn enabled
        if(VerifyObjectEnabled(okBtn))
        {
                
          //Click on the ok button in the  Confirmation popup      
          ClickCtrl(okBtn);
      
          Log["Message"]("Clicked on the 'OK' button in the error checksum message");      
          Log["PopLogFolder"]();
          return true;                  
        } else {
          Log["Error"]("Ok button in the error checksum popup is not enabled");
          Log["PopLogFolder"]();
          return false;
        }        
      } else {
        Log["Error"]("Unable to locate the error checksum popup, Instead some other popup is displayed in the screen");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("There is no alert popup displayed in the screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : GetCheckSumForCalibrationDefinition()
//*   Function Description: This function is used to get the CheckSum value
//*   Input               : 
//*   Output              : true / false
//*   Date of Creating    : 08 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function GetCheckSumForCalibrationDefinition(oldCheckSumValue)
{
  try
  {
    Log["AppendFolder"]("Get Checksum value from the UDD.Datalayer log file");
        
    //---------------------------------launching Log Viewer ------------------------------
    Log["AppendFolder"]("Launching Log Viewer");
    var logViewerPath = "C:\\Siemens\\Bin";
    var obj=Sys["OleObject"]("Shell.Application");
    obj.ShellExecute("LogFileViewer.exe","", logViewerPath,"runas",1);  
    Log["PopLogFolder"]();
    //------------------------------------------------------------------------------------
    
    //Get the path from the log viewer
    var logViewerWnd = Sys["Process"]("LogFileViewer");
    
    //Check the log viewer is launched
    if(VerifyObjectExists(logViewerWnd))
    {
      Log["Message"]("Log Viewer located");
      
      //get the file directory control
      var fileLocationCtrl = Getchild(logViewerWnd, ["WinFormsControlName"], ["m_textBoxLogDirectory"]);
      
      //get the log directory text
      var filelocationTxt = fileLocationCtrl["wText"];
      
      //check the file directory is not empty
      if(filelocationTxt == "")
      {
       Log["Error"]("Unable to get the log location from the log viewer directory element");
       return false;
      }
      
      //Get the calculated checksum from the xml nodes
      var uddXMLLog = ReadXML(filelocationTxt + "\\UDD.DataLayerException.UDD.DataLayer.xml")
      var eventlogs = uddXMLLog["selectNodes"]("//EventLog[Process='UDD.DataLayer.exe']/Entry")
      //var calculatedCheckSum = eventlogs["context"]["Text"]["split"]("calculated CHECKSUM =")[1];      
      var calculatedCheckSum = eventlogs["context"]["Text"]["split"]("stored CHECKSUM = "+oldCheckSumValue)[1]["split"]("calculated CHECKSUM = ")[1];
      calculatedCheckSum = calculatedCheckSum["split"](".")[0];
      
      Log["Message"]("Generated Checksum Value is : '" + calculatedCheckSum + "'");
      
      //kill log file viewer
      logViewerWnd["Terminate"]();
      
      Log["PopLogFolder"]();
      return calculatedCheckSum;      
    } else {
      Log["Error"]("Unable to locate the log file viewer");
      Log["PopLogFolder"]();
      return false;
    } 
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : EnterSystemGeneratedChecksumValue(oldCheckSumValue)
//*   Function Description: This function is used to enter the Generated checksum value
//*   Input               : 
//*   Output              : true / false
//*   Date of Creating    : 08 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function EnterSystemGeneratedChecksumValue(oldCheckSumValue)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Enter System Generated Checksum Value");
  
    //Get the Generated Checksum value
    var checkSumValue = GetCheckSumForCalibrationDefinition(oldCheckSumValue);
  
    //Enter Generated Check sum value
    if(EnterCheckSum(checkSumValue))
    {
      Log["Message"]("Generated Checksum value entered at second time");
      Log["PopLogFolder"]();
      return true;    
    } else {
      Log["Error"]("Unable to Enter generated check sum value");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  } 
}

//***************************************************************************************
//*   Function Name       : SelectAssayByName()
//*   Function Description: This function is used to select the given assay name from the list of assays displayed
//*   Input               : AssayName
//*   Output              : NA
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function SelectAssayByName(assayName)
{
  try
  {    
    Log["AppendFolder"]("Cal-def :: Select Assay Name '" + assayName + "'");
    
    //Get the assay list grid view element
    var parentelement = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "grdvwSearchAssayGridCalDefinition");
    
    //Get the grid view list items under the assay grid view
    var testitems = GetAllChildren(parentelement,["ClassName","ObjectIdentifier"],["GridViewItem",assayName]);
    
    var isTestNameSelected = false;
    
    //Iterate the list of the assaynames displayed
    for(i=0;i<testitems.length;i++)
    {
      //Verify the assay name matches with the given expected assay name
      if(assayName == GetNativeObjectName(testitems[i]))
      {
        //Check the assay name is already selected => if not click it to select
        if(testitems[i]["IsSelected"] != true)
        {
          //Click on the assayname to select
          ClickCtrl(testitems[i]);          
          Log["Message"]("Clicked on '"+ assayName + "' Button in All Tests section");          
        } else {
          Log["Message"]("The testname '"+ assayName + "' already selected");
        }
        isTestNameSelected = true;
        break;
      }
    }
    
    Log["PopLogFolder"]();
    return isTestNameSelected
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : EnterLevels()
//*   Function Description: This function is used to enter the level 2 value
//*   Input               : level2 value
//*   Output              : true / false
//*   Date of Creating    : 08 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function EnterLevels(level2)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Enter Level 2 Value '" + level2 + "'");
    
    //Get the Assigned values grid control
    var assignedValuesGrid = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "dtgrAssignedValues");
    //Get the rows
    var dataRow = Getchild(assignedValuesGrid,"ClassName","GridRow") ;
    //Get the Level1 box
    var levelOne = Getchild(dataRow,"AutomationId","EditableNonNumericCellTemplate");
    
    //Get the level 2 box
    var levelTwo = Getchild(dataRow,"AutomationId","EditableCellTemplate");
        
    //Verify the Level 2 box
    if(VerifyObjectExistance(levelTwo)) 
    {
      //Click on inside the Level 2 textbox
      ClickCtrl(levelTwo);
      levelTwo["Keys"]("^a[Del]");
      
       //Enter the Level 2
       SendKeys(levelTwo,level2);
       aqUtils["Delay"](1000);
       
       //Tab Out to update the other field data
       SendKeys(levelTwo, "[Tab]");
       aqUtils["Delay"](1000);
       
       //Verify the Level 2 is entered properly
       if(levelTwo["Text"] == level2)
       {
          Log["Message"]("Level 2 Value'" + level2 + "' successfully entered in the Level 2 field");
          Log["PopLogFolder"]();   
          return true;
       } else {
         Log["Error"]("Unable to enter the given Level 2 value displayed after entering the Level 1 is '" + levelTwo["Text"] + "'");
         Log["PopLogFolder"]();   
         return false;
       }
    } else {
      Log["Error"]("Unable to locate the Level 2 text field ");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : ClickOnSaveButton()
//*   Function Description: This function is used to Click Save Button
//*   Input               : 
//*   Output              : true / false
//*   Date of Creating    : 08 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function ClickOnSaveButton()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Click on Save Button in Add Calibration Definition Popup");
    
    //Get Save Button Control
    var saveButton = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","btnCalDefinitionsSave")
    
    //Get Save Button Control
    if(VerifyObjectEnabled(saveButton))
    {
      //click on Save Button 
      ClickCtrl(saveButton);
      
      Log["Message"]("Save button is found and clicked on the save button");
      Log["PopLogFolder"]();
      return true
    } else{
      Log["Error"]("Unable to locate Save Button");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : AcceptSuccessConfirmationPopUp()
//*   Function Description: Handle the Success confirmation dialog
//*   Input               : 
//*   Output              : return true, if controls are exist and action performed
//*                         return false, if controls are not exist and action not performed
//*   Date of Creating    : 07 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function AcceptSuccessConfirmationPopUp()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Accept the Success confirmation popup");
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"](); 
 
    //Get the popup displayed
    var alertPopup = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Check the alert popup is displayed    
    if(VerifyObjectExists(alertPopup))
    {
      //Get the Ok button control from the confirmation popup
      var okBtn = Getchild(alertPopup, ["AutomationId", "ObjectIdentifier"], ["PrimaryButton", "OK"]);
      var title = Getchild(alertPopup, "AutomationId", "AlertTitleTextBlock");
      
      //check the alert message itle
      if(title["Text"] == "Information")
      {
        Log["Message"]("Success Confirmation Popup  is displayed");
        
        //check the ok btn enabled
        if(VerifyObjectEnabled(okBtn))
        {
                
          //Click on the ok button in the  Confirmation popup      
          ClickCtrl(okBtn);
      
          Log["Message"]("Clicked on the 'OK' button in the success confirmation popup");      
          Log["PopLogFolder"]();
          return true;                  
        } else {
          Log["Error"]("Ok button in the success confirmation popup is not enabled");
          Log["PopLogFolder"]();
          return false;
        }        
      } else {
        Log["Error"]("Unable to locate the success confirmation popup, Instead some other popup is displayed in the screen");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("There is no alert popup displayed in the screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifyTheSelectedAssayType()
//*   Function Description: This function is used to Verify the Selected Assay type in View Calibration Definition pop up
//*   Input               : assayType
//*   Output              : true / false
//*   Date of Creating    : 09 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function VerifyTheSelectedAssayType(assayType)
{
  try
  {
    Log["AppendFolder"]("View Cal-def :: Check the Assay Type Selected in View Calibration Definition Popup");
    
    //Get Assay Type control
    var assayTypeCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","comboBoxAssayType");
    
    //Check Assay Type control
    if(VerifyObjectExists(assayTypeCtrl))
    { 
       var selectedAssayTypeContainer = Getchild(assayTypeCtrl,"ClassName","TextBlock");
       var selectedAssayType = selectedAssayTypeContainer["Text"];
       
      //Verify the Selected Assay Type
      if(selectedAssayType == assayType)
      {
        Log["Message"]("Expected Assay Type is selected. Actual Assay Type: " +selectedAssayType + " Expected Assay Type: " +assayType);
        Log["PopLogFolder"]();
        return true;
        
      } else{
        Log["Error"]("Expected Assay Type is not selected. Actual Assay Type: " +selectedAssayType + "Expected Assay Type: " +assayType);
        Log["PopLogFolder"]();
        return false;
      }
    } else{
        Log["Error"]("Unable to locate Assay Type field");
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifyTheMaterialID()
//*   Function Description: This function is used to Verify the material id in View Calibration Definition pop up
//*   Input               : materialId
//*   Output              : true / false
//*   Date of Creating    : 09 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function VerifyTheMaterialID(materialId)
{
  try
  {
    Log["AppendFolder"]("View Cal-def :: Check the Material ID displayed");
    
     //Get Material ID text box control
    var materialIdCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "txbMaterialID");
    
    //Check the Material ID text  box displayed
    if(VerifyObjectExistance(materialIdCtrl)) 
    {
       //Verify the Material ID 
       if(materialIdCtrl["Text"] == materialId)
       {
          Log["Message"]("Expected Material ID is exist. Actual Material ID: " +materialIdCtrl["Text"] + " Expected Material Name: " +materialId);
          Log["PopLogFolder"]();   
          return true;
       } else {
         Log["Error"]("Expected Material ID is not exist. Actual Material ID: " +materialIdCtrl["Text"] + " Expected Material Name: " +materialId);
         Log["PopLogFolder"]();   
         return false;
       }
    } else {
      Log["Error"]("Unable to locate the Material ID text field ");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifyTheLotNo()
//*   Function Description: This function is used to Verify the Lot No in View Calibration Definition pop up
//*   Input               : lotNo
//*   Output              : true / false
//*   Date of Creating    : 09 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function VerifyTheLotNo(lotNo)
{
  try
  {
    Log["AppendFolder"]("View Cal-def :: Check the Lot No displayed");
    
    //Get Lot NO text box control
    var lotIdCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "txbLotID");
    
    //Check the Lot No text  box displayed
    if(VerifyObjectExistance(lotIdCtrl)) 
    {
       //Verify the Lot No
       if(lotIdCtrl["Text"] == lotNo)
       {
          Log["Message"]("Expected Lot No is exist. Actual Lot No: " +lotIdCtrl["Text"] + " Expected Lot No: " +lotNo);
          Log["PopLogFolder"]();   
          return true;
       } else {
         Log["Error"]("Expected Lot No is not exist. Actual Lot No: " +lotIdCtrl["Text"] + " Expected Lot No: " +lotNo);
         Log["PopLogFolder"]();   
         return false;
       }
    } else {
      Log["Error"]("Unable to locate the Lot No text field");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifyTheMaterialName()
//*   Function Description: This function is used to Verify the material name in View Calibration Definition pop up
//*   Input               : materialName
//*   Output              : true / false
//*   Date of Creating    : 09 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function VerifyTheMaterialName(materialName)
{
  try
  {
    Log["AppendFolder"]("View Cal-def :: Check the Material Name displayed in calibration definition popup ");
    
    //Get Material Name text box control
    var materialNameCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "txbMaterialName");
    
    //Check the Material Name text  box displayed
    if(VerifyObjectExistance(materialNameCtrl)) 
    {
      //Verify the Material Name
      if(materialNameCtrl["Text"] == materialName)
      {
        Log["Message"]("Expected Material Name is Displayed. Actual Material Name: " +materialNameCtrl["Text"] + " Expected Material Name: " +materialName);
        Log["PopLogFolder"]();
        return true;
        
      } else{
        Log["Error"]("Expected Material Name is not exist. Actual Material Name: " +materialNameCtrl["Text"] + " Expected Material Name: " +materialName);
        Log["PopLogFolder"]();
        return false;
      }
    } else{
        Log["Error"]("Unable to locate Material Name field");
        Log["PopLogFolder"]();
        return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifyTheisActive()
//*   Function Description: This function is used to Verify the isActive State in View Calibration Definition pop up
//*   Input               : isActive
//*   Output              : true / false
//*   Date of Creating    : 09 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function VerifyIsActiveCheckBox(isActive)
{
  try
  {
     Log["AppendFolder"]("View Cal-def :: Verify the isActive");
    //Get the isActive control
    var isActiveCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "checkBoxActive");
   
    //check the isActive control
    if(VerifyObjectExists(isActiveCtrl))
    {
      if(isActive)
      {
        //Verify the isActive status        
        if(GetToggleState(isActiveCtrl) == 1)
        {
          Log["Message"]("IsActive Check box State is Correct");
          Log["PopLogFolder"]();
          return true;
        } else{
            Log["Error"]("IsActive Check box State is Not Correct");
            Log["PopLogFolder"]();
            return false;
        } 
      } else{
        
        //Verify the isActive status
        if(GetToggleState(isActiveCtrl) == 0)
        {
          Log["Message"]("IsActive Check box State is Correct");
          Log["PopLogFolder"]();
          return true;
        } else{
          Log["Error"]("IsActive Check box State is Not Correct");
          Log["PopLogFolder"]();
          return false;
        }
      }
    } else {
      Log["Error"]("IsActive Check box State is Not Correct");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifySelectedAssayName()
//*   Function Description: This function is used to Verify the selected Assay Name in View Calibration Definition pop up
//*   Input               : assayName
//*   Output              : true / false
//*   Date of Creating    : 09 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function VerifySelectedAssayName(assayName)
{
  try
  {
    Log["AppendFolder"]("View Cal-def :: Check the Selected Assay Name");
    
    ///Get the assay list grid view element
    var parentelement = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "grdvwSearchAssayGridCalDefinition");
    
    //Get the grid view list items under the assay grid view
    var testitems = GetAllChildren(parentelement,["ClassName","ObjectIdentifier"],["GridViewItem",assayName]);
    
    var isAssaySelected = false;
    
    //Iterate the list of the assaynames displayed
    for(var i=0;i<testitems.length;i++)
    {
      //Verify the assay name matches with the given expected assay name
      if(assayName == GetNativeObjectName(testitems[i]))
      {
        var selectedAssay = testitems[i]["ObjectIdentifier"];
        if(selectedAssay == assayName)
        {
          //Check the assay name is selected
          if(testitems[i].IsSelected)
          {
            isAssaySelected = true;
            break;
          } else {
            Log["Error"](assayName + " is not selected");
            break;
          }          
        }        
      }
    }
    
    Log["PopLogFolder"]();
    return isAssaySelected;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifyTheVevel2Value()
//*   Function Description: This function is used to Verify the Level 2 in View Calibration Definition pop up
//*   Input               : level2 Value
//*   Output              : true / false
//*   Date of Creating    : 09 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************    
function VerifyTheLevel2Value(level2)
{
  try
  {
    Log["AppendFolder"]("View Cal-def :: Check the Level 2 Value ");
    
    //Get the Assigned values grid control
    var assignedValuesGrid = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "dtgrAssignedValues");
    
    //Get the rows
    var dataRow = Getchild(assignedValuesGrid,"ClassName","GridRow") ;
    //Get the Level1 box
    var levelOne = Getchild(dataRow,"AutomationId","EditableNonNumericCellTemplate");
    
    //Get the level 2 box
    var levelTwo = Getchild(dataRow,"AutomationId","EditableCellTemplate");
    
        //Verify the Level 2 box
    if(VerifyObjectExistance(levelTwo)) 
    {
       //Verify the Level 2 is entered properly
       if(levelTwo["Text"] == level2)
       {
          Log["Message"]("Provided Level 2 Value '" + level2 + "' only present");
          Log["PopLogFolder"]();   
          return true;
       } else {
         Log["Error"]("Provided Level 2 Value '" + level2 + "' is not present");
         Log["PopLogFolder"]();   
         return false;
       }
    } else {
      Log["Error"]("Unable to locate the Level 2 text field ");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function CloseCalibrationDefinitionPopUp()
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Click on Close Button");
    
    //Get Close Button Control
    var closeButton = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","btnCalDefinitionsClose")
    
    //Get Close Button Control
    if(VerifyObjectEnabled(closeButton))
    {
      //click on Close Button 
      ClickCtrl(closeButton);
      
      Log["Message"]("Close Button Successfully Clicked");
      
      //Get the Cal def Grid control Container
      var calDefinitionsGridContainer = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "dtgrdCalibrationDefinitions");
    
      //Check the Cal Def Screen Grid display
      if(VerifyObjectExists(calDefinitionsGridContainer))
      {
        Log["Message"]("Calibration definition popup closed successfully");        
        Log["PopLogFolder"]();
        return true;
      } else{
        Log["Error"]("Calibration definition popup is not closed");
        Log["PopLogFolder"]();
        return false;
      }
    } else{
      Log["Error"]("Unable to locate Close Button");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}
//----------------------------------------------------------------------------------------

//------------------------------Business Logic methods------------------------------------

//***************************************************************************************
//*   Function Name       : AddNewIMCalDefinition()
//*   Function Description: Add New IM Calibration
//*   Input               : Information for Adding new calibration
//*   Output              : return true, if Calibration added successfully
//*                       : return false, if unable to add new calibration
//*   Date of Creating    : 08 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function AddNewcalibrationDefinition(assayType,materialName,materialId,lotNo,date,month,year,isActive,assayName,checkSumValue,level2)
{
  try
  {   
    Log["AppendFolder"]("Add Cal-def :: Add New Cal Definition '" + materialName + "'");
    
    //Click on AddNew button
    if(!ClickOnAddNewButton())
    {
       Log["Error"]("Unable to locate Add New Button");
       Log["PopLogFolder"]();
       return false;
    }
    
    //Check the add new calibration popup is displayed
    if(!CheckCalibrationDefinitionPopupDisplayed())
    {
      Log["Error"]("Unable to locate the add new calibration definition popup");
      Log["PopLogFolder"]();
      return false;
    }

    //Enter the new calibration information    
    if(!EnterCalibrationDetailsInAddCalDefPopup(assayType,materialName,materialId,lotNo,date,month,year,isActive,assayName,checkSumValue))
    {
      Log["Error"]("Failed to enter the calibration definition information");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Select Test
    if(!SelectAssayByName(assayName))
    {
      Log["Error"]("Faile to select assay '" + assayName + "'");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Enter Level 2 value
    if(!EnterLevels(level2,assayName))
    {  
      Log["Error"]("Failed to enter level value(s) for assay '" + assayName + "'");
      Log["PopLogFolder"]();
      return false;
    }
          
    //Click on Save button
    if(!ClickOnSaveButton())
    {
      Log["Error"]("Failed to click on save button");
      Log["PopLogFolder"]();
      return false;
    }
       
    if(!AcceptInValidChecksumErrorPopup())
    {
      Log["Error"]("Unable to locate the Invalid Checksum Error Popup");
      Log["PopLogFolder"]();
      return false;
    }
           
    if(!EnterSystemGeneratedChecksumValue(checkSumValue))
    {
      Log["Error"]("Failed to get and enter teh system generated checksum value");
      Log["PopLogFolder"]();
      return false;
    }
                          
    //Click on Save button
    if(!ClickOnSaveButton())
    {
      Log["Error"]("Failed to click on save button");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Accept confirmation popup
    if(!AcceptSuccessConfirmationPopUp())
    {
      Log["Error"]("Failed to locate / Accept the success confirmation popup");
      Log["PopLogFolder"]();
      return false;
    }
    
//    if(!CloseAddCalDefPopup())
//    {
//      Log["Error"]("Failed to close the Add calibration popup");
//      Log["PopLogFolder"]();
//      return false;
//    }
    
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  } 
}

function EnterCalibrationDetailsInAddCalDefPopup(assayType,materialName,materialId,lotNo,date,month,year,isActive,assayName,checkSumValue)
{
  try
  {
    Log["AppendFolder"]("Add Cal-def :: Entering the calibration definition information in the Add Cal-Def popup");
    
    //Select assay Type
    if(!SelectAssayType(assayType))
    {
      Log["Error"]("Unable to select assay type combo box");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Enter Material Name
    if(!EnterMaterialName(materialName))
    {
      Log["Error"]("Unable to Enter Material Name");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Enter Material ID
    if(!EnterMaterialId(materialId))
    {
      Log["Error"]("Unable to Enter Material ID");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Enter Lot No
    if(!EnterLotId(lotNo))
    {
      Log["Error"]("Unable to Enter Lot ID");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Select Expiration Date
    if(!SelectExpirationDate(date,month,year))
    {
      Log["Error"]("Unable to select expiration date");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Set Active/InActive
    if(!SelectIsActive(isActive))
    {
      Log["Error"]("Unable to set as Active/InActive");
      Log["PopLogFolder"]();
      return false;
    }

    //Enter CheckSum Value
    if(!EnterCheckSum(checkSumValue))
    {
      Log["Error"]("Unable to Enter CheckSum");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["PopLogFolder"]();
    return true;
    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : DeleteRecordByMaterialName()
//*   Function Description: Delete the Cal Definition if exists in Grid
//*   Input               : materialName,materialId,lotNo
//*   Output              : return true, if Data is not exist and Delete operation done successfully
//*   Date of Creating    : 08 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function DeleteCalibrationDefinitionByMaterialName(materialName,materialId,lotNo)
{
  try
  { 
    Log["AppendFolder"]("Cal-def :: Delete Calibration Definition with material name '" + materialName + "' from the Calibration Definition datagrid ");
    
    // if the calibration definition is located and selected
    if(!SelectCalibrationDefinitionByMaterialName(materialName,materialId,lotNo))
    {
      Log["Error"]("Unable to locate the calibration definition with material name '" + materialName + "'");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click on the delete button
    if(!ClickOnDeleteButton())
    {
      Log["Error"]("Failed to click on the delete button");
      Log["PopLogFolder"]();
      return false;
    }
      
    //Accept delete confirmation popup
    if(!AcceptDeleteCalibrationDefinitionConfirmationPopup())
    {
      Log["Error"]("Failed to accept the delete confirmation popup");
      Log["PopLogFolder"]();
      return false;
    }
      
    //Accept success confirmation Popup
    if(!AcceptSuccessConfirmationPopUp())
    {
      Log["Error"]("Failed on accepting the confirmation popup");
      Log["PopLogFolder"]();
      return false;
    }
      
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function SelectCalibrationDefinitionByMaterialName(materialName, materialId, lotNo)
{
  try
  {

    Log["AppendFolder"]("Cal-def :: Select the calibration definition with '" + materialName + "'");
    
    //Get the Grid control Container
    var calDefinitionsGridContainer = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "dtgrdCalibrationDefinitions");
 
    //Check the Cal Definitions datagrid is dispalyed
    if(!VerifyObjectExists(calDefinitionsGridContainer))
    {
      Log["Error"]("Unable to locate Cal Definitions daatgrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(calDefinitionsGridContainer);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    var isDataExist = false;
    var materialNameColIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions", "MaterialName");
    var materialIdColIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions", "MaterialId");
    var lotIdColIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions", "LotId");
      
    //Iterate the rows displayed in the datagrid
    for(var rowIndex=0;rowIndex<rowDetails.length;rowIndex++)
    {
      
      var rowParent = rowDetails[rowIndex];
      var gridCellList = GetAllChildren(rowParent, "ClassName", "GridCell");
      gridCellList = gridCellList.reverse();
      
      var actualMaterialNameCtrl = Getchild(gridCellList[materialNameColIndex],"ClassName","TextBlock");
      var actualMaterialIdCtrl = Getchild(gridCellList[materialIdColIndex],"ClassName","TextBlock");
      var actualLotIdCtrl = Getchild(gridCellList[lotIdColIndex],"ClassName","TextBlock");
      
      var actualMaterialName = GetNativeObjectName(actualMaterialNameCtrl);
      var actualMaterialId = GetNativeObjectName(actualMaterialIdCtrl)
      var actualLotId = GetNativeObjectName(actualLotIdCtrl);
      
      if(actualMaterialName == materialName && actualMaterialId == materialId && actualLotId == lotNo)
      {
        Log["Message"]("Calibration Definition with material name '" + materialName + "' is located in the datagrid");
        
        var checkBox = Getchild(rowParent, "ClassName", "CheckBox");
        
        //select the check box 
        SelectCheckbox(checkBox);
        
        Log["Message"]("Selected the checkbox of the calibration definition with material name '" + materialName + "'");
        
        isDataExist = true;
        break;
      }     
    }
    
    Log["PopLogFolder"]();
    return isDataExist
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function CheckCalibrationDefinitionExists(materialName,materialId,lotNo)
{
  try
  {
    
    Log["AppendFolder"]("Cal-def :: Check the calibration definition with '" + materialName + "'");
    
    //Get the Grid control Container
    var calDefinitionsGridContainer = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions", "dtgrdCalibrationDefinitions");
    
    //Check the Cal Definitions datagrid is dispalyed
    if(!VerifyObjectExistance(calDefinitionsGridContainer))
    {
      Log["Error"]("Unable to locate Cal Definitions daatgrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Get the row count of the calibration definition datagrid
    var rowDetails = GetSFGridRowDetails(calDefinitionsGridContainer);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    var isDataExist = false;
    var materialNameColIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions", "MaterialName");
    var materialIdColIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions","MaterialId");
    var lotIdColIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationDefinitions", "LotId");
      
    //Iterate the rows displayed in the datagrid
    for(var rowIndex=0; rowIndex < rowDetails.length; rowIndex++)
    {
      var rowParent = totalRowsCtrls[rowIndex];
      var gridCellList = GetAllChildren(rowParent, "ClassName", "GridCell");
      gridCellList = gridCellList.reverse();
      
      var actualMaterialNameCtrl = Getchild(gridCellList[materialNameColIndex],"ClassName","TextBlock");
      var actualMaterialIdCtrl = Getchild(gridCellList[materialIdColIndex],"ClassName","TextBlock");
      var actualLotIdCtrl = Getchild(gridCellList[lotIdColIndex],"ClassName","TextBlock");
      
      var actualMaterialName = GetNativeObjectName(actualMaterialNameCtrl);
      var actualMaterialId = GetNativeObjectName(actualMaterialIdCtrl)
      var actualLotId = GetNativeObjectName(actualLotIdCtrl);
      
      if(actualMaterialName == materialName && actualMaterialId == materialId && actualLotId == lotNo)
      {
        Log["Message"]("Calibration Definition with material name '" + materialName + "' is located in the datagrid");
        isDataExist = true;
        break;
      }     
    }
    
    if(isDataExist)
    {
      Log["Message"]("Calibration Definition with material name '" + materialName + "' is displayed in the cal-def datagrid");
      Log["PopLogFolder"]();  
      return true;
    } else {
      Log["Message"]("Calibration Definition with material name '" + materialName + "' doesn't exists in the cal-def datagrid");
      Log["PopLogFolder"]();  
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function CheckCalibrationDefinitionDetails(assayType,materialName,materialId,lotNo,date,month,year,isActive,assayName,checkSumValue,level2)
{
  try
  {
    Log["AppendFolder"]("Cal-def :: Check the calibration definition details");
    
    // if the calibration definition is located and selected
    if(!SelectCalibrationDefinitionByMaterialName(materialName,materialId,lotNo))
    {
      Log["Error"]("Unable to locate the calibration definition with material name '" + materialName + "'");
      Log["PopLogFolder"]();
      return false;
    }
        
    //Click on the Edit button
    if(!ClickOnEditButton())
    {
      Log["Error"]("Failed to click on the edit button");
      Log["PopLogFolder"]();
      return false;
    }
      
    //Check the edit calibration popup is displayed
    if(!CheckCalibrationDefinitionPopupDisplayed())
    {
      Log["Error"]("Unable to locate the edit calibration definition popup");
      Log["PopLogFolder"]();
      return false;
    }
      
    //Check the assay type
    if(!VerifyTheSelectedAssayType(assayType))
    {
      Log["Error"]("Failed on verifying the assay type selected");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Check the material name  
    if(!VerifyTheMaterialName(materialName))
    {
      Log["Error"]("Failed on verifying the material name displayed");
      Log["PopLogFolder"]();
      return false;
    }
      
    if(!VerifyTheMaterialID(materialId))
    {
      Log["Error"]("Failed to verify the material id displayed");
      Log["PopLogFolder"]();
      return false;
    }
    
    if(!VerifyTheLotNo(lotNo))
    {
      Log["Error"]("failed to verify the lot number displayed");
      Log["PopLogFolder"]();
      return false;      
    }
    
    if(!VerifyIsActiveCheckBox(isActive))
    {
      Log["Error"]("Failed to validate the is Active checkbox status displayed");
      Log["PopLogFolder"]();
      return false;      
    }
    
    if(!VerifySelectedAssayName(assayName))
    {
      Log["Error"]("Failed on verifying the given assay is selected");
      Log["PopLogFolder"]();
      return false; 
    }
      
    if(!VerifyTheLevel2Value(level2))
    {
      Log["Error"]("Failed to validate the level 2 information of the assay in view calibration popup");
      Log["PopLogFolder"]();
      return false;
    }
        
    if(!CloseCalibrationDefinitionPopUp())
    {
      Log["Error"]("Failed to close the Add calibration popup");
      Log["PopLogFolder"]();
      return false;
    }
              
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function UpdateMaterialNameAndSaveCalibrationDefinition(materialName,materialId,lotNo, newMaterialName)
{
  try
  {
    
    Log["AppendFolder"]("Cal-def :: Update Calibration Definition Material Name & Save");
 
    // if the calibration definition is located and selected
    if(!SelectCalibrationDefinitionByMaterialName(materialName,materialId,lotNo))
    {
      Log["Error"]("Unable to locate the calibration definition with material name '" + materialName + "'");
      Log["PopLogFolder"]();
      return false;
    }
        
    //Click on the Edit button
    if(!ClickOnEditButton())
    {
      Log["Error"]("Failed to click on the delete button");
      Log["PopLogFolder"]();
      return false;
    }
      
    //Check the edit calibration popup is displayed
    if(!CheckCalibrationDefinitionPopupDisplayed())
    {
      Log["Error"]("Unable to locate the edit calibration definition popup");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Check the material name  
    if(!VerifyTheMaterialName(materialName))
    {
      Log["Error"]("Failed on verifying the material name displayed");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Update Material Name
    if(!EnterMaterialName(newMaterialName))
    {
      Log["Error"]("Failed on updating the new material name");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click On save
    if(!ClickOnSaveButton())
    {
      Log["Error"]("Failed on locating the save button / click on the save button");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Accept confirmation popup
    if(!AcceptSuccessConfirmationPopUp())
    {
      Log["Error"]("Failed on locating the update success information message popup");
      Log["PopLogFolder"]();
      return false;
    }
          
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by suresh : DEC 23, 2k19

//----------------------------------Calibration Orders------------------------------------

function ClickCalibrationOrdersFromCalibrationDefinitions()
{
  try
  {
    Log["AppendFolder"]("Click calibration orders button from calibration definitions screen");
    
    //Get the calibration order button control
    var btnCalibrationOrdersCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationDefinitions","btnCalOrders");
    
    //check the calibration order button displayed and enabled
    if(VerifyObjectEnabled(btnCalibrationOrdersCtrl))
    {
      //Click Calibration orders button
      ClickCtrl(btnCalibrationOrdersCtrl);
      
      Log["Message"]("Clicked calibrationorders button from calibration definitions");
      
      if(VerifyCalibrationOrdersGridIsDisplayed())
      {
        Log["Message"]("Navigated to calibration orders page");
        Log["PopLogFolder"]();
        return true; 
      } else {
        Log["Error"]("Failed to navigate to calibration orders");
        Log["PopLogFolder"]();
        return false;
      }
    } 
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationOrdersGridIsDisplayed()
{
  try
  {
    Log["AppendFolder"]("Cal-Orders :: Verify if Calibration Orders is displayed");
    
    //Get the control of calibration order data grid
    var calibrationOrdersgridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridCalibrationOrder");
    
    //check the calibration order grid control displayed
    if(VerifyObjectExists(calibrationOrdersgridCtrl))
    {
      Log["Message"]("Calibration orders grid is displayed");
      Log["PopLogFolder"]();
      return true; 
    }
    else
    {
      Log["Error"]("Calibration orders grid is not displayed");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibratorMaterialsGridIsDisplayed()
{
  try
  {
    Log["AppendFolder"]("Cal-Orders :: Verify if Calibration Material grid is displayed");
    
    //Get the control of calibration material data grid
    var calibratiorMaterialsgridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridCalibratorMaterial");
    
    //check the calibration material grid displayed
    if(VerifyObjectExists(calibratiorMaterialsgridCtrl))
    {
      Log["Message"]("Calibratior Material grid is displayed");
      Log["PopLogFolder"]();
      return true; 
    } else {
      Log["Error"]("Calibratior Material grid is not displayed");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectAnalyzer(analyzer)
{
  try
  {    
    
    Log["AppendFolder"]("Cal-Orders :: Select Analyzer '" + analyzer + "' type");
    
    //Get the analyzer combo box control
    var analyzerObjCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","comboBoxAnalyzer");
    
    //Verify analyzer control enabled
    if(VerifyObjectExists(analyzerObjCtrl))
    {
      //select the analyzer from the combo box
      SelectComboBoxItem(analyzerObjCtrl,analyzer);
       
      //Get the selected text value from combobox
      var selectedValue = analyzerObjCtrl["Selection"].toArray()[0];
      
      //Check the selected specimen is valid
      if(aqString["Find"](aqString["ToLower"](selectedValue),aqString["ToLower"](analyzer)) != 1)
      {
        Log["Message"]("Given analyzer type '" + analyzer + "' has been selected successfully in combo box");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Unable to select the given analyzer type in combo box");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the analyzer combo box in calibration order screen");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SearchAndSelectAssay(assayName)
{
  try
  {
    Log["AppendFolder"]("Cal-Orders :: Search and Select assay '" + assayName + "'");
    
    //Select assay button 
    var selectAssayObjCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","btnSelectAssay");
    
    //Verify selectAssay button exists
    if(VerifyObjectExists(selectAssayObjCtrl))
    {
      //click on the assay selection button
      ClickCtrl(selectAssayObjCtrl);
      
      //wait for the assay selection popup to be displayed
      WaitForProgressRingToDisappear(10);
      
      //get the assay selection popup
      var selectAssayDialogCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","selectAssayDialog");
      
      //Get select assay dialog box control
      var assaySearchGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridAssaySearch")
      
      //check the assay dialog displayed
      if(VerifyObjectExists(selectAssayDialogCtrl))
      {  
        Log["AppendFolder"]("Search for assay '" + assayName + "' to select");
        
        //Get the search box control
        var assaySearchCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","selectAssaySearchBox");
        
        //enter the assay name in the search box control
        SetValue(assaySearchCtrl,assayName);
        
        //wait for the assay list to be loaded
        Delay(1000,"Waiting for the assay name to be found");
        
        
        //Get the grid view ctrl of the assay list
        var searchResultGridCtrl = Getchild(assaySearchGridCtrl,"AutomationId","gridView");
        
        //refresh the root node of the assay list grid view
        searchResultGridCtrl["Refresh"]();
                      
        //get the required assay name control
        var assayListCtrl = GetAllChildren(searchResultGridCtrl, ["AutomationId","Text"], ["AssayName",assayName]);
                
        var isAssaySelected  = false;
        //Iterate the list of the assaynames displayed
        for(var i=0; i<assayListCtrl.length; i++)
        {
          //Verify the assay name matches with the given expected assay name
          if(GetNativeObjectName(assayListCtrl[i]) == assayName)
          {
            Log["Message"]("Assay name located in the list of tests");
        
            //Check the assay name is already selected => if not click it to select
            if(assayListCtrl[i]["IsSelected"] != true)
            {          
              Log["Message"]("Click on '"+ assayName + "' button in tests list section");
          
              //Disabling the log for avoiding the warning message of scroll into view
              Log["Enabled"] = false;
          
              //Scroll the test list to item
              assayListCtrl[i]["ScrollIntoView"]();
          
              //Enabling the log
              Log["Enabled"] = true;
          
              aqUtils["Delay"](2000, "Wait for the assay '" + assayName + "' to be located");

              //Check the test name is visible          
              if(assayListCtrl[i]["Visible"])
              {
                //Click on the assayname to select
                ClickCtrl(assayListCtrl[i]);  
              } else {
                Log["Error"]("Unable to click on the item and it is not visible");
                return false;
              }
          
              //Check the test is selected
              if(assayListCtrl[i]["IsSelected"] == true)
              {
                Log["Message"]("Test '" + assayName + "' is selected successfully");
                isAssaySelected = true;
                break;
              } else {
                Log["Error"]("Attempt to select the test '" + assayName + "' is failed and unable to select the test");
                isAssaySelected = false;
                break;
              }
            } else {
              Log["Message"]("The testname '"+ assayName + "' already selected");
              isAssaySelected = true;
              break;
            }        
          }
        }
        
        if(!isAssaySelected)
        {
          Log["Error"]("Given assay '" + assayName + "' is not selected");
          Log["PopLogFolder"]();
          return false;
        }
        else
        {
          Log["Message"]("Given assay '" + assayName + "' is selected successfully");
          
          var addAssaysonPopUpCtrl = Getchild(selectAssayDialogCtrl,"ObjectIdentifier","Add_Assays");
                  
          if(VerifyObjectEnabled(addAssaysonPopUpCtrl))
          {
            ClickControl(addAssaysonPopUpCtrl);           
            Log["Message"]("Clicked add assays button");      
            Log["PopLogFolder"]();
            return true;
          }
          else
          {
            Log["Error"]("Cannot add assay '"+assayName+"' because Add Assays button doesn't exists/ enabled in the popup");
            Log["PopLogFolder"]();
            return false; 
          } 
        }
        
        
      } else {
        Log["Error"]("Select asssay dialog doesn't exits");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Select Assay button doesn't exists");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibratorMaterialGridIsPopulated()
{
  try
  {
    Log["AppendFolder"]("Cal-Orders :: Verify calibrator material grid is populated")
    
    //Get the calibration material datagrid control
    var calibratorMaterialGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridCalibratorMaterial");
    
    //check the cal order material grid is displayed
    if(VerifyObjectExists(calibratorMaterialGridCtrl))
    {
      //get the material grid row list
      var materialGridRowsCtrl = GetSFGridRowDetails(calibratorMaterialGridCtrl);
    
      if(!materialGridRowsCtrl)
      {
        Log["Message"]("Calibrator Material Grid is empty");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Calibrator Material Grid is populated with '"+materialGridRowsCtrl.length+"' records");
        Log["PopLogFolder"]();
        return true;
      }      
    } else {
      Log["Error"]("Calibrator Material grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationOrdersGridIsPopulated()
{
  try
  {
    Log["AppendFolder"]("Cal-Orders :: Verify calibrator orders grid is populated")
    
    //get calibration orders grid control
    var calibratorOrdersGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridCalibrationOrder");
    
    //Check the calibration order grid dispalyed
    if(VerifyObjectExists(calibratorOrdersGridCtrl))
    {     
      //get the row details displayed for the calibration order grid
      var ordersGridRowsCtrl = GetSFGridRowDetails(calibratorOrdersGridCtrl);
    
      if(!rowDetails)
      {
        Log["Message"]("Calibrator Orders Grid is empty");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Calibrator Orders Grid is populated with '"+ordersGridRowsCtrl.length+"' records");
        Log["PopLogFolder"]();
        return true;
      }    
    } else {
      Log["Error"]("Calibrator Orders grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function AddCalibratorMaterialsToCalibrationOrder(materialNameList,materialIdList,assayNameList)
{
  try
  {    
    Log["AppendFolder"]("Cal-Orders : Verify orders present in calibrator material and add it to calibrator orders");
         
    //get calibration materials data grid control
    var calibratorMaterialGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridCalibratorMaterial");
    
    //Check the calibration order material grid displayed
    if(VerifyObjectExists(calibratorMaterialGridCtrl))
    {    
      //Get all rows of the grid
      var materialGridRowDetails = GetSFGridRowDetails(calibratorMaterialGridCtrl);
    
      if(!materialGridRowDetails)
      {
        Log["Message"]("There are no records displayed in the calibration order daat grid");
        Log["PopLogFolder"]();
        return false;
      }
    
      //get the column index for the material name, assayname & material id from cal-order material grid         
      var materialNameColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibratorMaterial","MaterialName");
      var assayNameColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibratorMaterial","Assays");
      var materialIdColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibratorMaterial","MaterialId");
         
      var materialCount = materialNameList.length;
      var counterIndex = 0;
         
      //Loop till number of material names to add
      for(var j=0; j<materialNameList.length; j++) 
      {
        var isMaterialNameAddedToOrder = false;
           
        for(var i=0; i< materialGridRowDetails.length; i++)
        {
          var rowParent = materialGridRowDetails[i];
          var gridCellList = GetAllChildren(rowParent,"ClassName","GridCell");
              
          var materialNameCtrl = Getchild(gridCellList[materialNameColumnIndex],"ClassName","TextBlock");
          var materialName = materialNameCtrl["Text"];
              
          var assayNameCtrl = Getchild(gridCellList[assayNameColumnIndex],"ClassName","TextBlock");
          var assayName = assayNameCtrl["Text"];
                 
          var materialIdCtrl = Getchild(gridCellList[materialIdColumnIndex],"ClassName","TextBlock");
          var materialId = materialIdCtrl["Text"];
              
          //if materialID, assayname & materialName matches to expected add it to the orders grid
          if(materialName == materialNameList[j] && assayName == assayNameList[j] && materialId == materialIdList[j])
          {
            var addCalibratorButtonCtrl = GetChild(rowParent,"AutomationId","AddOrderButton");
                    
            if(VerifyObjectEnabled(addCalibratorButtonCtrl))
            {
              Log["Message"]("Material Name '" + materialNameList[j] + "' is located to add to calibration order");
                  
              //click on the add order button
              ClickCtrl(addCalibratorButtonCtrl);
                  
              Log["Message"]("Add calibration to order button is clicked");
              isMaterialNameAddedToOrder = true;
              break;                  
            } else {
              Log["Error"]("Unable to click on the + button to add the calibration def to calibration order");                  
            }
          }
        }
        
        if(isMaterialNameAddedToOrder)
        {
          counterIndex = counterIndex + 1;
          Log["Message"]("Material name '" + materialNameList[j] + "' is successfully added to the order");                
        } else {
          Log["Error"]("Unable to locate the material name '" + materialNameList[j] + "'");
        }
      }
         
      if(materialCount == counterIndex)
      {
       Log["Message"]("All the cal-def's are successfully added to the cal-order");
       Log["PopLogFolder"]();  
       return true;
      } else if(counterIndex < materialCount) {
       Log["Warning"]("Some of the cal-def's with the material is not added to the order");
       Log["PopLogFolder"]();
       return false;         
      } else {
       Log["Error"]("Unable to add none of the material to the cal-order");
       Log["PopLogFolder"]();
       return false;
      }
    } else {
      Log["Message"]("Calibrator Material Grid is empty");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibratorMaterialsAddedToCalibrationOrderGrid(materialNameList,assayNameList)
{
  try
  {
    Log["AppendFolder"]("Cal-Def orders :: Verify Calibration Order created");
    
    //Get calibration orders data grid
    var calibrationOrderGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridCalibrationOrder");
    
    //check the calibration order grid displayed
    if(VerifyObjectExists(calibrationOrderGridCtrl))
    {
      //Get the rows of the grid
      var calOrderGridRowDetails = GetSFGridRowDetails(calibrationOrderGridCtrl);
    
      if(!calOrderGridRowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["PopLogFolder"]();
        return false;
      }

      //Get the material Name and assayName column index from the calibration order datagrid      
      var materialNameColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationOrders","MaterialName");
      var assayNameColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationOrders","Assays");
                 
      var materialCount = materialNameList.length;
      var counterIndex = 0;
      
      //Verify till number of material names to check
      for(var j=0; j<materialNameList.length; j++) 
      {    
        var isMaterialNameAdded = false;
        
        for(var i=0;i< calOrderGridRowDetails.length;i++)
        {
          var rowParent = calOrderGridRowDetails[i];
          var gridCellDetails = GetAllChildren(rowParent,"ClassName","GridCell");
          
          var materialNameCtrl = Getchild(gridCellDetails[materialNameColumnIndex],"ClassName","TextBlock");
          var materialName = materialNameCtrl["Text"];
                          
          var assayNameCtrl = Getchild(gridCellDetails[assayNameColumnIndex],"ClassName","TextBlock");
          var assayName = assayNameCtrl["Text"];
                           
          //Check if the currentmaterialname and currentassayname matches the expected
          if(materialName == materialNameList[j] && assayName == assayNameList[j])
          {
            Log["Message"]("Calibrator order with materialName '" + materialNameList[j] + "' and for assay '" +assayNameList[j] + "' is added");
            isMaterialNameAdded = true;
            break;
          }   
        }
         
        if(isMaterialNameAdded)
        {
          counterIndex = counterIndex + 1;
          Log["Message"]("Material '" + materialNameList[j] + "' is located in the calibration order grid");
        } else {
          Log["Error"]("Unable to locate the material '" + materialNameList[j] + "' with the assay '" + assayNameList[j] + "' in the calibration order grid");
        }                  
      }
         
      if(materialCount == counterIndex)
      {
        Log["Message"]("All the calibrator materials are successfully added to the cal-order");
        Log["PopLogFolder"]();
        return true;
      } else if(counterIndex < materialCount) {
        Log["Warning"]("Some of the calibrator materials are not added to the cal-order");
        Log["PopLogFolder"]();
        return false;         
      } else {
        Log["Error"]("None of the calibrator materials are added to the cal-order");
        Log["PopLogFolder"]();
        return false;
      }         
    } else {
      Log["Error"]("Unable to locate the calibration order grid");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ClickPlaceOrder()
{
  try
  {
    Log["AppendFolder"]("Cal-Def orders :: Click place order");
    
    //Get place order button
    var btnPlaceOrderCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","btnPlaceCalibrationOrder");
    
    //check the place order button is displayed and enabled
    if(VerifyObjectEnabled(btnPlaceOrderCtrl))
    {
      Log["Message"]("Place Order button is located in the cal-order screen");
       
      //Click place order
      ClickCtrl(btnPlaceOrderCtrl);
              
      Log["Message"]("Clicked on the place order button");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Can't place calibration order, the button doesn't exist/enabled");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ConfirmPlaceOrder()
{
  try
  {
    Log["AppendFolder"]("Cal-Def orders :: Accept place order confirmation");
    
    //get parent object
    var parentCtrl = Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75");
    
    //get order confirmation popup control
    var confirmPlaceOrderpopupCtrl = GetAutomationIDControl("SystemHealthCheck","alertDialog");
    
    //check the popup displayed
    if(VerifyObjectExists(confirmPlaceOrderpopupCtrl))
    {
      //get the order  button control
      var orderBtnCtrl = Getchild(confirmPlaceOrderpopupCtrl,"AutomationId","PrimaryButton");
      
      //Verify order button exist
      if(VerifyObjectEnabled(orderBtnCtrl))
      {
        Log["Message"]("Order button in the confirmation popup is displayed");
        
        //click on the ok button control
        ClickCtrl(orderBtnCtrl);
        
        Log["Message"]("Order button in the confirmation popup is clicked");
        Log["PopLogFolder"]();
        return true;        
      } else {
        Log["Error"]("Order button doesn't exist in order confirmation popup");
        Log["PopLogFolder"]();
        return false;
      } 
    } else {
      Log["Error"]("Calibration order place confirmation dialog didn't appear");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyOrderPlacedSuccessfully()
{
  try
  {
    //wait for the process ring to disappear
    WaitForProgressRingToDisappear(10);
        
    //Get control of the text appear in popup
    var succesTxtCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","textOrdersPlaced");
       
    //get the ok button in completed popup
    var okCtrl = Getchild(parentCtrl,"AutomationId","OkCloseButton");
         
    //Check if the text has "Orders placed successfully" in it
    if(aqString["Find"](succesTxtCtrl["Text"],"Orders placed successfully") != -1)
    {
      Log["Message"]("Calibration order is placed successfully popup is displayed");
                    
      //Click OK displayed in the order confirmation popup
      ClickCtrl(okCtrl);
        
      Log["Message"]("Clicked on the ok button to navigate to the calibration result screen");
        
      //wait for the calibration order placed    
      WaitForProgressRingToDisappear(10);
        
      //wait for the page to be navigated to the calibration results    
      Delay(3000,"Waiting for orders to be reflected in Calibration-Results, Maxwait:3Sec");
        
      //get the calibration result grid control    
      var calibrationResultGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","gridCalibrationResults");
            
      //Verify orders are placed and results page is navigated
      if(VerifyObjectExists(calibrationResultGridCtrl))
      {
        Log["Message"]("Calibration orders placed successfully, and the screen is navigated to Calibration results");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Calibration results page is not navigated after placing orders");
        Log["PopLogFolder"]();
        return false;
      }            
    } else if (aqString["Find"](succesTxtCtrl["Text"],"Place order failed") != -1) {
      Log["Error"]("Calibration Order placed is failed");
      Log["PopLogFolder"]();
      return false;
    } else {
      Log["Error"]("Calibration order is failed to place");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

function isCalibrationOrdersPlaced()
{
  try
  {
    Log["AppendFolder"]("Cal-Def orders :: Verify calibration are placed");
    
    //get calibration order grid control
    var calibrationOrderGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","gridCalibrationOrder");
    
    //check the calibration order grid displayed
    if(VerifyObjectExists(calibrationOrderGridCtrl))
    {
      //get the row details from the datagrid    
      var calOrderGridRowsCtrl = GetSFGridRowDetails(calibrationOrderGridCtrl);
    
      if(!calOrderGridRowsCtrl)
      {
        Log["Error"]("Calibration grid contains unplaced orders");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Calibration orders are placed");
        Log["PopLogFolder"]();
        return true;
      }    
    } else {
      Log["Error"]("Calibration order data grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function isNoCalLotFoundfortheAssay()
{
  try
  {
    Log["AppendFolder"]("Verify if Cal Lot is not found for the assay selected");
    
    //Cal lot not found alert control
    var notCalLotDialogCtrl = GetAutomationIDControl("SystemHealthCheck","alertDialog");
    
    //Verify alert exist
    if(VerifyObjectExists(notCalLotDialogCtrl))
    {
      Log["Error"]("Cal Lot is not found for the assay selected");
      
      //Get Ok button control in the alert
      var okBtnCtrl = Getchild(notCalLotDialogCtrl,"AutomationId","PrimaryButton");
      
      //Click ok button on Cal lot control
      ClickCtrl(okBtnCtrl);
      
      Log["Message"]("Clicked ok on Cal lot not found alert");    
      Log["PopLogFolder"]();
      return 0;
    }
    else
    {
      Log["Message"]("Cal Lot is found for the assay selected");
      Log["PopLogFolder"]();
      return 1;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//------------------------------------Cal-Results-----------------------------------------

function VerifyAcceptIsEnabled()
{
  try
  {
    Log["AppendFolder"]("Cal-Results :: Verify if Accept button got enabled");
    
    //Get accept button control in Cal-Results screen
    var btnAcceptCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","btnAccept");
    
    //Verify accept control enabled
    if(VerifyObjectEnabled(btnAcceptCtrl))
    {
      Log["Message"]("Accept button got enabled after the process");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Accept button is not enabled after the process");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyRejectIsEnabled()
{
  try
  {
    Log["AppendFolder"]("Cal-Results :: Verify if Reject button got enabled");
    
    //Get reject control in Cal-results screen
    var btnRejectCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","btnReject");
    
    //verify reject button is enabled
    if(VerifyObjectEnabled(btnRejectCtrl))
    {
      Log["Message"]("Reject button got enabled after the process");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Reject button is not enabled after the process");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function FilterAttributesFromCalResults(attributeList)
{
 try
 {   
   Log["AppendFolder"]("Filtering attributes for Cal-Results");
    
   //get control of result filter grid
   var resultFilterCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","resultFilter");
   
   var isAttrFiltered = true;
   
   if(VerifyObjectExists(resultFilterCtrl))
   {
      var attrFilterCtrls = GetAllChildren(resultFilterCtrl,"ClassName","CheckBox");
      
      //Loop till number of attributes to get filtered    
      for(var j=0;j<attrList.length;j++)
      {  
        //Get the atrribute checkbox control
        var actualAttributeCtrl = Getchild(resultFilterCtrl,"ObjectIdentifier",attrList[j]);
        
        var actualAttribute = GetNativeObjectName(actualAttributeCtrl);
          
        //Verify current atrribute name matched desired attribute
        if(actualAttribute == attrList[j])
        {
          //Click the attribute from the filter
          ClickCtrl(actualAttribute);
          Log["Message"]("Attribute filter '"+attrList[j]+"' got selected");         
        }
        else
        {
          Log["Error"]("Displayed attribute '"+actualAttribute["NativeUIAObject"]["Name"]+"' is not equal to expected attribute '"+attrList[j]+"'")
          isAttrFiltered = false;
        }

      }
      
      //Check if all attributes got filtered
      if(!isAttrFiltered)
      {
        Log["Error"]("Some attributes failed to get filtered");
        Log["PopLogFolder"]();
        return false;
      }
      
      Log["PopLogFolder"]();
      return true;      
   }
   else
   {
     Log["Error"]("Result filters doesn't exists for calibration results");
     Log["PopLogFolder"]();
     return false;
   }
  
 }
 catch(e)
 {
   Log["Error"]("Exception : " + e["description"]);
   Log["PopLogFolder"]();
   return false;
 }
}

function FilterAnalyzerInCalResults(analyzer)
{
  try
  {
    Log["AppendFolder"]("Cal-Results :: Select analyzer '"+analyzer+"' in filter");
    
    //analyzer combobox control
    var analyzerComboCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","analyzerFilter");
  
    if(VerifyObjectExists(analyzerComboCtrl))
    {
      //Select analyzer type from combobox
      SelectComboBoxItem(analyzerComboCtrl,analyzer);
      
      var selectedAnalyzer = analyzerComboCtrl["Selection"].toArray()[0];
      
      //Verify if analyzer got selected
      if(aqString["Find"](aqString["ToLower"](selectedAnalyzer),aqString["ToLower"](analyzer)) != 1)
      {
        Log["Message"]("Analyzer "+analyzer+" is selected");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Failed to select analyzer '"+analyzer+"' in filter");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Analyzer filter doesn't exists in Cal-Results");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function FilterAssayNameInCalResults(assayName) 
{
    try
    {
      Log["AppendFolder"]("Cal-Results :: Select assay '"+assayName+"' in filter");
      
      //get assay name control
      var assayNameCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","assayNameFilter");
      
      if(VerifyObjectExists(assayNameCtrl))
      {
        //Select assayname from combobox
        SelectComboBoxItem(assayNameCtrl,assayName);
        
        var selectedAssayName = assayNameCtrl["Selection"].toArray()[0];
      
        //Verify if the assayname got selected in the combobox
        if(aqString["Find"](aqString["ToLower"](selectedAssayName),aqString["ToLower"](assayName)) != 1)
        {
          Log["Message"]("Assay Name "+assayName+" is selected in Cal-Results filter");
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          Log["Error"]("Failed to select assay name '"+assayName+"' in Cal-Results filter");
          Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Error"]("AssayName filter doesn't exists in Cal-Results");
        Log["PopLogFolder"]();
        return false;
      }     
    }
    catch(e)
    {
      Log["Error"]("Exception : " + e["description"]);
      Log["PopLogFolder"]();
      return false;
    }
}

function FilterReagentLotInCalResults(reagentLot)
{
  try
  {
    Log["AppendFolder"]("Cal-Results :: Select reagent lot '"+reagentLot+"' in filter");
    
    //Get reagent lot control
    var reagentLotComboCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","");
    
    if(VerifyObjectExists(reagentLotComboCtrl))
    {
      //Select the reagent from the combobox
      SelectComboBoxItem(reagentLotComboCtrl,reagentLot);
      
       var selectedreagentLot = reagentLotComboCtrl["Selection"].toArray()[0];
      
        //Verify if the reagent got selected
        if(aqString["Find"](aqString["ToLower"](selectedreagentLot),aqString["ToLower"](reagentLot)) != 1)
        {
          Log["Message"]("Reagent lot "+reagentLot+" is selected in Cal-Results filter");
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          Log["Error"]("Failed to select reagent lot '"+reagentLot+"' in Cal-Results filter");
          Log["PopLogFolder"]();
          return false; 
        }
    }
    else
    {
      Log["Error"]("Reagent Lot filter doesn't exists in Cal-Results");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function FilterCalResults(analyzer,assayName,reagentLot,attributeList)
{
  try
  {
    Log["AppendFolder"]("Cal-Results :: Filtering Cal results");
    
    //Filter analyzer
    if(!FilterAnalyzerInCalResults(analyzer))
    {
      Log["Error"]("Unable to select analyzer in Cal-Results filter");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Filter assay name
    if(!FilterAssayNameInCalResults(assayName))
    {
      Log["Error"]("Unable to select assay name in Cal-Results filter");
      Log["PopLogFolder"]();
      return false;
    }
    
    //filter reagent lot 
    if(!FilterReagentLotInCalResults(reagentLot))
    {
      Log["Error"]("Unable to selet reagent lot in Cal-Results filter");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Filter atributes
    if(!FilterAttributesFromCalResults(attributeList))
    {
      Log["Error"]("Unable to select attribute in Cal-Results filter");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Filtered Cal-Results")
    Log["PopLogFolder"]();
    return true; 
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationResultIsPopulated()
{
  try
  {
    Log["AppendFolder"]("Cal-Results :: Verify calibration results grid is populated");
    
    //Get calibration results grid control
    var calibrationResultGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","gridCalibrationResults"); 
    
    //Verify calibration result grid exist
    if(VerifyObjectExists(calibrationResultGridCtrl))
    {
      //get the row details from the datagrid    
      var resultRowsCtrls = GetSFGridRowDetails(calibrationResultGridCtrl);
    
      if(!resultRowsCtrls)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["Error"]("Calibration results grid is not populated");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Message"]("Calibration results grid is populated");
        Log["PopLogFolder"]();
        return true; 
      }    
    } else {
      Log["Error"]("Calibration results grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    }  
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationResultExist(assayName,lotId)
{
 try
 {
   Log["AppendFolder"]("Cal-Def results :: Verify Calibration exist in Cal-Results grid")
    
   //Get calibration result grid control
    var calibrationResultGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","gridCalibrationResults"); 
    
    var isCalFound = true;
    
    //Verify calibration results grid is displayed
    if(VerifyObjectExists(calibrationResultGridCtrl))
    {
      Delay(15000,"Waiting for Cal's to be displayed in Calibration Results : Maxwait(15 sec)")
      
      //Get Lot column index number
      var lotColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalLot");
      
      //Get assayname column index number
      var assayNameColumIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","Assay");
      
      //get analyzer column index number
      var analyzerColumIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","Analyzer");
      
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(calibrationResultGridCtrl);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](),"There are no records displayed in the calibration result datagrid");
        Log["PopLogFolder"]();
        return false;
      }
    
      //Loop till total row count exist in grid
      for(var i=0;i<rowDetails.length;i++)
      {
        var assayNameCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",assayNameColumIndex);
              
        var currentAssayNameCtrl = Getchild(assayNameCtrl,"ClassName","TextBlock");
        
        //Get native object name of current assay control
        var currentAssayName = GetNativeObjectName(currentAssayNameCtrl);
        
        var lotCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",lotColumnIndex);
              
        var currentLotIdCtrl = Getchild(lotCtrl,"ClassName","TextBlock");
                
        //Get native object name of current lot ID control
        var currentLotId = GetNativeObjectName(currentLotIdCtrl);
        
        //Verify if the current assay name and current lot ID is as expected
        if(currentAssayName == assayName && currentLotId == lotId)
        {
          isCalFound = true;
          Log["Message"]("Calibration order with assayname '"+currentAssayName+"', analyzer '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is displayed in calibrationResults grid");
          break;         
        }
        else
        {
          isCalFound = false;
        }
        
      }
      
      //Check if order is found
      if(!isCalFound)
      {
        Log["Error"]("Calibration order with assayname '"+currentAssayName+"', analyzer '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is not displayed in calibrationResults grid")
        Log["PopLogFolder"]();
        return false;
      }
      
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Calibration result grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    }
 }
 catch(e)
 {
   Log["Error"]("Exception : " + e["description"]);
   Log["PopLogFolder"]();
   return false;
 }
}

function AcceptCalibrationResult(assayName,lotId,calStatus,comments)
{
  try
  {
    Log["AppendFolder"]("Accept calibration result with assayName:"+assayName+", lotId:"+lotId+", calStatus:"+calStatus+"");
    
    //get calibration result grid control
    var calibrationResultGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","gridCalibrationResults"); 
    
    var isCalFound = true;
    
    //Verify calibration result grid exist
    if(VerifyObjectExists(calibrationResultGridCtrl))
    {
      Delay(15000,"Waiting for Cal's to be displayed in Calibration Results : Maxwait(15 sec)")
      
      //Get lot coumn index number
      var lotColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalLot");
      
      //Get assayname column index number
      var assayNameColumIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","Assay");
      
      //Get cal status column index number
      var calStatusColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalStatus");
      
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(calibrationResultGridCtrl);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["PopLogFolder"]();
        return false;
      }
      
      for(var i=0;i<rowDetails.length;i++)
      {
        var assayNameCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",assayNameColumIndex);
        
        //get current assay name      
        var currentAssayName = Getchild(assayNameCtrl,"ClassName","TextBlock")["NativeUIAObject"]["Name"];
        
        var lotCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",lotColumnIndex);
        
        //Get current lot ID      
        var currentLotId = Getchild(lotCtrl,"ClassName","TextBlock")["NativeUIAObject"]["Name"];
        
        var calStatusCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",calStatusColumnIndex);
        
        //Get current cal status
        var currentCalStatus = Getchild(calStatusCtrl,"ClassName","TextBlock")["NativeUIAObject"]["Name"];
        
        //Verify current assayname, current lot ID, current cal status is as expected
        if(currentAssayName == assayName && currentLotId == lotId && currentCalStatus == calStatus)
        {
          isCalFound = true;
          Log["Message"]("Calibration result with assayname '"+currentAssayName+"', status '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is displayed in calibrationResults grid");
          
          //Click the row
          ClickCtrl(rowDetails[i]);
          
          //Verify if accept button is enabled
          if(VerifyAcceptIsEnabled())
          {    
           var acceptBtnCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","btnAccept");
           
           //Click accept button
           ClickCtrl(acceptBtnCtrl);
       
           var acceptPopupCtrl = GetAutomationIDControl("SystemHealthCheck","alertDialog");
           
           //Verify accept comments dialog box
           if(VerifyObjectExists(acceptPopupCtrl))
           {      
             //Enter comments
             SetValue(Getchild(acceptPopupCtrl,"ObjectIdentifier","Comments"),comments);
             
             ClickCtrl(acceptPopupCtrl,"AutomationId","PrimaryButton");
             
             //Delaying 10 seconds to see the valis message
             Delay(10,"Waiting for result status to be updated : Maxwait(10s)");
             
             calStatusCtrl["Refresh"]();
           
             //Get current displayed cal status from the row
             var currentCalStatusCtrl = Getchild(calStatusCtrl,"ClassName","TextBlock");
             
             var currentCalStatus = GetNativeObjectName(currentCalStatusCtrl);
           
             //Check if the status is "Valid"
             if(currentCalStatus == "Valid")
             {
              Log["Message"]("Calibration result is accepted and Cal status is :"+currentCalStatus+"");
              Log["PopLogFolder"]();
              return true;
             }
             else
             {
              Log["Error"]("Calibration status is not valid");
              Log["PopLogFolder"]();
              return false;
             }
           }
           else
           {
             Log["Error"]("Accept calibration comments dialog didn't appear");
             Log["PopLogFolder"]();
             return false;
           }
          
          }
          else
          {
            Log["Error"]("Accept button is not enabled");
            Log["PopLogFolder"]();
            return false;
          }                   
        }
        else
        {
          isCalFound = false;
        }
        
      }
      
      if(!isCalFound)
      {
        Log["Error"]("Calibration order with assayname '"+currentAssayName+"', analyzer '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is not displayed in calibrationResults grid")
        Log["PopLogFolder"]();
        return false;
      }
      
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Calibration result grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    }
    
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function RejectCalibrationResult(assayName,lotId,calStatus,comments)
{
  try
  {
    Log["AppendFolder"]("Reject calibration result with assayName:"+assayName+", lotId:"+lotId+", calStatus:"+calStatus+"");
    
    //get calibration result grid control
    var calibrationResultGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","gridCalibrationResults"); 
    
    var isCalFound = true;
    
    if(VerifyObjectExists(calibrationResultGridCtrl))
    {
      Delay(15000,"Waiting for Cal's to be displayed in Calibration Results : Maxwait(15 sec)")
      
      //Get lot column index
      var lotColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalLot");
      
      //Get assay name column index
      var assayNameColumIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","Assay");
      
      //Get cal status column index
      var calStatusColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalStatus");
      
      //Get data rows 
      var rowDetails = GetSFGridRowDetails(calibrationResultGridCtrl);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](),"There are no records displayed in the calibration result datagrid");
        Log["PopLogFolder"]();
        return false;
      }
     
      //Loop tip row exist
      for(var i=0;i<rowDetails.length;i++)
      {
        var assayNameCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",assayNameColumIndex);
              
        var currentAssayNameCtrl = Getchild(assayNameCtrl,"ClassName","TextBlock");
        
        //Get current assay name from current assya controls
        var currentAssayName = GetNativeObjectName(currentAssayNameCtrl);
        
        var lotCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",lotColumnIndex);
              
        var currentLotIdCtrl = Getchild(lotCtrl,"ClassName","TextBlock");
        
        //Get current lot ID from current lOT ID control
        var currentLotId = GetNativeObjectName(currentLotIdCtrl);
        
        var calStatusCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",calStatusColumnIndex);
        
        var currentCalStatusCtrl = Getchild(calStatusCtrl,"ClassName","TextBlock");
        
        //Get current cal status from current cal status control
        var currentCalStatus = GetNativeObjectName(currentCalStatusCtrl);
        
        //Verify if currentassayname, lot, status is as equal as expected
        if(currentAssayName == assayName && currentLotId == lotId && currentCalStatus == calStatus)
        {
          isCalFound = true;
          Log["Message"]("Calibration result with assayname '"+currentAssayName+"', status '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is displayed in calibrationResults grid");
          
          //Click the row
          ClickCtrl(rowDetails[i]);
          
          //Verify if reject button is enabled
          if(VerifyRejectIsEnabled())
          {
            //Get reject control
            var btnRejectCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","btnReject");
            
            ClickCtrl(btnRejectCtrl);
          
            //get reject popup control
            var rejectPopupCtrl = GetAutomationIDControl("SystemHealthCheck","alertDialog");
           
          //Verify accept comments dialog box
           if(VerifyObjectExists(rejectPopupCtrl))
           {      
             //Enter comments
             SetValue(Getchild(rejectPopupCtrl,"ObjectIdentifier","Comments"),comments);
             
             ClickCtrl(rejectPopupCtrl,"AutomationId","PrimaryButton");
             
             //Delaying 10 seconds to see the valis message
             Delay(10,"Waiting for result status to be updated : Maxwait(10s)");
  
           calStatusCtrl["Refresh"]();
           
           var currentCalStatusCtrl = Getchild(calStatusCtrl,"ClassName","TextBlock");
           
           //Get current cal status displayed right now
           var currentCalStatus = GetNativeObjectName(currentCalStatusCtrl);
           
           //Verify current ststus is "invalid"
           if(aqString["ToLower"](currentCalStatus) == "invalid")
           {
            Log["Message"]("Calibration result is rejected and Cal status is :"+currentCalStatus+"");
            Log["PopLogFolder"]();
            return true;
           }
           else
           {
             Log["Error"]("Calibration status is not Invalid");
             Log["PopLogFolder"]();
             return false;
           }
           }
           else
           {
             Log["Error"]("Reject comments dialog didn't appear");
             Log["PopLogFolder"]();
             return false;
           }
          }
          else
          {
            Log["Error"]("Reject button is not enabled");
            Log["PopLogFolder"]();
            return false;
          }                   
        }
        else
        {
          isCalFound = false;
        }
        
      }
      
      if(!isCalFound)
      {
        Log["Error"]("Calibration order with assayname '"+currentAssayName+"', analyzer '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is not displayed in calibrationResults grid")
        Log["PopLogFolder"]();
        return false;
      }
      
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Calibration result grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    } 
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationResults(lotId,calStatus)
{
  try
  {
    Log["AppendFolder"]("Cal-Def results :: Verify Calibration results")
    
    //Calibration result grid control
    var calibrationResultGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","gridCalibrationResults"); 
    
    //Verify calibration results grid exist
    if(VerifyObjectExists(calibrationResultGridCtrl))
    {
      Delay(15000,"Waiting for Cal's to be displayed in Calibration Results : Maxwait(15 sec)")
      
      //Get lot column index
      var lotColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalLot");
      
      //Get Cal status column index
      var calStatColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalStatus");
      
      var isStatus = false;
      var isStatusError = false;
      var isRecordExist = false;
      var count = 0; 
      
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(calibrationResultGridCtrl);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](),"There are no records displayed in the calibration result datagrid");
        Log["PopLogFolder"]();
        return false;
      }
    
      //iterate for count 96 with 5sec wait per iteration (8 mins per Cal)
      while(count < 96) 
      {    
        //Iterate the datarows
        for(var i=0; i<rowDetails.length; i++) 
        {
      
          var gridCellList = GetAllChildren(rowDetails[i],"ClassName", "GridCell").reverse();
        
          //get actual LOT id from the row
          var calLotIdCtrl = Getchild(gridCellList[lotColumnIndex-1],"ClassName", "GridCell");
        
          var actualLotIdCtrl = Getchild(calLotIdCtrl,"ClassName","TextBlock");
        
          var actualLotId = GetNativeObjectName(actualLotIdCtrl)
        
          //Verifying the LOT ID displayed in the row matching expected sample id
          if(actualLotId == lotId)
          {
            Log["Message"]("Lot ID '" + lotId + "' located in the calibration results datagrid");
            isRecordExist = true;
          
            //get the actual status displayed for the sample id in the row
                    
            var actualStatusCtrl = Getchild(rowDetails[i],"AutomationId", "txtblockCalStatus");
            var actualStatus = GetNativeObjectName(actualStatusCtrl);
          
            //Verifying the status 
            if ((actualStatus == "Invalid") && (actualStatus != calStatus))
            {
              //if the status is( "Invalid")
              Log["Enabled"] = true;
              Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Cal status for " + lotId + " is displayed as: " + actualStatus);
              isStatus = false;
              isStatusError = true;
              break;
            } else if (actualStatus != calStatus && actualStatus != "AwatingAcceptance") {
              //if the status is not the expected status and status is not "Awaiting Acceptance"
              Log["Enabled"] = true;
              aqUtils["Delay"](5000, "Waiting to the Cal '" + lotId + "' to get processed, Waiting Count Iteration : " + count);
              //count= count+1;
              Log["Enabled"] = false;
              break;
            } else {
              //if the status matches the expected status
              Log["Enabled"] = true;
              Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Cal status for " + lotId + " is displayed as: " + actualStatus);
              isStatus = true;
              break;
            }          
          }
        }
      
        //check if record exists until 5 iteration of while loop
        if(!isRecordExist && count >= 5)
        {
          break;
        } else {
          count = count + 1;
        }
      
        //Verify the status is matching with the expected status for the given sample id -> else continue the loop to next row
        if(isStatus) 
        {
            break;
        } else if (isStatusError) {
            break;
        } else {
            rowDetails =  GetSFGridRowDetails(calibrationResultGridCtrl);
        }             
      }
    
      Log["Enabled"] = true;
    
      if(isStatus) 
      {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), lotId + " is showing up on the Sample list with the status of '" + sampleStatus + "'");
        Log["PopLogFolder"]();
        return true;
      } else if(!isStatus && !isRecordExist) {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), lotId + " is not showing up on the Sample list after waiting for 8 minutes");
        Log["PopLogFolder"]();
        return false;
      } else {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), lotId + " is showing up on the Sample list, But status does not match as expected");
        Log["PopLogFolder"]();
        return false;
      }    
    } else {
      Log["Error"]("Calibration results grid doesn't exists");
      return false;
    }    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function DeleteCalibrationResult(assayName,lotId,calStatus)
{
   try
  {
    Log["AppendFolder"]("Delete calibration result with assayName:"+assayName+", lotId:"+lotId+", calStatus:"+calStatus+"");
    
    //get calibration result grid control
    var calibrationResultGridCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","gridCalibrationResults"); 
    var isCalFound = true;
    
    //Verify calibration results grid exist
    if(VerifyObjectExists(calibrationResultGridCtrl))
    {
      Delay(15000,"Waiting for Cal's to be displayed in Calibration Results : Maxwait(15 sec)")
      
      //Get lot column index
      var lotColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalLot");
      
      //Get assay name column index
      var assayNameColumIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","Assay");
      
      //Get cal status column index
      var calStatusColumnIndex = GetDataGridColumnIndexFromMetadataSheet("CalibrationOverview_CalibrationResults","CalStatus");
      
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(calibrationResultGridCtrl);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["PopLogFolder"]();
        return false;
      }
      
      //Loop till row details exist
      for(var i=0;i<rowDetails.length;i++)
      {
        var assayNameCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",assayNameColumIndex);
              
        var currentAssayNameCtrl = Getchild(assayNameCtrl,"ClassName","TextBlock");
        
        //get current assay name from assay name control
        var currentAssayName = GetNativeObjectName(currentAssayNameCtrl);
        
        var lotCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",lotColumnIndex);
              
        var currentLotIdCtrl = Getchild(lotCtrl,"ClassName","TextBlock");
        
        //Get current lot ID from current LOT ID control
        var currentLotId = GetNativeObjectName(currentLotIdCtrl);
        
        var calStatusCtrl = Getchild(rowDetails[i],"ObjectGroupIndex",calStatusColumnIndex);
        
        var currentCalStatusCtrl = Getchild(calStatusCtrl,"ClassName","TextBlock");
        
        //Get current cal status from cal status control
        var currentCalStatus = GetNativeObjectName(currentCalStatusCtrl);
        
        //Verify the current row details is as expected -> continue to delete if true
        if(currentAssayName == assayName && currentLotId == lotId && currentCalStatus == calStatus)
        {
          isCalFound = true;
          Log["Message"]("Calibration result with assayname '"+currentAssayName+"', status '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is displayed in calibrationResults grid");
          
          //Click the row
          ClickCtrl(rowDetails[i]);
    
           var deleteBtnCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationResults","btnDeleteOrder");
           
           //Verify delete button control is enabled
           if(VerifyObjectEnabled(deleteBtnCtrl))
           {        
             //Click delete
             ClickCtrl(deleteBtnCtrl);
              
             //Get delete confrimation alert control
             var alertDialogCtrl = GetAutomationIDControl("SystemHealthCheck","alertDialog");
             
             if(VerifyObjectExists(alertDialogCtrl))
             {
               var alertTXT = Getchild(alertDialogCtrl,"AutomationId","AlertTitleTextBlock")["NativeUIAObject"]["Name"];
               
               //Verify text displayed on confirmation alert popup
               if(alertTXT == "Confirm Cancel Order")
               {
                  var yesBtnCtrl = Getchild(alertDialogCtrl,"AutomationId","PrimaryButton");
                  
                  ClickCtrl(yesBtnCtrl);
                  
                  Log["Message"]("Clicked YES in delete confrimation alert");
                  
                  Delay(7000,"Waiting for Cal-order to be deleted and removed from results grid : Maxwait(7Sec)");
                  
               //get the row details from the datagrid    
              var rowDetails = GetSFGridRowDetails(calibrationResultGridCtrl);
    
              if(!rowDetails)
              {
                Log["Message"]("Cal-Order is deleted");
                Log["PopLogFolder"]();
                return true;              
              } else {   
                //Get current lot ID control
                var currentLotId = Getchild(lotCtrl,"ClassName","TextBlock")["NativeUIAObject"]["Name"];
            
                //Verify if current lot ID is expected lotID
                if(currentLotId != lotId)
                {
                  Log["Message"]("Cal-Order with assayName:"+assayName+", lotId:"+lotId+", calStatus:"+calStatus+" has been deleted");
                  Log["PopLogFolder"]();
                  return true;        
                }
                else
                {
                  Log["Error"]("Cal-Order with assayName:"+assayName+", lotId:"+lotId+", calStatus:"+calStatus+" is not deleted")
                  Log["PopLogFolder"]();
                  return false; 
                }
                
                }          
               }
               else
               {
                 Log["Error"]("Cancel order text didn't appear in popup");
                 Log["PopLogFolder"]();
                 return false;
               } 
             }
             else
             {
               Log["Error"]("Delete confirmation poup doesn't exist")
               Log["PopLogFolder"]();
                 return false;
             }
             
           }
           else
           {
             Log["Error"]("Delete button doesn't exist/enabled");
             Log["PopLogFolder"]();
             return false;
           }
                            
        }
        else
        {
          isCalFound = false;
        }
        
      }
      
      //Verify if calibration is found
      if(!isCalFound)
      {
        Log["Error"]("Calibration order with assayname '"+currentAssayName+"', analyzer '"+currentAnalyzerName+"', LotID '"+currentLotId+"' is not displayed in calibrationResults grid")
        Log["PopLogFolder"]();
        return false;
      }
      
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Calibration result grid doesn't exist");
      Log["PopLogFolder"]();
      return false;
    }
    
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//---------------------------------------Bussiness Logic Methods (Calibration Orders & Calibration Results)---------------------------

function CreateCalibrationOrder(analyzer,assayName,materialNames)
{
  try
  {
    Log["AppendFolder"]("Cal-Def orders :: Create calibration order in calibration order screen");
    
    //Verify calibration orders grid displayed
    if(!VerifyCalibrationOrdersGridIsDisplayed())
    {
      Log["Error"]("Calibration orders page is not displayed");
      Log["PopLogFolder"]();
      return false;
    }
       
    //Select Analyzer
    if(!SelectAnalyzer(analyzer))
    {
      Log["Error"]("Failed to select analyzer '"+analyzer+"'");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Select and Select Assay
    if(!SearchAndSelectAssay(assayName))
    {
      Log["Error"]("Failed to search and select assay '"+assayName+"'");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify is no cal lot found for the assay
    if(isNoCalLotFoundfortheAssay() == 0)
    {
      Log["Error"]("Verification of if no call Lot found for the assay, failed");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify calibration order is populated
    if(VerifyCalibrationOrdersGridIsPopulated())
    {
      //Verify Calibration order created
      if(!VerifyCalibrationOrdersAddedToCalibrationOrderGrid(materialNames,assayName))
      {
        Log["Error"]("Failed to verify if the calibration orders are created");
        Log["PopLogFolder"]();
        return false;
      }
      
    }       //Verify Calibrator materials grid is populated    
    else if(VerifyCalibratorMaterialGridIsPopulated())
    {
      //Add calibrator material to calibration order
      if(!AddCalibratormaterialToCalibratorOrder(materialNames,materialIds,assayName))
      {
        Log["Error"]("Failed to add calibration materials to calibration orders");
        Log["PopLogFolder"]();
        return false;  
      }
    
      //Verify Calibration order created
      if(!VerifyCalibrationOrdersAddedToCalibrationOrderGrid(materialNames,assayName))
      {
        Log["Error"]("Failed to verify if the calibration orders are creted");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Cal Materials and Cal Orders are empty");
      Log["PopLogFolder"]();
      return false;
    }
   
    //Click place order
    if(!ClickPlaceOrder())
    {
      Log["Error"]("Failed to click place order");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify if all the orders are placed
    if(!ConfirmPlaceOrder())
    {
      Log["Error"]("Failed to place all the orders");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Calibration orders created for assay '"+assayName+"'");
    Log["PopLogFolder"]();
    return true; 
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyAndAcceptCalibrationResuts(assayName,analyzer,lotId,calStatus)
{
  try
  {
    Log["AppendFolder"]("Verify and Accept Calibration result with assayname:"+assayName+", analyzer:"+analyzer+", lotId:"+lotId+"");
    
    //Verify the calibration exist in grid
    if(VerifyCalibrationResultExist(assayName,lotId))
    {
      Log["Error"]("Failled to verify if the calibration is in Cal-Result grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Filter analyzer in Cal-Results
    if(!FilterAnalyzerInCalResults(analyzer))
    {
      Log["Error"]("Failed to filter analyzer '"+analyzer+"' in Calibration-Results");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify the result of the calibration
    if(VerifyCalibrationResults(assayName,lotId,calStatus))
    {
      Log["Error"]("Failed to verify calibration-Result for expected status:"+calStatus+"");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Validate the calibration result(Click accept)
    if(!AcceptCalibrationResult(assayName,lotId,calStatus))
    {
      Log["Error"]("Failed to validate calibration result");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Verified and accepted Calibration-Result");
    Log["PopLogFolder"]();
    return true;
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyAndRejectCalibrationResuts(assayName,analyzer,lotId,calStatus)
{
  try
  {
    Log["AppendFolder"]("Verify and Accept Calibration result with assayname:"+assayName+", analyzer:"+analyzer+", lotId:"+lotId+"");
    
    //Verify the calibration exist in grid
    if(VerifyCalibrationResultExist(assayName,lotId))
    {
      Log["Error"]("Failled to verify if the calibration is in Cal-Result grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Filter analyzer in Cal-Results
    if(!FilterAnalyzerInCalResults(analyzer))
    {
      Log["Error"]("Failed to filter analyzer '"+analyzer+"' in Calibration-Results");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify the result of the calibration
    if(VerifyCalibrationResults(assayName,lotId,calStatus))
    {
      Log["Error"]("Failed to verify calibration-Result for expected status:"+calStatus+"");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Validate the calibration result(Click reject)
    if(!RejectCalibrationResult(assayName,lotId,calStatus))
    {
      Log["Error"]("Failed to rejet calibration result");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Verified and rejected Calibration-Result");
    Log["PopLogFolder"]();
    return true;
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ClearCalibrationOrders()
{
  try
  {
    Log["AppendFolder"]("Cal-Orders :: Clear all orders from Calibration orders screen");
    var isAllCleared = true;
      
    //Verify if calibrationmaterial and calibration orders grid's are displayed
    if(VerifyCalibratorMaterialsGridIsDisplayed() && VerifyCalibrationOrdersGridIsDisplayed())
    {    
      //get clear calibration order button control
      var clearCalibordersbtnCtrl = GetAutomationIDControl("CalibrationOverview_CalibrationOrders","btnClearOrders");
      
      //Click Clear
      ClickCtrl(clearCalibordersbtnCtrl);
       
      Log["AppendFolder"]("Verify Calibration materials grid is cleared");
      //Verify calibration material grid is populated
      if(VerifyCalibratorMaterialGridIsPopulated())
      {
        Log["Error"]("Calibration Materials grid is not cleared") 
        Log["PopLogFolder"]();
        isAllCleared =  false; 
      }
      else
      {
        Log["Message"]("Calibration Mterials grid is cleared");
        Log["PopLogFolder"]();
      }
   
      Log["AppendFolder"]("Verify Calibration Orders grid is cleared");
      //Verify calibration orders grid is displayed
      if(VerifyCalibrationOrdersGridIsPopulated())
      {
        Log["Error"]("Calibration Orders grid is not cleared") 
        Log["PopLogFolder"]();
        isAllCleared =  false; 
      }
      else
      {
        Log["Message"]("Calibration Orders grid is cleared");
        Log["PopLogFolder"]();
      }
      
      //Verify all grids cleared
      if(!isAllCleared)
      {
        Log["Error"]("Failed to clear Calibration Orders from Calibration orders screen");
        Log["PopLogFolder"]();
        return false;
      }
      
      Log["Message"]("Calibration oredrs and Calibration materials are cleared from Clibration orders screen");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Cal-Materials & Cal-Orders grid are not displayed/exist");
      Log["PopLogFolder"]();
      return false;
    }   
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function DeleteOrderFromCalibrationResults(assayName,analyzer,lotId)
{
  try
  {
    Log["AppendFolder"]("Verify and Delete Calibration order with assayname:"+assayName+", analyzer:"+analyzer+", lotId:"+lotId+"");
    
    //Verify the calibration exist in grid
    if(VerifyCalibrationResultExist(assayName,lotId))
    {
      Log["Error"]("Failled to verify if the calibration is in Cal-Result grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Filter analyzer in Cal-Results
    if(!FilterAnalyzerInCalResults(analyzer))
    {
      Log["Error"]("Failed to filter analyzer '"+analyzer+"' in Calibration-Results");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify the result of the calibration
    if(VerifyCalibrationResults(assayName,lotId,calStatus))
    {
      Log["Error"]("Failed to verify calibration-Result for expected status:"+calStatus+"");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Delete the calibration result
    if(!DeleteCalibrationResult(assayName,lotId,calStatus))
    {
      Log["Error"]("Failed to delete calibration result");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Deleted Calibration Result from Claibration result screen");
    Log["PopLogFolder"]();
    return true;
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


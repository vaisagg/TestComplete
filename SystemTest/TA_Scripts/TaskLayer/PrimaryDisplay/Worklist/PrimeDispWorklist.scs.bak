//USEUNIT TCNativeLibraries
//USEUNIT ControlAccessLibrary
//USEUNIT PrimeDispAuthentication


//------------------------------Move Samples to Historical -------------------------------

//***************************************************************************************
//*   Function Name       : MoveAllSamplesToHistoricalFromPrimeDisp()
//*   Function Description: This function is used to move all the order items to the historical records
//*   Input               : SampleID
//*   Output              : return true, if the test result is generated for the given sample id with in time frame
//*                         return false, if the test result is not generated for the given sample id with in time frame
//*   Date of Creating    : 17 June 2019
//*   Last Modified date  : 05 July 2019
//*   Created By          : Prabu Ramaraj
//*****************************************************************************************
function MoveAllSamplesToHistorical()
{
  try
  {    
    Log["AppendFolder"]("Worklist::Move all sample records to historical from primary display ui");
    
    //Get the worklist datagrid from worklist screen
    var worklistDatGridContainerObj = GetAutomationIDControl("Worklist", "grdWorkList");
      
    //Check the worklist datagrid is displayed
    if(VerifyObjectExists(worklistDatGridContainerObj)) 
    {
      //Apply filter for all the samples
      if(!SelectOrderTimeAsAllInWorklistFilter())
      {
        Log["Error"]("Unable to select the order time as all in worklist filter");
        Log["PopLogFolder"](); 
        return false;
      }
	  
      //Check if grid has rows
      var worklistDataGridObj = Getchild(worklistDatGridContainerObj, "ClassName", "GridRow");
      
      //Wait for the worklist screen data to be loaded
      WaitForProgressRingToDisappear(30);
    
      //Check the worklist datagrid is having rows
      if(worklistDataGridObj["Exists"])
      {        
        //Select the select all checkbox of the worklist datagrid
        if(ClickOnSelectAllCheckBoxInWorklistDataGrid())
        {
          //Wait for the worklist screen data to be loaded
          WaitForProgressRingToDisappear(30); 
    
          //Click on the move to historical button
          if(!ClickOnMoveToHistoricalButton()) 
          {
            Log["PopLogFolder"](); 
            return false;
          }
    
          //Click yes to accept the Move Confirmation alert
          if(!AcceptMoveConfirmationPopup())
          {
            Log["PopLogFolder"](); 
            return false;
          }
            
          //Check the success / warning popup displayed and handle it
          if(!AcceptConfirmationWindow())
          {
            Log["PopLogFolder"](); 
            return false;
          }
          
          Log["PopLogFolder"]();
          return true;  
                         
        } 
        else 
        {
          Log["Error"]("Unable to select the select all checkbox");
          Log["PopLogFolder"](); 
          return false;          
        }        
      } 
      else 
      {
        Log["Message"]("There are no sample records available in the worklist screen to move to historical records");
        Log["PopLogFolder"](); 
        return true;
      }      
    } 
    else 
    {
      Log["Error"]("Navigation failed to visit 'WorkList' screen");
      Log["PopLogFolder"](); 
      return false;
    }  
  }
  catch (e)
  {
    Log["Error"]("Exception"+e["description"]);
    Log["PopLogFolder"](); 
    return false;
  }
}

function MoveAllSamplesToHistoricalWithPagination()
{
  try
  {  
    Log["AppendFolder"]("Worklist::Move all sample records to historical from primary display ui With Pagination");
    
    //Get the worklist datagrid from worklist screen
    var worklistDatGridContainerObj = GetAutomationIDControl("Worklist", "grdWorkList");
      
    //Check the worklist datagrid is displayed
    if(VerifyObjectExists(worklistDatGridContainerObj)) 
    {
      //Get the testcount Control
      var remainingTestCountCtrl=GetAutomationIDControl("Worklist", "lblTestCount");
      
      if(VerifyObjectExists(remainingTestCountCtrl))
      {
        var remainingTestCount=aqString["Trim"](remainingTestCountCtrl["Text"]["split"](":")[1]);    
      }
      else
      {
        Log["Error"]("Failed to get the number of Tests in Worklist Grid");
        return false;
      }
         
      while(remainingTestCount>0)
      {  
        Log["Message"]("Orders present in WorkList Grid :"+remainingTestCount);   
        
        //apply All Filter for OrderTime
        if(!SelectOrderTimeAsAllInWorklistFilter())
        {
          Log["Error"]("Unable to select the order time as all in worklist filter");
          Log["PopLogFolder"](); 
          return false;
        }
	  
        //Check if grid has rows
        var worklistDataGridObj = Getchild(worklistDatGridContainerObj, "ClassName", "GridRow");
      
        //Wait for the worklist screen data to be loaded
        WaitForProgressRingToDisappear(30);
    
        //Check the worklist datagrid is having rows
        if(worklistDataGridObj["Exists"])
        {        
          //Select the select all checkbox of the worklist datagrid
          if(ClickOnSelectAllCheckBoxInWorklistDataGrid())
          {
            //Wait for the worklist screen data to be loaded
            WaitForProgressRingToDisappear(30); 
    
            //Click on the move to historical button
            if(!ClickOnMoveToHistoricalButton()) 
            {
              Log["PopLogFolder"](); 
              return false;
            }
    
            //Click yes to accept the Move Confirmation alert
            if(!AcceptMoveConfirmationPopup())
            {
              Log["PopLogFolder"](); 
              return false;
            }
            
            //Check the success / warning popup displayed and handle it
            if(!AcceptConfirmationWindow())
            {
              Log["PopLogFolder"](); 
              return false;
            }
            
            //Wait for the worklist screen data to be loaded
            WaitForProgressRingToDisappear(30);
            
            var oldCount=remainingTestCount;
            
            //Get the current remainingcount displayed
            remainingTestCount=aqString["Trim"](remainingTestCountCtrl["Text"]["split"](":")[1]);
            
            //Check the remaining count decremented
            if(!oldCount-remainingTestCount>0)
            {
              Log["Error"]("Move To Historical is not performed");
              Log["PopLogFolder"]();
              return false;
            }
          } 
          else 
          {
            Log["Error"]("Unable to select the select all checkbox");
            Log["PopLogFolder"](); 
            return false;          
          }        
        } 
        else 
        {
          Log["Message"]("There are no sample records available in the worklist screen to move to historical records");
          Log["PopLogFolder"](); 
          return true;
        }
        
      }
    Log["PopLogFolder"](); 
    return true;        
    } 
    else 
    {
      Log["Error"]("Navigation failed to visit 'WorkList' screen");
      Log["PopLogFolder"](); 
      return false;
    }  
  }
  catch (e)
  {
    Log["Error"]("Exception"+e["description"]);
    Log["PopLogFolder"](); 
    return false;
  }
}

function MoveSpecificSamplesToHistorical(testName)
{
  try
  {    
    Log["AppendFolder"]("Worklist :: Move '" + testName + "' samples to historical")
       
    //Get the worklist datagrid from worklist screen
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
          
    //Check the worklist datagrid is displayed
    if(VerifyObjectExists(worklistDataGridObj)) 
    {
      //Apply filter for all the samples
      if(!SelectOrderTimeAsAllInWorklistFilter())
      {
        Log["Error"]("Unable to select the order time as 'All' in worklist filter");
        Log["PopLogFolder"](); 
        return false;
      }
	  
      //Wait for the worklist screen data to be refreshed and loaded
      WaitForProgressRingToDisappear(30);
    
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["PopLogFolder"]();
        return false;
      }
         
      var selectedCount = 0;  
      for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
      {
        var rowParent = rowDetails[rowIndex];
        var testNameCtrl = Getchild(rowParent,"AutomationId","HLBTestName");
        
        //check the test name is displayed
        if(testNameCtrl["ObjectIdentifier"] == testName)
        {
          Log["Message"]("Sample with '" + testName + "' is located in the worklist grid");
          
          //Get the check box control for the sample id
          var checkBox = Getchild(rowParent,"ClassName","CheckBox");              
                      
          //click on the checkbox for the sample id 
          ClickCtrl(checkBox);
          
          var sampleIDLinkCtrl = Getchild(rowParent, ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
          var sampleId = GetNativeObjectName(sampleIDLinkCtrl);
      
          Log["Message"]("Clicked on the checkbox for the sample id " + sampleId + "' to select");
          selectedCount++;
        }            
      }
       
      if(selectedCount > 0)
      {
        Log["Message"]("There are '" + selectedCount + "' samples selected for move to historical");
        
        //Click on the move to historical button
        if(!ClickOnMoveToHistoricalButton()) 
        {
          Log["Error"]("Failed to click on the move to historical button");
          Log["PopLogFolder"]();
          return false;
        }
    
        //Click yes to accept the Move Confirmation alert
        if(!AcceptMoveConfirmationPopup())
        {
          Log["Error"]("Failed to accept the move to historical confirmation popup");
          Log["PopLogFolder"](); 
          return false;
        }
            
        //Check the success / warning popup displayed and handle it
        if(!AcceptConfirmationWindow())
        {
          Log["Error"]("Unable to acccept the confirmation popup");
          Log["PopLogFolder"](); 
          return false;
        } 
        
        Log["Message"]("There are '" +  selectedCount + "' number of records with '" + testName + "' where moved to historical from worklist");
        Log["PopLogFolder"]();
        return true;
        
      } else {
        Log["Message"]("There are no records displayed with the test name '" + testName + "' in the worklist datagrid");
        Log["PopLogFolder"]();
        return true;
      }                
    } else {
      Log["Error"]("Unable to locate the worklist data grid");
      Log["PopLogFolder"](); 
      return false;
    }      
  }
  catch(e)
  {
     Log["Error"]("Exception : " + e["description"]);
     Log["PopLogFolder"]();
     return false;  
  }
}

function CheckWorklistDataGridDoesnotHaveAnyRecords()
{
  try
  { 
    Log["AppendFolder"]("Worklist:: Check No Records Displayed in Worklist DataGrid");
    
    //Get the worklist datagrid from worklist screen
    var worklistDatGridContainerObj = GetAutomationIDControl("Worklist", "grdWorkList");
    var worklistDataGridObj = Getchild(worklistDatGridContainerObj, "ClassName", "GridRow");
            
    //Check the record count displayed in the worklist grid row
    if(!worklistDataGridObj["Exists"])
    {
      Log["Message"]("All the sample records displayed in the worklist datagrid has been successfully move to historical");
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Move to historical operation passed");
      Log["PopLogFolder"](); 
      return true;
    } else {
      Log["Error"]("Move to historical operation failed, Some of the sampes records has not been moved to historical");
      Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Move to historical operation failed");
      Log["PopLogFolder"](); 
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"](); 
    return false;
  }
}

//Added by Prabu Ramaraj
function SelectOrderTimeAsAllInWorklistFilter()
{
  try
  {
    Log["AppendFolder"]("Worklist:: Select Order Time in worklist filter as 'All'");
    var orderTimeCtrl = GetAutomationIDControl("Worklist", "cbOrderTime")
    
    //Check the order time combo box is displayed
    if(VerifyObjectExists(orderTimeCtrl)) 
    {
      Log["Message"]("Located the combo box to select order time");
      
      //Select the specimen type from combobox
      SelectComboBoxItem(orderTimeCtrl, "All");
      
      //Get the selected text value from specimen type combobox
      var selectedValue = orderTimeCtrl["Selection"].toArray()[0];
      
      //Check the selected specimen is valid
      if(aqString["ToLower"](selectedValue) == aqString["ToLower"]("All"))
      {
        Log["Message"]("Order Time 'All' has been selected successfully in combo box");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Unable to select the Order Time 'All' in combo box");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the Order Time combo box");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function ClickOnSelectAllCheckBoxInWorklistDataGrid()
{
  try
  {
    Log["AppendFolder"]("Worklist::Selecting the SelectAll Checkbox in Worklist Datagrid");
    
    var isCheckboxSelected = false;
    
    //Get the worklist datagrid container from worklist screen
    var worklistDatGridContainerObj = GetAutomationIDControl("Worklist", "grdWorkList");
    
    //Get the column header list 
    var datagridColumnHeaderObj = Getchild(worklistDatGridContainerObj, "ClassName", "GridHeaderRow");
        
    //Get the select all checkbox fromworklist datagrid
    var selectAllCheckBoxObj = Getchild(datagridColumnHeaderObj, "ClassName", "CheckBox");
    
    //Check the select all checkbox is selected => if not then select the checkbox
    if(!GetCheckBoxState(selectAllCheckBoxObj)) 
    {
      //Wait for the worklist screen data to be loaded
      WaitForProgressRingToDisappear(30);   
    
      //selectAllCheckBoxObj["Activate"](); //commented after discussion with ilink team
      //Select the checkbox
      SelectCheckbox(selectAllCheckBoxObj);
      
      //Wait for the worklist screen data to be loaded
      WaitForProgressRingToDisappear(30); 
    } 
    else 
    {
      ClickCtrl(selectAllCheckBoxObj) ;
      ClickCtrl(selectAllCheckBoxObj) ;
    }
    
    //Check the select all checkbox selected => if selected then return true
    if(GetCheckBoxState(selectAllCheckBoxObj)) 
    {
      Log["Message"]("Successfully Selected the Select All Checkbox In Worklist Datagrid");
      isCheckboxSelected = true;
    } else {
      Log["Error"]("Unable to select the Select All Checkbox in Worklist Datagrid");
      isCheckboxSelected = false;
    }
    
    Log["PopLogFolder"]();
    return isCheckboxSelected;
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//Added by Prabu Ramaraj
function ClickOnMoveToHistoricalButton()
{
  try
  {
    Log["AppendFolder"]("Worklist::Click on Move to historical button");
    
    //Get move to historical button control
    var moveToHistoricalBtn = GetAutomationIDControl("Worklist", "btnMoveSamplesToHistorical");
          
    //Check the move to historical button is displayed & enabled
    if(VerifyObjectEnabled(moveToHistoricalBtn))
    {
      Log["Message"]("Move to historical button is located and enabled");
      //Click on the move to historical button
      ClickCtrl(moveToHistoricalBtn);    
      
      Log["PopLogFolder"](); 
      return true;
    } else {
      Log["Error"]("Move to historical button is not enabled to perform the action");
      Log["PopLogFolder"](); 
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}

//Added by Prabu Ramaraj
function AcceptMoveConfirmationPopup() 
{
  try
  {
    Log["AppendFolder"]("Worklist::Accept the move confirmation popup displayed")
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"]();
    
    //Get the popup displayed in worklist screen
    var alertPopup = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Get teh yes button displayed in the popup
    var yesBtn = GetAutomationIDControl("Worklist", "btnYesMoveToHistorical");
    
    //Check the yes button is displayed and enabled in the popup
    if(VerifyObjectEnabled(yesBtn))
    {
      Log["Message"]("Click on the yes button in the move confirmation popup");
      
      //Click on the yes button in the warning popup
      ClickCtrl(yesBtn);
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Yes Button not enabled in the Move Confirmation Popup dialogue");
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

//Added by Prabu Ramaraj
function AcceptConfirmationWindow()
{
  try
  {
    Log["AppendFolder"]("Worklist:: Check and Accept the transmit warning / success confirmation popup");
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"]();
    
    //Get alert confirmation popup control
    var alertConfirmation = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Get the yes button displayed in the popup
    var yesBtn = Getchild(alertConfirmation, "AutomationId", "PrimaryButton");
    
    //Check the yes button is displayed and enabled in the popup
    if(VerifyObjectEnabled(yesBtn))
    {
      Log["Message"]("Click on the yes button in the transmit confirmation popup");
      
      //Click on the yes button in the warning popup
      ClickCtrl(yesBtn);
      
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Yes Button not enabled in the Transmit Confirmation Popup dialogue");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}
//----------------------------------------------------------------------------------------


//---------------------------------Verify Sample Result Status / ETA ---------------------

//***************************************************************************************
//*   Function Name       : VerifyTheSampleResultedStatusInWorkList()
//*   Function Description: This function is used to Captures the Test Result for Given Sample ID[SID] for Hydra
//*   Input               : SampleID
//*   Output              : return true, if the test result is generated for the given sample id with in time frame
//*                         return false, if the test result is not generated for the given sample id with in time frame
//*   Date of Creating    : 17 June 2019
//*   Last Modified date  : 05 July 2019
//*   Created By          : Prabu Ramaraj
//*****************************************************************************************
function VerifyTheSampleResultedStatusInWorkList(SID)
{
  try
  {
    //Initialize
    var strSampleStatus = "";
    var strResult       = "";
    var strTestName     = "";
    var strFlags        = "";
    
    Log["AppendFolder"]("Waiting for the Sample '" + SID + "' to be resulted in worklist screen");

    //Get the Worklist Grid
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
    
    //Verify the Worklist Grid
    if(!VerifyObjectExistance(worklistDataGridObj))
    {
      Log["Error"]("Unable to locate WorkList grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    var filterExpandedState = IsDataGridDisplayedAsFullView();
    var flagColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Worklist","Flags", filterExpandedState);
    var resultValueColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Worklist","Result", filterExpandedState);
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    	   
    //Iterate the rows  to get the row of the given sample id
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
    {
      var rowParent = rowDetails[rowIndex];
      //Get the sample ID of the row
      var sampleIDLinkCtrl = Getchild(rowParent, ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
      var actualSampleValue = GetNativeObjectName(sampleIDLinkCtrl);
      
      //If SID Exists => Then validate the status
      if(actualSampleValue == SID)
      { 
        //Get the Current status
        strSampleStatusImage = Getchild(rowParent,"AutomationId","BtnTestStatus")
        strSampleStatus = strSampleStatusImage["HelpText"];
          
        //Get Test name
        testNameObjCtrl  = Getchild(rowParent, ["ClassName", "AutomationId"] , ["Hyperlink","HLBTestName"]);
        strTestName = GetNativeObjectName(testNameObjCtrl);
        
        var rowCells = GetAllChildren(rowParent,"ClassName","GridCell").reverse();
        
        //Verify the sample status is 'Error'
        if(strSampleStatus == "Error")
        {
          Log["Error"]("Sample '" + SID + "' Failed to process")
          
          //Get the flag object
          var flagObjCtrl = Getchild(rowCells[flagColumnIndex],"ClassName","TextBlock")
          var strFlags = flagObjCtrl["Text"]
          
          if(strFlags != "")
          {
            Log["Message"]("Worklist sample flag is obtained as '" + strFlags + "' for sample '" + SID + "'");
          } 
          
          Log["PopLogFolder"]()
          return false;
        }
                
        //Verify the sample status is 'Completed'
        if(strSampleStatus == "Complete"|| strSampleStatus == "Hold") 
        {
          Log["Message"]("Sample '" + SID + "' Processed Successfully")
          
          //Get the flg object
          var flagObjCtrl = Getchild(rowCells[flagColumnIndex],"ClassName","TextBlock")
          var strFlags = flagObjCtrl["Text"]
          
          if(strFlags != "")
          {
            Log["Message"]("Worklist sample flag is obtained as '" + strFlags + "' for sample '" + SID + "'");
          } 
          
          //Get the result
          var resultObjCtrl = Getchild(rowCells[resultValueColumnIndex],"ClassName","TextBlock")
          var strResult = resultObjCtrl["Text"]
           
          if(strResult == undefined || strResult == "") 
          {
            Log["Error"]("Sample result vaue is not displayed / upated to the worklist datagrid for the sample : '" + SID);
            Log["PopLogFolder"]();
            return false;
          } else if (strResult == "Error") {
            Log["Error"]("Result : " + strResult + " - " + strFlags);
            Log["PopLogFolder"]();
            return false;
          } else if (aqString["Find"](strFlags,"Cal Invalid") != -1) {
            Log["Message"]("Result : " + strResult + " - " + strFlags );
          } else{
            Log["Message"]("Result : " + strResult);
          }
            Log["PopLogFolder"]()
            return true;
        }
                
        var isSampleProcessStarted = false;
        var i=0;
          
        //If Sample is not "In process" then Wait -1.5 minutes
        while(strSampleStatus == "Ordered" && i<45)
        {
          Log["Message"]("Sample '" + SID + "' is in Ordered Status");
          i = i+1;
          aqUtils["Delay"](2000);
              
          //Get the Current status
          strSampleStatusImage = Getchild(rowParent,"AutomationId","BtnTestStatus")
          strSampleStatus = strSampleStatusImage["HelpText"];
          
          //Verify the Sample status is 'Inprocess'
          if(strSampleStatus  == "Inprocess")
          {
            Log["Message"]("Sample '" + SID + "'  process started successfully");
            isSampleProcessStarted = true;
            break;
          }
        }
        
        //Verify the Sample Process Stared or Sample Status is inprocess
        if(isSampleProcessStarted || strSampleStatus == "Inprocess")
        {
          Log["Message"]("Processing " + SID + " for " + strTestName + " test");
          
          var count =0;
          var isSampleProcesscompleted=false;
          var isSampleProcessFailed = false;
            
          //If Sample is "In process" then Wait -25 minutes
          while(strSampleStatus  == "Inprocess" && count <132)
          {
            count = count+1;
            aqUtils["Delay"](10000);
            
            //Get the Current status
            strSampleStatusImage = Getchild(rowParent,"AutomationId","BtnTestStatus")
            strSampleStatus = strSampleStatusImage["HelpText"];
            
            //Verify the Sample Status is 'Complete' or 'Error' or Others
            if(strSampleStatus  == "Complete")
            {
              Log["Message"]("Sample '" + SID + "'  processed successfully");
              isSampleProcesscompleted = true;
              break;
            } else if(strSampleStatus == "Error")
            {
              isSampleProcessFailed = true;
              Log["Error"]("Sample '" + SID + "' Failed to process")
              break;
            } 
          }
          
          //Verify the Sample Process Completed or Failed
          if(isSampleProcesscompleted || isSampleProcessFailed)
          {
            //Get the flag object
            var flagObjCtrl = Getchild(rowCells[flagColumnIndex],"ClassName","TextBlock")
            var strFlags = flagObjCtrl["Text"]
        
            if(strFlags != "")
            {
              Log["Message"]("Worklist sample flag is obtained as '" + strFlags + "' for sample '" + SID + "'");
            } 
            
            //Get the result
            var resultObjCtrl = Getchild(rowCells[resultValueColumnIndex],"ClassName","TextBlock")
            var strResult = resultObjCtrl["Text"]
            
            if(strResult == undefined || strResult == "") 
            {
              Log["Error"]("Sample result vaue is not displayed / upated to the worklist datagrid for the sample : '" + SID);
              Log["PopLogFolder"]();
              return false;
            } else if (strResult == "Error") {
              Log["Error"]("Result : " + strResult + " - " + strFlags);
              Log["PopLogFolder"]();
              return false;
            } else if (aqString["Find"](strFlags,"Cal Invalid") != -1) {
              Log["Message"]("Result : " + strResult + " - " + strFlags );
            } else{
              Log["Message"]("Result : " + strResult);
            }
          } else{
              Log["Error"]("Sample Processing not updated for the ' " + SID + "' after Specified time")
              Log["PopLogFolder"]()
              return false;
          }
        } else{
            Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample Processing not updated for the " +SID)
            Log["Error"]("Sample Processing not updated for the " +SID)
            Log["PopLogFolder"]()
            return false;
        }
      }  
    }
    Log["PopLogFolder"]();
    return true;
  }
	catch(e)
	{
	  Log["Error"]("Exception " , e["description"]);
	  Log["PopLogFolder"]();
    return false;
	}    
}

//'***************************************************************************************************************************
//*  FunctionName : fnGetDBSampleStatus(SID)
//*  Description: Fetch the Sample Status From Database
//*  Input: SID
//*  Output: boolean
//*  Example: fnGetDBSampleStatus(SID)
//*  Date of Creating: 31/10/2017
//*  Last Modified date:
//*  Created By: Bhawya V J
//'***************************************************************************************************************************
function fnGetDBSampleStatus(SID)
{
    var strSampleStatus = "";
    try
    {
        //Get Sample Status from Database
        var strConString = "Provider=sqloledb;Server=.;Database=Bus_DM;Integrated Security=SSPI;"
        var strQuery = "SELECT Description FROM dbo.Sample_States WHERE StateID in (SELECT StatusID FROM dbo.Samples WHERE SID = '"+SID+ "')";
        RecordSet = ReturnQueryRecordSetFromString(strQuery,strConString)
        
        //Verify Sample Exists in DB
        if(RecordSet["EOF"] == false)
        {
          RecordSet["MoveFirst"]();
          strSampleStatus = RecordSet["Fields"]("Description").Value;
        }
        else
        {
          Log["Error"](SID+" does not exist in database.");
          ProjectSuite["Variables"]["ExecutionStatus"] ="False"
          return false;
        }
    }
    catch(exp)
    {
        Log["Error"]("Exception",exp["description"]);
        return false;
    }
    return strSampleStatus;
}

function VerifyTheSampleETADisplayedInWorkList(SID)
{
  try
  {
   Log["AppendFolder"]("Verify the ETA Time Displayed for the Sample ID " + SID  );
   
   //Get the worklist datagrid from the datagrid container
   var worklistDataGridObj = GetAutomationIDControl("PrimeDispWorkListScreen", "grdWorkList");
      
   //Check the worklist datagrid is dispalyed
    if(!VerifyObjectExistance(worklistDataGridObj))
    {
      Log["Error"]("Unable to locate WorkList grid");
      Log["PopLogFolder"]();
      return false;
    }
      
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    var isETATimeDisplayed = false;
    var isSampleDisplayed = false;
    
    //Iterate the rows  to get the row of the given sample id
    for(var rowIndex=0; rowIndex < rowDetails.length; rowIndex++)
    {
      //get the row parent 
      var rowParent = rowDetails[rowIndex];      
      //Get the SID Cell
      var strCellValue = Getchild(rowParent, ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
      
      //Get the SID Cell value
      strCellValue = GetNativeObjectName(strCellValue);
      
      //If SampleID Exists => Then validate the status
      if(strCellValue == SID)
      { 
        isSampleDisplayed = true;
        Log["Message"]("Expected Patient Sample '" + SID + "' Exist in Work List grid");
        
        //Get the ETA Time cell control
        var etaTimeCellCtrl = Getchild(rowParent, ["ClassName", "AutomationId"] , ["TextBlock","ETAMinsTxt"]);
        var etaTimeCellValue = etaTimeCellCtrl["Text"];
        
        //Verify the ETA time value
        if(etaTimeCellValue != null)
        {
          isETATimeDisplayed = true;
          Log["Message"]("ETA Time : " + etaTimeCellValue + " Displayed for the Sample : " +SID)          
        } else {
          Log["Message"]("ETA Time is not Displayed for the Sample : " +SID);
        }
        break;
      }
    }
    
    //check the sample is located
    if(isSampleDisplayed)
    {
      //check the ETA is displayed
      if(isETATimeDisplayed)
      {
        Log["Message"]("ETA time for the sample id '" + SID + "' is located successfully");
        Log["PopLogFolder"]();
        return true;      
      } else {
        Log["Error"]("Unable to locate the ETA time for the sample '" + SID + "'");
        Log["PopLogFolder"]();
        return false;
      }
    } else {        
      Log["Message"]("Unable to locate the Sample '" + SID + "'");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch(e)
	{
	  Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
	} 
} 

//Added by Prabu Ramaraj
function VerifyTheSampleResultedStatusInWorkListForMultipleTest(sampleId,testName)
{
  try
  {
    
    //Initialize
    var strSampleStatus = "";
    var strResult       = "";
    var strTestName     = "";
    var strFlags        = "";    
    
    Log["AppendFolder"]("Waiting for the Sample '" + sampleId + "' to be resulted in worklist screen for all of its tests");

    //Get the Worklist Grid
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
    
    //Verify the Worklist Grid
    if(!VerifyObjectExistance(worklistDataGridObj))
    {
      Log["Error"]("Unable to locate WorkList grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    var filterExpandedState = IsDataGridDisplayedAsFullView();
    var flagColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Worklist","Flags", filterExpandedState);
    var resultValueColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Worklist","Result", filterExpandedState);
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
  
    var indexListOfSampleId = new Array();
    
    //Iterate the rows to get the row indexes of the given sample id
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
    {
      //Get the sample ID of the row
      var sampleIDLinkCtrl = Getchild(rowDetails[rowIndex], ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
      var actualSampleValue = GetNativeObjectName(sampleIDLinkCtrl);
      
      if(actualSampleValue == sampleId)
      {
        indexListOfSampleId["push"](rowIndex);        
      }      
    }
    
    //Check there is a sample displayed with given sample id
    if(indexListOfSampleId.length <= 1)
    {
      Log["Error"]("There are no samples listed in the worklist with the sample id '" + sampleId + "'");
      Log["PopLogFolder"]();
      return false;
    }
    
    //wait for the samples resulted status
    var isAllSampleResulted = true;
    
    for(var i=0; i< indexListOfSampleId.length; i++)
    {
      var sampleRowIndex = indexListOfSampleId[i];
      var rowParent = rowDetails[sampleRowIndex];
      
      var actualSampleIdCtrl = Getchild(rowParent, "AutomationId", "HLButtonSID");
      var actualSampleId = GetNativeObjectName(actualSampleIdCtrl);
      var actualSampleStatusIcon = Getchild(rowParent, "AutomationId", "BtnTestStatus");
      var actualSampleStatus = actualSampleStatusIcon["HelpText"];
      var actualTestNameCtrl = Getchild(rowParent, "AutomationId", "HLBTestName");
      var actualTestName = GetNativeObjectName(actualTestNameCtrl);            
      var actualRowCells = GetAllChildren(rowParent,"ClassName","GridCell").reverse();
      
      Log["AppendFolder"]("Worklist :: Checking the resulted status for the sample id '" + sampleId + "' with test '" + actualTestName + "'");
      
      //Verify the sample status is 'Error'
      if(actualSampleStatus == "Error")
      {
        Log["Error"]("Sample '" + actualSampleId + "' failed to process");
        
        //Get the flag object
        var flagObjCtrl = Getchild(actualRowCells[flagColumnIndex],"ClassName","TextBlock");
        var strFlags = flagObjCtrl["Text"];
        
        if(strFlags != "")
        {
          Log["Message"]("Worklist sample '" + sampleId + "' with test '" + actualTestName + "' is obtained with flag values of '" + strFlags + "'");
        }
        
        isAllSampleResulted = false;
        Log["PopLogFolder"]();  
        continue;               
      }
      
      //Verify the sample status is 'Completed'
      if(actualSampleStatus == "Complete"|| actualSampleStatus == "Hold") 
      {
        Log["Message"]("Sample '" + actualSampleId + "' processed successfully with the test '" + actualTestName + "'");
          
        //Get the flg object
        var flagObjCtrl = Getchild(actualRowCells[flagColumnIndex],"ClassName","TextBlock");
        var strFlags = flagObjCtrl["Text"];
          
        if(strFlags != "")
        {
          Log["Message"]("Worklist sample '" + actualSampleId + "' with the test '" + actualTestName + " ' has a flag obtained as '" + strFlags + "'");
        } 
          
        //Get the result
        var resultObjCtrl = Getchild(actualRowCells[resultValueColumnIndex],"ClassName","TextBlock");
        var strResult = resultObjCtrl["Text"];
           
        if(strResult == undefined || strResult == "") 
        {
          Log["Error"]("Sample result vaue is not displayed / upated to the worklist datagrid for the sample : '" + actualSampleId + "' with test '" + actualTestName + "'");
          isAllSampleResulted = false;          
        } else if (strResult == "Error") {
          Log["Error"]("Result for sample '" + actualSampleId  + "' with test '" + actualTestName  + "' is : " + strResult + " - " + strFlags);
          isAllSampleResulted = false;          
        } else if (aqString["Find"](strFlags,"Cal Invalid") != -1) {
          Log["Message"]("Result for sample '"+ actualSampleId + "' with test '" + actualTestName + "' is : " + strResult + " - " + strFlags );
        } else{
          Log["Message"]("Result for sample '" + actualSampleId + "' with test '" + actualTestName + "' is : " + strResult);
        }
        
        Log["PopLogFolder"]();
        continue;
      }
      
      var isSampleProcessStarted = false;
      var loopCounter = 0;
          
      //If Sample is not "In process" then Wait -1.5 minutes
      while(actualSampleStatus == "Ordered" && loopCounter<45)
      {
        Log["Message"]("Sample '" + sampleId + "' with test '" + actualTestName + "' is in Ordered Status");
        loopCounter = loopCounter + 1;
        aqUtils["Delay"](2000);
              
        //Get the Current status
        actualSampleStatusIcon = Getchild(rowParent, "AutomationId", "BtnTestStatus");
        actualSampleStatus = actualSampleStatusIcon["HelpText"];
          
        //Verify the Sample status is 'Inprocess'
        if(actualSampleStatus == "Inprocess")
        {
          Log["Message"]("Sample '" + sampleId + "' process initiated for the test '" + actualTestName + "'");
          isSampleProcessStarted = true;
          break;
        }
      }
    
      //Get the Current status
      actualSampleStatusIcon = Getchild(rowParent, "AutomationId", "BtnTestStatus");
      actualSampleStatus = actualSampleStatusIcon["HelpText"];
      
      //Verify the Sample Process Stared or Sample Status is inprocess
      if(isSampleProcessStarted || actualSampleStatus == "Inprocess")
      {
        Log["Message"]("Sample '" + sampleId + "' processing is started successfully for '" + actualTestName + "' test");
          
        var count =0;
        var isSampleProcesscompleted=false;
        var isSampleProcessFailed = false;
            
        //If Sample is "In process" then Wait -25 minutes
        while(actualSampleStatus == "Inprocess" && count <132)
        {
          count = count+1;
          aqUtils["Delay"](10000);
            
          //Get the Current status
          actualSampleStatusIcon = Getchild(rowParent, "AutomationId", "BtnTestStatus");
          actualSampleStatus = actualSampleStatusIcon["HelpText"];
            
          //Verify the Sample Status is 'Complete' or 'Error' or Others
          if(actualSampleStatus == "Complete"|| actualSampleStatus == "Hold")
          {
            Log["Message"]("Sample '" + sampleId + "' with test '" + actualTestName + "' processed successfully");
            isSampleProcesscompleted = true;
            break;
          } else if(actualSampleStatus == "Error")
          {
            isSampleProcessFailed = true;
            Log["Error"]("Sample '" + sampleId + "' with test '" + actualTestName + "' failed to process")
            break;
          }
        }
          
        //Verify the Sample Process Completed or Failed
        if(isSampleProcesscompleted || isSampleProcessFailed)
        {
          //Get the flag object
          flagObjCtrl = Getchild(actualRowCells[flagColumnIndex],"ClassName","TextBlock");
          strFlags = flagObjCtrl["Text"];
        
          if(strFlags != "")
          {
            Log["Message"]("Worklist sample '" + sampleId + "' with test '" + actualTestName + "' is obtained with flag values of '" + strFlags + "'");
          } 
            
          //Get the result
          resultObjCtrl = Getchild(actualRowCells[resultValueColumnIndex],"ClassName","TextBlock");
          strResult = resultObjCtrl["Text"];
            
          if(strResult == undefined || strResult == "") 
          {
            Log["Error"]("Sample result vaue is not displayed / upated to the worklist datagrid for the sample : '" + actualSampleId + "' with test '" + actualTestName + "'");
            isAllSampleResulted = false;            
          } else if (strResult == "Error") {
            Log["Error"]("Result for sample '" + actualSampleId  + "' with test '" + actualTestName  + "' is : " + strResult + " - " + strFlags);
            isAllSampleResulted = false;          
          } else if (aqString["Find"](strFlags,"Cal Invalid") != -1) {
            Log["Message"]("Result for sample '"+ actualSampleId + "' with test '" + actualTestName + "' is : " + strResult + " - " + strFlags );
          } else{
            Log["Message"]("Result for sample '" + actualSampleId + "' with test '" + actualTestName + "' is : " + strResult);
          }
          
          Log["PopLogFolder"]();
          continue;
        } else{
          Log["Error"]("Sample processing not updated for the ' " + sampleId + "' with test '" + actualTestName + "' after specified time");
          isAllSampleResulted = false;
          Log["PopLogFolder"]();
          continue;
        }
      } else {
        Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample Processing not updated for the '" + sampleId + "'");
        Log["Error"]("Sample Processing not updated for the '" + sampleId + "'");
        Log["PopLogFolder"]()
        continue;
      }
    }
      
      
    //check that all the samples are processed successfully
    if(isAllSampleResulted)
    {
      Log["Message"]("All the tests for the sampleId '" + sampleId + "' has been processed and resulted successfully");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("All / Some of the tests for the sampleId '" + sampleId + "' has been failed to process the samples");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

//***************************************************************************************
//*   Function Name       : VerifySampleTestDataInWorkList()
//*   Function Description: This function is used to verify the values disaplyed in various columns of sample with a test in worklist screen
//*   Input               : SampleId,TestName,Columns,ExpectedColumnValues
//*   Output              : 
//*   Date of Creating    : 31 Nov 2019
//*   Last Modified date  : 31 Nov 2019
//*   Created By          : Shrutika Tyagi
//*****************************************************************************************
function VerifySampleTestDataInWorkList(SampleId,TestName,Columns,ExpectedColumnValues)
{
  try
  { 
    //Initialize
    var isRecordExist = false;
    var icount = 0;
    var actualTestStatus = "";
    var strFlags        = "";
    
    Log["AppendFolder"]("Verifying the data of a sample " +SampleId + " with test " + TestName +" in worklist screen");
    
    //Get the Worklist Grid
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
    
    //Verify the Worklist GridVerifySampleStatusForRT
    if(!VerifyObjectExistance(worklistDataGridObj))
    {
      Log["Error"]("Unable to locate WorkList grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
        
    var arrColumns = new Array();
    arrColumns = Columns["split"](";");
    var TotalColumns = arrColumns["length"];
    
    var arrExpectedColumnValues = new Array();
    arrExpectedColumnValues = ExpectedColumnValues["split"](";");
    //var TotalExpectedColumnValues = arrExpectedColumnValues["length"];
    
    var filterExpandedState = IsDataGridDisplayedAsFullView();
    var flagColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Worklist","Flags",filterExpandedState);
            
    Log["Picture"](Sys["Desktop"]["ActiveWindow"](),"worklist screen ");
    //Iterate the rows  to get the row of the given sample id
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
    {  
      var rowParent = rowDetails[rowIndex];
      //Get the sample ID of the row
      var sampleIDLinkCtrl = Getchild(rowParent, ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
      var actualSampleValue = GetNativeObjectName(sampleIDLinkCtrl);
      
      var testNameObjCtrl  = Getchild(rowParent, ["ClassName", "AutomationId"] , ["Hyperlink","HLBTestName"]);
      var actualTestName = GetNativeObjectName(testNameObjCtrl);
      
      //If SID Exists => Then validate the status
      if((actualSampleValue == SampleId) && (actualTestName == TestName))
      {
        isRecordExist= true;
        for( var i =0 ; i<TotalColumns ; i++)
        {
          var ExpectedValue = aqConvert["VarToStr"](arrExpectedColumnValues[i]);
          switch(arrColumns[i])
          {
          case "TestStatus" :        
            //Get the Current test status
            var strTestStatusImage = Getchild(rowParent,"AutomationId","BtnTestStatus")
            actualTestStatus = strTestStatusImage["HelpText"];
            
            if (arrExpectedColumnValues[i] == "Intervention Needed")
              ExpectedValue = "Error"
            //Verify the sample status is 'Error'
            if(actualTestStatus == ExpectedValue)
            {
              if(actualTestStatus=="Error")
                actualTestStatus =  "Intervention Needed"
              Log["Message"]("Test status for " + SampleId + " with test " +TestName+ " is displayed as: " +actualTestStatus);
              //isResult = true;
              icount = icount+1;
            }
            else
              Log["Error"]("Test status does not match. It is displayed as: " + actualTestStatus + " for " + SampleId + " with test " +TestName);
            break;
            
          case "TestFlag" :
            //Get the Test flags            
            var rowCells = GetAllChildren(rowParent,"ClassName","GridCell").reverse();
            var flagObjCtrl = Getchild(rowCells[flagColumnIndex],"ClassName","TextBlock")
            actualTestFlags = aqConvert["VarToStr"](flagObjCtrl["Text"]);
            
            var res = aqString["Find"](aqString["Trim"](actualTestFlags),aqString["Trim"](ExpectedValue))
            if( res!=-1)
            {
              Log["Message"]("Flags for " + SampleId + " with test " +TestName+ " is displayed as: " + actualTestFlags);
              //isResult = true;
              icount = icount+1;
            }
            else
              Log["Error"]("Flag does not match. Flags for " + SampleId + " with test " +TestName+ " is displayed as: " + actualTestFlags);
            break;
          
          }// end of switch
        } // end of inner if
        break;
      }
    }
    if(icount ==TotalColumns) 
    {
      Log["PopLogFolder"]();
      return true;
    }
//    else if(icount<TotalColumns)
//    {
//      Log["PopLogFolder"]();
//      return false;
//    }
    else if(!isRecordExist) 
    {
      Log["Message"](SampleId + " is not present in worklist screen");
      Log["PopLogFolder"]();
      return false;
    } 
    else 
    {
      Log["PopLogFolder"]();
      return false;
    }
        
  }// end of try
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//----------------------------------------------------------------------------------------


//---------------------------------Import Worklist ---------------------------------------

//***************************************************************************************
//*   Function Name       : ImportWorklist(fileToImport,timeToWait)
//*   Function Description: This function is used to import csv files for worklist
//*   Input               : fileToImport,timeToWait
//*   Output              : true/false
//***************************************************************************************** 
function ImportWorklist(fileToImport,timeToWait)
{
  try
  {
    Log["AppendFolder"]("Worklist :: Import Worklist Operation");
    
    //Browse Upload Worklist File in Import Worklist Datagrid
    if(!BrowseUploadWorklistFile(fileToImport))
    {
      Log["Error"]("Failed to browse and upload worklsit file");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Get the Import Worklist Datagrid count
    if(!GetImportWorklistDataGridRowCount())
    {
      Log["Error"]("Failed to display samples in worklist data grid");
      Log["PopLogFolder"]();
      return false;
    } 
    
    //Click on import button
    if(!ClickImportWorkListButtonInImportWorkListpopUp(timeToWait))
    {
      Log["Error"]("Failed to browse and upload worklsit file");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Accept success message
    if(AcceptTheImportSuccessMessage())
    {
      Log["Message"]("Sucess Message Displayed and Accepted")
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Unable to Accept Success Message");
      Log["PopLogFolder"]();
      return false
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : ClickImportWorkListButtonInImportWorkListpopUp()
//*   Function Description: This function is used to click on Import Button in import Worklist popup
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//***************************************************************************************** 
function ClickImportWorkListButtonInImportWorkListpopUp(timeToWait)
{
  try
  {
    Log["AppendFolder"]("Click Import WorkList Button in Import Work List Pop Up");
    
    //Get Ok button control
    var importWorkListButton = GetAutomationIDControl("Worklist_ImportWorklist", "btnOkBrowserWindow");
    
    //Check the OK button is enabled
    if(VerifyObjectEnabled(importWorkListButton))
    {
      //Click on the Ok button
      ClickCtrl(importWorkListButton);
      
      WaitForProgressRingToDisappear(timeToWait);
      
      //Refresh the root node of the application to get the latest popup details
      Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"](); 
 
      //Get the popup displayed in worklist screen
      var alertPopup = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
      //Check the ok button is displayed and enabled
      if(VerifyObjectExists(alertPopup))
      {
        Log["Message"]("Import Worklist button clicked successfully");
        Log["PopLogFolder"]();
        return true;
      } else{
          Log["Error"]("Unable to click on Import Worklist button");
          Log["PopLogFolder"]();
          return false;
      }
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetImportWorklistDataGridRowCount()
{
  try
  {
    Log["AppendFolder"]("Get the Import Worklist Datagrid Count");
    
    //Get the Browse window datagrid from the datagrid container
    var browseWindowDatGridObj = GetAutomationIDControl("Worklist_ImportWorklist", "dtgrdImportedWorkList");
      
    //Check the  datagrid is dispalyed
    if(!VerifyObjectExistance(browseWindowDatGridObj))
    {
      Log["Error"]("Unable to locate browse window grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(browseWindowDatGridObj);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the import worklist popup datagrid");
      Log["PopLogFolder"]();
      return false;
    } else {
      Log["Message"]("Import worklist popup datagrid record count '" + rowDetails.length+ "'");
      Log["PopLogFolder"]();
      return rowDetails.length;
    }     
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : BrowseUploadWorklistFile()
//*   Function Description: This function is used to Browse & upload file in Import Worklist Datagrid
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function BrowseUploadWorklistFile(fileToImport)
{
  try
  {
    Log["AppendFolder"]("Browse and Upload Worklist Operation");
    
    //Click on Import Worklist button in Worklist screen
    if(!ClickOnImportWorkListButton())
    {
      Log["Error"]("Click On Import Worklist - Failed");
      Log["PopLogFolder"]();
      return false;
    }
    //Verify the Import worklist popup
    if(!CheckTheImportWorklistPopUpDisplayed())
    {
      Log["Error"]("Import Worklist popup is not displayed");
      Log["PopLogFolder"]();
      return false;
    }
    //Browse and Upload CSV file
    if(!BrowseAndUploadWorklistCSVFile(fileToImport))
    {
      Log["Error"]("Browse and upload CSV file failed");
      Log["PopLogFolder"]();
      return false;
    } else{
      Log["Message"]("File Uploaded to the Browse popup Successfully")
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : ClickOnImportWorkListButton()
//*   Function Description: This function is used to Click on import worklist button in Worklist screen
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 27 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************  
function ClickOnImportWorkListButton()
{
  try
  {
    Log["AppendFolder"]("Click on the Import WorkList button in worklist screen");
    
    //Get Import Worklist button control
    var importWorkListButton = GetAutomationIDControl("Worklist_ImportWorklist", "btnImportWorklist");
    
    //Check the import Work List button is enabled
    if(VerifyObjectEnabled(importWorkListButton))
    {
      //Click on the Import workList button
      ClickCtrl(importWorkListButton);
      
      Log["Message"]("Import Worklist button clicked successfully")
      Log["PopLogFolder"]();
      return true;
    } else {
        Log["Error"]("Unable to locate Import Worklist button")
        Log["PopLogFolder"]();
        return false
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : CheckTheImportWorklistPopUpDisplayed()
//*   Function Description: This function is used to Verify the Import Woklist Popup displayed or not
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 27 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************  
function CheckTheImportWorklistPopUpDisplayed()
{
  try
  {
    Log["AppendFolder"]("Check the  Import WorkList popup displayed");
    
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"]();
      
    //Get the Work List Page control
    var workListPageCtrl = GetAutomationIDControl("HomeButton", "pageHome");
    
    //Get the Import worklist pop up container
    var popupContainer = Getchild(workListPageCtrl,"Name","[\"UIAObject\"](2)");
    
    if(VerifyObjectExists(popupContainer))
    {
      //get the Import worklist Popup
      var importWorkListpopup = Getchild(popupContainer,"Name","[\"UIAObject\"](1)");
      
      if(VerifyObjectExists(importWorkListpopup))
      {
        Log["Message"]("Import Worklist Popup displayed");
        Log["PopLogFolder"]();
        return true; 
      } else{
           Log["Message"]("Import Worklist popup is not displayed");
           Log["PopLogFolder"]();
           return false;
      }
    } else{
        Log["Message"]("Import Worklist popup is not displayed");
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : BrowseAndUploadWorklistCSVFile()
//*   Function Description: This function is used to Browse & upload file in Import Worklist Datagrid
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function BrowseAndUploadWorklistCSVFile(fileToImport)
{
  try
  {
    Log["AppendFolder"]("Browse And Upload WorklistCSV");
    
    //Click Browse button in Import Worklist popup
    if(!ClickOnBrowseButtonInImportWorkListPopUp())
    {
      Log["Error"]("Unable to click on browse button in Import Worklist Popup");
      Log["PopLogFolder"]();
      return false;
    }
    //Click Browse button in Browse popup
    if(!ClickOnBrowseButtonInBrowsePopUp())
    {
      Log["Error"]("Unable to click on browse button in Browse Popup");
      Log["PopLogFolder"]();
      return false;
    }
    
    aqUtils["Delay"](5000, "Wait for the widnows file selector popup to be displayed");
    
    //select the CSV file to upload
    if(!SelectTheFiletoUpload(fileToImport))
    {
      Log["Error"]("Unable to select the file to upload");
      Log["PopLogFolder"]();
      return false;
    }
    //Verify the file path displaying in Browse pop up
    if(!VerifyTheFilePathDisplayedInBrowseWindow(fileToImport))
    {
      Log["Error"]("wrong File path selected");
      Log["PopLogFolder"]();
      return false;
    }
    //Click OK button in Browse popup
    if(!ClickOKButtonInBrowserPopUp())
    {
      Log["Error"]("Unable to select the file to upload");
      Log["PopLogFolder"]();
      return false;
    }
    //Verify the import Worklist popup displayed
    if(!CheckTheImportWorklistPopUpDisplayed())
    {
      Log["Error"]("Import Worklist popup is not displayed");
      Log["PopLogFolder"]();
      return false;
    } else{
      Log["Message"]("Browse and Upload File - Success")
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : ClickOnBrowseButtonInImportWorkListPopUp()
//*   Function Description: This function is used to Click on Browse button in Import Worklist popup
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 27 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************  
function ClickOnBrowseButtonInImportWorkListPopUp()
{
  try
  {
    Log["AppendFolder"]("Click on the Browse button in Import worklist Pop Up");
    
    //Get the Browse radio button control
    var importWorkListRadioButton = GetAutomationIDControl("Worklist_ImportWorklist", "radioBtnImportWorkList");
    
    //Verify the radio button control
    if(!importWorkListRadioButton["IsSelected"])
    {
      //Click Browse radio button control
      ClickCtrl(importWorkListRadioButton)
    } 
    
    //Verify the radio button control
    if(importWorkListRadioButton["IsSelected"])
    {
      //Get the Browse button control
      var browseButton = GetAutomationIDControl("Worklist_ImportWorklist", "btnBrowseimportWorkList");
      
      //Verify the Browse Button control
      if(VerifyObjectExists(browseButton))
      {
        //Click the Browse button
        ClickCtrl(browseButton);
        
        //Get the loal radio button in Browse window
        var localRadiobutton = GetAutomationIDControl("Worklist_ImportWorklist", "radioBtnLocal");
        
        //Verify the Browse button clicked by verifying the local radio button displaying in browse pop up
        if(VerifyObjectExists(localRadiobutton))
        {
          Log["Message"]("Local radio button displaying");
          Log["PopLogFolder"]();
          return true;
        } else{
            Log["Error"]("Unable to locate Local radio button");
            Log["PopLogFolder"]();
            return false;
        }
      } else{
          Log["Error"]("Unable to locate Browse button");
          Log["PopLogFolder"]();
          return false;
      }
    } else{
         Log["Error"]("Import WorkList button is not selected as Import Worklist pop is not displayed");
         Log["PopLogFolder"]();
         return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : ClickOnBrowseButtonInBrowsePopUp()
//*   Function Description: This function is used to Click on Browse button in Browse popup
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 27 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************  
function ClickOnBrowseButtonInBrowsePopUp()
{
  try
  {
    Log["AppendFolder"]("Click on the Browse button in Browse Pop Up");
    
    //Get the local Radio button control
    var localRadiobutton = GetAutomationIDControl("Worklist_ImportWorklist", "radioBtnLocal");
    
    //Verify the local Radio button control
    if(!localRadiobutton["IsSelected"])
    {
      //Click on local Radio button control
      ClickCtrl(localRadiobutton)
    }
    //Verify the local Radio button control
    if(localRadiobutton["IsSelected"])
    {
      //Get the Browse button
      var browseButton = GetAutomationIDControl("Worklist_ImportWorklist", "btnBrowserBrowseWindow");
      
      //Verify the Browse button
      if(VerifyObjectExists(browseButton))
      {
        //Click on Browse Button 
        ClickCtrl(browseButton);
        
        //Get the upload pop up control
        var FileBrowser=Sys["Process"]("PickerHost");
        
        //Verify the upload pop up control
        if (FileBrowser["Exists"]==true)
        {
          Log["Message"]("Browse button is clicked successfully")
          Log["PopLogFolder"]();
          return true;
        } else{
            Log["Error"]("Browse button is not clicked successfully");
            Log["PopLogFolder"]();
            return false;
        }
      } else{
          Log["Error"]("Unable to locate Browse button");
          Log["PopLogFolder"]();
          return false
      }
    } else{
         Log["Error"]("Local Radio Button is not selcted");
         Log["PopLogFolder"]();
         return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : SelectTheFiletoUpload()
//*   Function Description: This function is used to select the file to upload
//*   Input               : fileToImport
//*   Output              : true/false
//*   Date of Creating    : 27 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************  
function SelectTheFiletoUpload(fileToImport)
{
  try
  {
   Log["AppendFolder"]("Select the file to upload");
   
   //Get the Upload window control
   var FileBrowser=Sys["Process"]("PickerHost"); 
   
   //Get the filepath
   var csvfileloc = fileToImport;
   
    //Check the file upload window control
    if (FileBrowser["Exists"]==true)
    {
      //Get the Combobox to enter the file path and file name
      var filenameedit = Getchild(FileBrowser,"WndClass","ComboBoxEx32");
      
      //Enter file path and File name
      filenameedit["Keys"](csvfileloc);
      
      //Get the Open button control
      var openBtnParent = Getchild(FileBrowser,"WndCaption","Open");
      var openBtn = Getchild(openBtnParent,"WndCaption","&Open");
      
      //Click on Open Button
      ClickCtrl(openBtn);
    
      //verify the file upload window exists
      if(FileBrowser["Exists"]==true)
      {
        //Get the Cancel button control
        var cancelBtn = Getchild(openBtnParent,"WndCaption","Cancel");
        
        //Click On Cancel button
        ClickCtrl(cancelBtn);
      } 
      
      Log["Message"]("File Uploaded")
      Log["PopLogFolder"]();
      return true;
    } else{
        Log["Error"]("Unable to Locate upload window")
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : ClickOKButtonInBrowserPopUp()
//*   Function Description: This function is used to Click on Ok button in Browse popup
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************  
function ClickOKButtonInBrowserPopUp()
{
  try
  {
    Log["AppendFolder"]("Click on the Ok Button In Browse popup");
    
    //Get Ok button control
    var okButton = GetAutomationIDControl("Worklist_ImportWorklist", "btnOkBrowserWindow");
    
    //Check the OK button is enabled
    if(VerifyObjectEnabled(okButton))
    {
      //Click on the Ok button
      ClickCtrl(okButton);
      Log["Message"]("Ok Button in Browse Popup clicked successfully")
      Log["PopLogFolder"]();
      return true;
     
    } else {
        Log["Error"]("Unable to locate Ok button");
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name       : VerifyTheFilePathDisplayedInBrowseWindow()
//*   Function Description: This function is used to Verify the file path displayed
//*   Input               : fileToImport
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//***************************************************************************************** 
function VerifyTheFilePathDisplayedInBrowseWindow(fileToImport)
{

    Log["AppendFolder"]("Verify the Uploaded file path displaying in Import worklist popup");
    
    //Get file path combo box  control
    var filePathComboBox = GetAutomationIDControl("Worklist_ImportWorklist", "filePathBrowsePopUp");
    
    //Check the combo box
    if(VerifyObjectExists(filePathComboBox))
    {
      //Get the file path 
      actualFilePath = filePathComboBox["Text"];
      
      //Verify the path
      if(actualFilePath == fileToImport)
      {
        Log["Message"]("Uploaded File path is displaying, Displayed File Path: " + fileToImport );
        Log["PopLogFolder"]();
        return true;
        
      } else{
          Log["Error"]("Uploaded File path is not displaying");
          Log["PopLogFolder"]();
          return false;
      }
    } else{
        Log["Error"]("Unable to locate file path combo box");
        Log["PopLogFolder"]();
        return false;
    }
}

//***************************************************************************************
//*   Function Name       : AcceptTheImportSuccessMessageFromPrimeDisp()
//*   Function Description: This function is used to Accept import Success message 
//*   Input               : fileToImport,isFreshCSV
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function AcceptTheImportSuccessMessage()
{
  try
  {
    Log["AppendFolder"]("Import Worklist :: Accept The Success confirmation Message");
    
    if(!CheckTheSuccessConfirmationPopUpDisplayed())
    {
      Log["Error"]("Success message popup is not displaying")
      Log["PopLogFolder"]();
      return false; 
    }
    if(!AcceptConfirmationPopup())
    {
      Log["Error"]("Unable to Close the SID Duplicate message popup")
      Log["PopLogFolder"]();
      return false;
    }
    if(CheckTheImportWorklistPopUpDisplayed())
    {
      Log["Error"]("Accept Confirmation Failed : Import Worklist popup still displaying")
      Log["PopLogFolder"]();
      return false;
    } else {
      Log["Checkpoint"]("Import Worklist Success")
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
  
}

//***************************************************************************************
//*   Function Name       : CheckTheSuccessConfirmationPopUpDisplayed()
//*   Function Description: This function is used to verify the Success Confirmation popup displayed or not
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//***************************************************************************************** 
function CheckTheSuccessConfirmationPopUpDisplayed()
{
  try
  {
    Log["AppendFolder"]("Check the Success confirmation pop up displayed");
    
    //Refresh the screen
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"](); 
    
    //Get the Success message popup control
    var alertPopup = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Get the popup title control
    var alertPopUpTitleContainer = Getchild(alertPopup,"AutomationId","AlertTitleTextBlock");
    
    //Get the Title Text
    var SuccessMessagePopUpTitle = alertPopUpTitleContainer["Text"];
    
    if(SuccessMessagePopUpTitle == "Info")
    {
      Log["Message"]("Success Message pop up displaying")
      Log["PopLogFolder"]();
      return true;
    } else{
        Log["Error"]("Success Message pop up is not displaying")
        Log["PopLogFolder"]();
        return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

//***************************************************************************************
//*   Function Name       : AcceptConfirmationPopup()
//*   Function Description: This function is used to click Ok on confirmation popup
//*   Input               : NA
//*   Output              : true/false
//*   Date of Creating    : 28 August 2019
//*   Created By          : Ramani Paulsamy
//***************************************************************************************** 
function AcceptConfirmationPopup()
{
  try
  {
    Log["AppendFolder"]("Accept the Import confirmation popup");
    
    //Refresh the root node of the application to get the latest popup details
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75")["Refresh"](); 
 
    //Get the popup displayed in worklist screen
    var alertPopup = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Get the Ok button control from the confirmation popup
    var okBtn = Getchild(alertPopup, "AutomationId", "PrimaryButton");
    
    //Check the ok button is displayed and enabled
    if(VerifyObjectEnabled(okBtn))
    {
      Log["Message"]("click On Ok Button");
      
      //Click on the ok button in the success confirmation popup      
      ClickCtrl(okBtn);
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Ok button is not enabled in Success Confirmation Popup");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

//----------------------------------------------------------------------------------------


//***************************************************************************************
//*   Function Name       : VerifyTheOrderExistsInGrid()
//*   Function Description: This function is used to Verify the Patient Sample Displaying is Work List Grid
//*   Input               : patientOrderName
//*   Output              : return true, if the Patient Sample is Displayed in Work List Grid
//*                         return true, if the Patient Sample is not Displayed in Work List Grid
//*   Date of Creating    : 09 June 2019
//*   Last Modified date  : 09 June 2019
//*   Created By          : Ramani Paulsamy
//*****************************************************************************************
function VerifyTheOrderExistsInWorkListGrid(sampleId)
{
try
  {
    Log["AppendFolder"]("Worklist :: Check the Order exists in WorkList grid"); 
    
    //Get the worklist datagrid 
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
      
    //Check the worklist datagrid is dispalyed
    if(!VerifyObjectExistance(worklistDataGridObj))
    {
      Log["Error"]("Unable to locate WorkList grid");
      Log["PopLogFolder"]();
      return false;
    }
      
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Iterate the rows  to get the row of the given sample id
    var isDataExist = false;
    
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
    {
      var rowParent = rowDetails[rowIndex];      
      var strCellValue = Getchild(rowParent, ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
      strCellValue = GetNativeObjectName(strCellValue);
      
      //If PatientOrderName Exists => Then validate the status
      if(strCellValue == sampleId)
      {          
        //Get CheckBox for sample
       Log["Message"]("The record name - " + sampleId + "' exists in the datagrid");
       isDataExist = true;
       break;            
      }
    }
    Log["PopLogFolder"]();
    return isDataExist;
 }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();    
    return false;
  }
}

function VerifyRunIdInWorkListScreen(runId)
{
  try
  {
    Log["AppendFolder"]("Worklist :: Check the Run Id is displayed")
    
    //Click the SampleID Cloumn
    if(UpdateTheWorklistColumnHeaderForRunId()) 
    {
      Log["Message"]("Worklist datagrid is updated to display the run id details");
      
      //Click the SampleID Column header
      if(CheckTheRunIdListedInTheWorklistDataGrid(runId)) 
      {
        Log["Message"]("Given run id is listed in the worklist datagrid");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Message"]("Unable to locate the run id displayed in the worklist datagrid");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Message"]("Unable to update the run id as column header for the worklsit datagrid");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;  
  }
}

function UpdateTheWorklistColumnHeaderForRunId() 
{
  try
  {
    Log["AppendFolder"]("Worklist :: Update the column header from Sample Id to Run Id");
    
    //Get the place order button
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
    
    if(VerifyObjectExists(worklistDataGridObj))
    {
      //Get the columneheader 
      var columnHeaderGroupCtrl = Getchild(worklistDataGridObj, "ClassName", "GridHeaderRow");
    
      //Get the SID header
      var sampleIdHeader = Getchild(columnHeaderGroupCtrl, ["ClassName", "ObjectIdentifier"], ["TextBlock","SID"]);
    
      //Get the RunID Header 
      var runIdHeader = Getchild(columnHeaderGroupCtrl, ["ClassName", "ObjectIdentifier"], ["TextBlock","Run_ID"]);
    
      //Check the RunID Setings button exists
      if(VerifyObjectExists(sampleIdHeader)) 
      {
        //Click on the place order button
        ClickCtrl(sampleIdHeader);
      
        //Select RunID radio button from header
        if(SelectRunIdFromWorklistColumnOption())
        {
          //Check the column name is updated as runid
          var runIdHeader = Getchild(columnHeaderGroupCtrl, ["ClassName", "ObjectIdentifier"], ["TextBlock","Run_ID"]);
          if(VerifyObjectExists(runIdHeader))
          {
            Log["Message"]("Column name is successfully updated as run id in worklist datagrid");
            Log["PopLogFolder"]();
            return true;
          } else {
            Log["Message"]("Unable to update the worklist column header as run id");
            Log["PopLogFolder"]();
            return false;
          }        
        } else {
          Log["Message"]("Unable to locate the run id radio button option");
          Log["PopLogFolder"]();
          return false;
        }            
      } else if(VerifyObjectExists(runIdHeader)) {
        Log["Message"]("Run Id is already selected in the column header");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Message"]("Unable to locate the sample id header in worklist datagrid");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("Unable to locate the worklist data grid object");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectRunIdFromWorklistColumnOption() 
{
  try
  {
    Log["AppendFolder"]("Worklist :: Select the Run ID radio button on the worklist column header");
    
    //Get the aprent obj
    var primeDispObj = Sys["WaitProcess"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75", 240000);
    
    //Get the place order button
    var runIdHeader = Getchild(primeDispObj, ["ClassName","ObjectIdentifier"],["RadioButton","Run_ID"]);
    
    //Check the RunID run ID radio button exists
    if(VerifyObjectExists(runIdHeader)) 
    {
      Log["Message"]("Run Id radio button is located");
      
      //Click on the RunID radio button
      ClickCtrl(runIdHeader);
      
      Log["Message"]("Clicked on the Run Id radio button");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Message"]("Run ID header button is not enabled");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function CheckTheRunIdListedInTheWorklistDataGrid(runId) 
{
  try
  {
    Log["AppendFolder"]("Worklist :: Check the given run id '" + runId + "' is listed in the worklist datagrid");
    
    //Get the WorkList DataGrid container
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
      
    //Check the datagrid is displayed
    if(VerifyObjectExistance(worklistDataGridObj))
    {
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the datagrid");
        Log["PopLogFolder"]();
        return false;
      }
      
      var isRunIdLocated = false;
      
      //Iterate the rows  to get the row of the given sample id
      for(var rowIndex=0; rowIndex < rowDetails.length; rowIndex++)
      {
        var rowParent = rowDetails[rowIndex];          
        var strCellValue = Getchild(rowParent, ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
        strCellValue = GetNativeObjectName(strCellValue);
                
        //check the run id is displayed as expected
        if(strCellValue == runId)
        {
          Log["Message"]("Created run Id '" + runId + "' has been located in the worklist datagrid");
          Log["PopLogFolder"]();
          return true;
        }
      }
      
      //check the run id is located
      if(!isRunIdLocated)
      {
        Log["Error"]("Unable to locate the given run id '" + runId + "' from the worklist data grid");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Message"]("Unable to locate the worklit datagrid");
      Log["PopLogFolder"]();
      return false;
    }       
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function VerifyTheSampleResultedStatusInWorkListWithoutErrorSymbol(SID)
{
  try
  {
    //Initialize
    var strSampleStatus = "";
    var strResult       = "";
    var strTestName     = "";
    var strFlags        = "";
    
    Log["AppendFolder"]("Waiting for the Sample '" + SID + "' to be resulted in worklist screen");

    //Get the Worklist Grid
    var worklistDataGridObj = GetAutomationIDControl("Worklist", "grdWorkList");
    
    //Verify the Worklist Grid
    if(!VerifyObjectExistance(worklistDataGridObj))
    {
      Log["Error"]("Unable to locate WorkList grid");
      Log["PopLogFolder"]();
      return false;
    }
    
    var filterExpandedState = IsDataGridDisplayedAsFullView();
    var flagColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Worklist","Flags", filterExpandedState);
    var resultValueColumnIndex = GetDataGridColumnIndexFromMetadataSheet("Worklist","Result", filterExpandedState);
    
    //get the row details from the datagrid    
    var rowDetails = GetSFGridRowDetails(worklistDataGridObj);
    
    if(!rowDetails)
    {
      Log["Error"]("There are no records displayed in the datagrid");
      Log["PopLogFolder"]();
      return false;
    }
    	   
    //Iterate the rows  to get the row of the given sample id
    for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
    {
      var rowParent = rowDetails[rowIndex];
      //Get the sample ID of the row
      var sampleIDLinkCtrl = Getchild(rowParent, ["ClassName", "AutomationId"], ["Hyperlink","HLButtonSID"]);
      var actualSampleValue = GetNativeObjectName(sampleIDLinkCtrl);
      
      //If SID Exists => Then validate the status
      if(actualSampleValue == SID)
      { 
        //Get the Current status
        strSampleStatusImage = Getchild(rowParent,"AutomationId","BtnTestStatus")
        strSampleStatus = strSampleStatusImage["HelpText"];
          
        //Get Test name
        testNameObjCtrl  = Getchild(rowParent, ["ClassName", "AutomationId"] , ["Hyperlink","HLBTestName"]);
        strTestName = GetNativeObjectName(testNameObjCtrl);
        
        var rowCells = GetAllChildren(rowParent,"ClassName","GridCell").reverse();
        
        //Verify the sample status is 'Error'
        if(strSampleStatus == "Error")
        {
          Log["Message"]("Sample '" + SID + "' Failed to process")
          
          //Get the flag object
          var flagObjCtrl = Getchild(rowCells[flagColumnIndex],"ClassName","TextBlock")
          var strFlags = flagObjCtrl["Text"]
          
          if(strFlags != "")
          {
            Log["Message"]("Worklist sample flag is obtained as '" + strFlags + "' for sample '" + SID + "'");
          } 
          
          Log["PopLogFolder"]()
          return false;
        }
                
        //Verify the sample status is 'Completed'
        if(strSampleStatus == "Complete"||strSampleStatus == "Hold") 
        {
          Log["Message"]("Sample '" + SID + "' Processed Successfully")
          
          //Get the flg object
          var flagObjCtrl = Getchild(rowCells[flagColumnIndex],"ClassName","TextBlock")
          var strFlags = flagObjCtrl["Text"]
          
          if(strFlags != "")
          {
            Log["Message"]("Worklist sample flag is obtained as '" + strFlags + "' for sample '" + SID + "'");
          } 
          
          //Get the result
          var resultObjCtrl = Getchild(rowCells[resultValueColumnIndex],"ClassName","TextBlock")
          var strResult = resultObjCtrl["Text"]
           
          if(strResult == undefined || strResult == "") 
          {
            Log["Error"]("Sample result vaue is not displayed / upated to the worklist datagrid for the sample : '" + SID);
            Log["PopLogFolder"]();
            return false;
          } else if (strResult == "Error") {
            Log["Error"]("Result : " + strResult + " - " + strFlags);
            Log["PopLogFolder"]();
            return false;
          } else if (aqString["Find"](strFlags,"Cal Invalid") != -1) {
            Log["Message"]("Result : " + strResult + " - " + strFlags );
          } else{
            Log["Message"]("Result : " + strResult);
          }
            Log["PopLogFolder"]()
            return true;
        }
                
        var isSampleProcessStarted = false;
        var i=0;
          
        //If Sample is not "In process" then Wait -1.5 minutes        
        while(strSampleStatus == "Ordered" && i<45)
        {
          Log["Message"]("Sample '" + SID + "' is in Ordered Status");
          i = i+1;
          aqUtils["Delay"](2000);
              
          //Get the Current status
          strSampleStatusImage = Getchild(rowParent,"AutomationId","BtnTestStatus")
          strSampleStatus = strSampleStatusImage["HelpText"];
          
          //Verify the Sample status is 'Inprocess'
          if(strSampleStatus  == "Inprocess")
          {
            Log["Message"]("Sample '" + SID + "'  process started successfully");
            isSampleProcessStarted = true;
            break;
          }
        }
        
        //Verify the Sample Process Stared or Sample Status is inprocess        
        if(strSampleStatus == "InProcess")
        {
          Log["Message"]("Processing " + SID + " for " + strTestName + " test");
          
          var count =0;
          var isSampleProcesscompleted=false;
          var isSampleProcessFailed = false;
            
          //If Sample is "In process" then Wait -25 minutes          
          while(strSampleStatus  == "InProcess" && count <132)
          {
            count = count+1;
            aqUtils["Delay"](10000);
            
            //Get the Current status
            strSampleStatusImage = Getchild(rowParent,"AutomationId","BtnTestStatus")
            strSampleStatus = strSampleStatusImage["HelpText"];
            
            //Verify the Sample Status is 'Complete' or 'Error' or Others            
            if((strSampleStatus == "Complete")||(strSampleStatus == "Hold"))
            {
              Log["Message"]("Sample '" + SID + "'  processed successfully");
              isSampleProcesscompleted = true;
              break;
            }            
            else if(strSampleStatus == "Error")
            {
              isSampleProcessFailed = true;
              Log["Error"]("Sample '" + SID + "' Failed to process")
              break;
            } 
          }
          
          //Verify the Sample Process Completed or Failed
          if(isSampleProcesscompleted || isSampleProcessFailed)
          {
            //Get the flag object
            var flagObjCtrl = Getchild(rowCells[flagColumnIndex],"ClassName","TextBlock")
            var strFlags = flagObjCtrl["Text"]
        
            if(strFlags != "")
            {
              Log["Message"]("Worklist sample flag is obtained as '" + strFlags + "' for sample '" + SID + "'");
            } 
            
            //Get the result
            var resultObjCtrl = Getchild(rowCells[resultValueColumnIndex],"ClassName","TextBlock")
            var strResult = resultObjCtrl["Text"]
            
            if(strResult == undefined || strResult == "") 
            {
              Log["Error"]("Sample result vaue is not displayed / upated to the worklist datagrid for the sample : '" + SID);
              Log["PopLogFolder"]();
              return false;
            } else if (strResult == "Error") {
              Log["Error"]("Result : " + strResult + " - " + strFlags);
              Log["PopLogFolder"]();
              return false;
            } else if (aqString["Find"](strFlags,"Cal Invalid") != -1) {
              Log["Message"]("Result : " + strResult + " - " + strFlags );
            } else{
              Log["Message"]("Result : " + strResult);
            }
          } else{
              Log["Error"]("Sample Processing not updated for the ' " + SID + "' after Specified time")
              Log["PopLogFolder"]()
              return false;
          }
        } else{
            Log["Picture"](Sys["Desktop"]["ActiveWindow"](), "Sample Processing not updated for the " +SID)
            Log["Error"]("Sample Processing not updated for the " +SID)
            Log["PopLogFolder"]()
            return false;
        }
      }  
    }
    Log["PopLogFolder"]();
    return true;
  }
	catch(e)
	{
	  Log["Error"]("Exception " , e["description"]);
	  Log["PopLogFolder"]();
    return false;
	}    
}
//USEUNIT TCNativeLibraries
//USEUNIT ControlAccessLibrary
//USEUNIT WorkflowNavigator



//======================================= How Do I =======================================

//***************************************************************************************
//*   Function Name        : SelectWorkflowFromWorkflowDataGrid(workflowName)
//*   Function Description : This function is used to click on the 'Workflow name' located in the How Do I workflow grid
//*   Input                : workflowName
//*   Output               : return true, if the workflow name is exist and selected
//*                          return false, if the workflow name is not available / unable to select
//*   Created By           : Prabu Ramaraj
//*   Created Date         : 10 th December 2019
//*   Modified By          : Prabu Ramaraj (Upgraded to SF grid)
//*   Modified Date        : 04 th January 2020
//*****************************************************************************************
function SelectWorkflowFromWorkflowDataGrid(workflowName)
{
  try
  {
    Log["AppendFolder"]("How Do I :: Selecting Workflow '" + workflowName + "' from the workflow datagrid");
    var  isWorkFlowNameLocated = false;
    
    //get workflow datagrid
    var workflowGridCtrl = GetAutomationIDControl("HowDoI","dtgrdWorkflowWizard");
    
    //check the workflow wizard datgrid displayed
    if(VerifyObjectExists(workflowGridCtrl))
    {
      //get the index of the workflow column name
      var workFlowColumnIndex = GetDataGridColumnIndexFromMetadataSheet("HowDoI_WorkflowWizard","Workflow");
      
      //get row details
      var rowDetails = GetSFGridRowDetails(workflowGridCtrl);
      
      if(!rowDetails)
      {
        Log["Error"]("There are no records displayed in the event Log datagrid");
        Log["PopLogFolder"]();
        return false;
      }
     
      //Iterate the rows  to get the row of the given sample id
      for(var rowIndex=0; rowIndex<rowDetails.length; rowIndex++)
      {
        //get the row information
        var rowParent = rowDetails[rowIndex];
        
        //get the datagrid cell list
        var datagridcells = GetAllChildren(rowParent, "ClassName", "GridCell").reverse();
        
        //Get the Code Cell
        var wfNameCtrl = Getchild(datagridcells[workFlowColumnIndex], "ClassName", "TextBlock"); 
      
         //Check if the workflow name is matching
        if(aqString.Trim(wfNameCtrl["Text"]) == workflowName)
        {
          //click on the workflow name found
          ClickCtrl(wfNameCtrl);
          isWorkFlowNameLocated = true;
          break;
        }
      }
        
      //check the workflow name is identified and clicked
      if(isWorkFlowNameLocated)
      {
        Log["CheckPoint"]("Workflow name '" + workflowName + "' is located and clicked in workflow wizard datagrid");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Unable to locate the workflow name '" + workflowName + "'");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("Unable to locate the workflow wizard datagrid");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : ClickOnLaunchButtonAtHowDoI()
//*   Function Description : This function is used to click on the 'Launch Button' located in the How Do I screen
//*   Input                : -
//*   Output               : return true, if the launch button is located and clicked
//*                          return false, if the launch button is not located  / enabled / unable to click
//*   Created By           : Prabu Ramaraj
//*   Created Date         : 10 th December 2019
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function ClickOnLaunchButtonAtHowDoI()
{
  try
  {
    Log["AppendFolder"]("How Do I :: Click on Launch Button in Workflow DataGrid");
    //get launch button
    var launchBtnCtrl = GetAutomationIDControl("HowDoI", "btnLaunchWorkflowWizard");
    
    //Check the launch button is enabled
    if(VerifyObjectEnabled(launchBtnCtrl))
    {
      Log["Message"]("Launch button is enabled in How Do I screen");

      //Click on the launch button
      ClickCtrl(launchBtnCtrl);
      
      Log["Message"]("Successfully clicked on the launch button in How Do I screen");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Launch button is not enabled in How Do I Screen");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//========================================================================================



//============================ Assay Setup Popup (Select Assay Type) =====================

//***************************************************************************************
//*   Function Name        : CheckAssaySetupPopupDialogDisplayed()
//*   Function Description : This function is used to check the Assay SetUp Popup is Displyed 
//*   Input                : -
//*   Output               : return true, if the Assay Setup Popup is Displayed
//*                          return false, if the Assay Setup Popup is not Displayed
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function CheckAssaySetupPopupDialogDisplayed()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Check the 'Assay Type' Selection Popup is displayed")
    
    //get assay setup popup control 
    var assaySetupPopup = GetAutomationIDControl("HowDoI_AssaySetup","assaySetupPop");
    
    //Check the popup is displayed
    if(VerifyObjectExists(assaySetupPopup))
    {
      Log["CheckPoint"]("Assay Type Selection Popup is located");
      Log["PopLogFolder"]();
      return true;
    } else {
      Log["Error"]("Unable to locate the Assay Type Selection Poppup");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : SelectAssayTypeInAssaySetup()
//*   Function Description : This function is used to Select the Assay type In Assay Setup Popup
//*   Input                : assayType (CH or IM)
//*   Output               : return true, if the given Assay Type is Selected
//*                          return false, if the given Assay Type is not Selected
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function SelectAssayTypeInAssaySetup(assayType)
{
  try
  {
    Log["AppendFolder"]("AsaySetup :: Selecting the Assay Setup as '" + assayType + "'");
    
    //Check the assay setup popup is displayed
    if(!CheckAssaySetupPopupDialogDisplayed())
    {
      Log["Error"]("Unable to locate the Assay Setup Popup, to navigate to the TDef Modify screen");
      Log["PopLogFolder"]();
      return false;
    }
    
    var assayTypeRadioBtn = undefined;
    
    //Get the assay type radio button control for IM
    if(assayType == "IM") {
      assayTypeRadioBtn = GetAutomationIDControl("HowDoI_AssaySetup", "rdBtnAssayTypeIM"); } 
    
    //Get the assay type radio button control for CH
    else if (assayType == "CH") {
      assayTypeRadioBtn = GetAutomationIDControl("HowDoI_AssaySetup", "rdBtnAssayTypeCH"); } 
    
    //Get the assay type radio button control for Operator Defined
    else if(assayType == "OD") {
      assayTypeRadioBtn = GetAutomationIDControl("HowDoI_AssaySetup", "rdBtnAssayTypeOD"); }
    
    //Verify assay type radio button is displayed 
    if(VerifyObjectEnabled(assayTypeRadioBtn))
    {
      //Click the 'CH' radio button
      ClickCtrl(assayTypeRadioBtn);
      
      //check the radio button is selected
      if(GetRadioButtonStatus(assayTypeRadioBtn))
      {
        Log["Message"]("Assay type '" + assayType + "' radio button is selected successfully");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Assay type '" + assayType + "' radio button is located but and unable to select");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("Unable to locate the assay type '" + assayType + "' radio button");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : SelectViewEditDeleteForIM()
//*   Function Description : This function is used to select the Viwe Edit Delete option under the IM assay type
//*   Input                : -
//*   Output               : return true, if the view edit delete option is selected
//*                          return false, if the view edit deelte option does not exist / selected 
//*   Created By           : Prabu Ramaraj
//*   Created Date         : 10 th December 2019
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function SelectViewEditDeleteForIM()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Select the View Edit Delete Radio button for IM assay type");
    
    //get assay setup popup control 
    var assaySetupPopup = GetAutomationIDControl("HowDoI_AssaySetup","assaySetupPop");
        
    var viewEditRadioBtnCtrl = Getchild(assaySetupPopup, "AutomationId", "ViewEditRadioButton");
    
    //Check the radio button is exists
    if(VerifyObjectEnabled(viewEditRadioBtnCtrl))
    {
      //Click the 'View Edit Delete' radio button
      ClickCtrl(viewEditRadioBtnCtrl);
      
      //check the radio button is selected
      if(GetRadioButtonStatus(viewEditRadioBtnCtrl))
      {
        Log["Message"]("View Edit Delete radio button is successfully selected for the IM Assay type");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("View Edit Delete radio button is failed to select for the IM Assay type");
        Log["PopLogFolder"]();
        return false;
      }
    } else {
      Log["Error"]("Unable to locate the view edit delete radio button");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : ClickNextButtonInAssaySetupPopup()
//*   Function Description : This function is used to Click on Next Button in Assay Setup Popup
//*   Input                : - 
//*   Output               : return true, if Clicked on Next Button
//*                          return false, if not Clicked on Next Button
//*   Created By           : Prabu Ramaraj
//*   Created Date         : -
//*   Modified By          : Prabu Ramaraj
//*   Modified Date        : 10 th December 2019
//*****************************************************************************************
function ClickNextButtonInAssaySetupPopup()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Click on the 'Next' button to setup the assay information");
    
    //get assay setup popup control 
    var assaySetupPopup = GetAutomationIDControl("HowDoI_AssaySetup","assaySetupPop");
    
    //get the next button ctrl from assay setup popup
    var nextBtnCtrl = Getchild(assaySetupPopup,["AutomationId", "ObjectIdentifier"],["primaryButton","Next"]);
    
    //check the button is enabled
    if(VerifyObjectEnabled(nextBtnCtrl))
    {
      Log["Message"]("'Next' button is located and enabled in the Assay Type Selection Popup");
      
      //click on the next btn in assay setup popup
      ClickCtrl(nextBtnCtrl);
      
      Log["Message"]("Clicked on the Next button");      
      Log["PopLogFolder"]();
      return true;      
    } else {
      Log["Error"]("Next button is not enabled in Assay Setup popup");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//========================================================================================



//===========================View Edit Assay (Select Assay Name) =========================

//***************************************************************************************
//*   Function Name        : SelectAssayByAssayName()
//*   Function Description : This function is used to Select the Assay Name
//*   Input                : assayName 
//*   Output               : return true, if the given Assay Name is Selected
//*                          return false, if the given Assay Name is not Selected
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          : Prabu Ramaraj
//*   Modified Date        : 10 th December 2019
//*****************************************************************************************
function SelectAssayByAssayName(assayName)
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Select any assay from the list of assays displayed");
    
    //Test selection popup for the assay IM / CH
    var assaySelectionPopup = GetAutomationIDControl("HowDoI_AssaySetup_ViewEditAssay", "viewEditAssaySetupPop");
    
    //get the test list grid view item
    var gridviewItemCtrl = Getchild(assaySelectionPopup, "AutomationId", "TestsSearchGridView");
    
    //check the grid view item ctrol is displayed
    if(VerifyObjectExists(gridviewItemCtrl))
    {
      //Get the grid view list items under the assay grid view
      var assayListItem = Getchild(gridviewItemCtrl,["AutomationId","Text"],["LabelMnemonic",assayName]);
      
      //Check assay is displayed
      if(VerifyObjectExists(assayListItem))
      {
        Log["Message"]("Assay '"+ assayName + "' is located in the test list");
        
        //check if assay is selected
        if(assayListItem["Parent"]["IsSelected"] != true)
        {
          var textCtrl = Getchild(assayListItem, "TextBlock")
          assayListItem["ScrollIntoView"]();
          
          //Select the assay
          ClickCtrl(assayListItem);
          
          Log["Message"]("Selected the assay '" + assayName + "' from the list of assays");
          Log["PopLogFolder"]();
          return true;          
        } else {
          Log["Message"]("Assay '" + assayName + "' is already selected");
          Log["PopLogFolder"]();
          return true;
        }
      } else {
        Log["Message"]("The given assay name '" + assayName + "' is not listed, So selecting the other assay to get into the Assay Setup");
        
        //var assayList = GetAllChildren(gridviewItemCtrl, "ClassName", "GridViewItem");
        var assayList = GetAllChildren(gridviewItemCtrl, "AutomationId", "LabelMnemonic");
        
        if(assayList.length > 0)
        {
          //assayList = assayList.reverse();
          var assayIndex = 0;
          
          //get the first assay
          var assayListItem = assayList[assayIndex];
          
          //check assay is displayed
          if(VerifyObjectExists(assayListItem))
          {
            Log["Message"]("Selecting the first index assay '" + assayListItem["Text"] + "'from the assay list");
            
            //check assay is selected
            if(assayListItem["Parent"]["IsSelected"] != true)
            {
              assayListItem["ScrollIntoView"]();
              
              //select the assay
              ClickCtrl(assayListItem);
              
              Log["Message"]("Selected the assay '" + assayListItem["Text"] + "'");
              Log["PopLogFolder"]();
              return true;          
            } else {
              Log["Message"]("Assay '" + assayListItem["Text"] + "' is already selected");
              Log["PopLogFolder"]();
              return true;
            }
          }          
        } else {
          Log["Error"]("There is no assay name listed in the assay selection popup");
          Log["PopLogFolder"]();
          return false;
        }
      }     
    } else {
      Log["Error"]("Unable to locate the assay list grid view in the assay selection popup");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : ClickOkbuttonInAssaySelectionPopup()
//*   Function Description : This function is used to Click on OK Button in Assay Selection Popup
//*   Input                : - 
//*   Output               : return true, if Clicked on OK Button
//*                          return false, if not Clicked on OK Button
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function ClickOkbuttonInAssaySelectionPopup()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Click on the 'OK' button in the Assay Selection Popup");
        
    //Test selection popup for the assay IM / CH
    var assaySelectionPopup = GetAutomationIDControl("HowDoI_AssaySetup_ViewEditAssay", "viewEditAssaySetupPop");
    
    //get the ok button ctrl from assay setup popup
    var okBtnCtrl = Getchild(assaySelectionPopup,"AutomationId","primaryButton");
    
    //check the button is enabled
    if(VerifyObjectEnabled(okBtnCtrl))
    {
      Log["Message"]("'OK' button is located and enabled in the 'View Edit Assay' name selection popup");
      
      //click on the ok btn in assay seelction popup
      ClickCtrl(okBtnCtrl);
      
      Log["Message"]("Clicked on the 'OK' button located in the 'View Edit Assay' name seelection popup");
      Log["PopLogFolder"]();
      return true;      
    } else {
      Log["Error"]("OK button is not enabled in Assay Selection Popup");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//========================================================================================



//==========================TDef Screens for the Selected Assay Name======================

//***************************************************************************************
//*   Function Name        : SelectAssayFromAssayListTabInTDefPopup()
//*   Function Description : This function is used to Select the Assay from Assay List Tab in TDef Popup
//*   Input                : assayName 
//*   Output               : return true, if the given Assay is selected from Assay List Tab in TDef Popup
//*                          return false, if the given Assay is not selected from Assay List Tab in TDef Popup
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function SelectAssayFromAssayListTabInTDefPopup(assayName)
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Selecting the given assays from the assays in TDef Popup");
    
    //Get the assay list tab content
    var assayListTabContent = GetAutomationIDControl("HowDoI_AssaySetup_AssayList", "pageTdefAssayListContent");
    
    //check assaylist tab is displayed    
    if(VerifyObjectExists(assayListTabContent))
    {
      //get the test search grid view     
      var assaySearchView = Getchild(assayListTabContent, "AutomationId", "TestsSearchGridView");
    
      //get the search box control
      var searchBoxCtrl = Getchild(assaySearchView, "AutomationId", "searchBox");
        
      //clear the text in the search box
      SetValue(searchBoxCtrl,"");
        
      //enter the assay name in the search box
      SetValue(searchBoxCtrl,assayName);
        
      aqUtils["Delay"]("2000", "Wait for the assays to be filtered");
      
      //get the filtered assay list
      var filteredAssay = Getchild(assaySearchView, ["ClassName","ObjectIdentifier"], ["GridViewItem", assayName]);
        
      //check the assay is displayed
      if(VerifyObjectExists(filteredAssay))
      {
        Log["Message"]("Assay '" + assayName + "' is located");
        
        //If the filtered assay is not selected
        if(filteredAssay["IsSelected"] != true) {
          //click on the assay to select
          ClickCtrl(filteredAssay);
          
          Log["Message"]("Clicked on the Assay '" + assayName + "' to select");
          Log["PopLogFolder"]();
          return true; } 
        
        //if the filtered assay is already selected
        else {
          Log["Message"]("Assay '" + assayName + "' is already selected");
          Log["PopLogFolder"]();
          return true; }
      } else {
        Log["Error"]("Unable to locate the assay '" + assayName + "' from the filtered assay");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unabel to locate the Assay List Tab Content from TDef Popup");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : ClickOnSaveButtonInAssayList()
//*   Function Description : This function is used to Click on Save Button in Assay List
//*   Input                : - 
//*   Output               : return true, if Clicked on Save Button in Assay List
//*                          return false, if not Clicked on Save Button in Assay List
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function ClickOnSaveButtonInAssayList()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Click on 'Save' button to save the unsaved items of the assay setup");
    
    //Get the assay list tab content
    var assayListTabContent = GetAutomationIDControl("HowDoI_AssaySetup_AssayList", "pageTdefAssayListContent");
    
    //Get the Save Button Control
    var saveButtonCtrl = Getchild(assayListTabContent, "AutomationId", "SaveAssayBtn");
    
    //check Save button is enabled
    if(VerifyObjectEnabled(saveButtonCtrl)) {
      Log["Message"]("'Save' assay list button is located and enabled");
      
      //click on the save button
      ClickCtrl(saveButtonCtrl);
      
      Log["Message"]("'Save' Assay List Button is Clicked");
      Log["PopLogFolder"]();
      return true;  }
    
    //check save button exists
    else if (VerifyObjectExists(saveButtonCtrl)) {
      Log["Error"]("'Save' button is exist but not enabled");
      Log["PopLogFolder"]();
      return false; } 
    
    //If the button doesn't enabled / exists
    else {
      Log["Error"]("Unable to locate the assay list save button");
      Log["PopLogFolder"]();
      return false; }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : IsSaveAssayListButtonEnabled()
//*   Function Description : This function is used to Check the Save Button is Enabled in Assay List Tab
//*   Input                : - 
//*   Output               : return true, if Save Button is Enabled in Assay List Tab
//*                          return false, if Save Button is not Enabled in Assay List Tab
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function IsSaveAssayListButtonEnabled()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Check the save assay list button is enabled");
    
    //Get the assay list tab content
    var assayListTabContent = GetAutomationIDControl("HowDoI_AssaySetup_AssayList", "pageTdefAssayListContent");
    
    //Get the Save Button Control
    var saveButtonCtrl = Getchild(assayListTabContent, "AutomationId", "SaveAssayBtn");
    
    //check Save button is enabled
    if(VerifyObjectEnabled(saveButtonCtrl)) {
      Log["Message"]("Save assay list button is located and enabled");
      Log["PopLogFolder"]();
      return true;  }
    
    //check Save button exists and not enabled
    else if(saveButtonCtrl["Exists"]) {
      Log["Error"]("Save assay list button is exist but not enabled, due to unchanged assay details");
      Log["PopLogFolder"]();
      return false; }
    
    //If the button doesn't enabled / exists
    else {
      Log["Error"]("Unable to locate the assay list save button");
      Log["PopLogFolder"]();
      return false; }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : AcceptSaveAssayListInformationPopup()
//*   Function Description : This function is used to Accept the Save Assay List information Confirmation Popup
//*   Input                : - 
//*   Output               : return true, if Successfully Accepted the Save Assay List info Confirmation
//*                          return false, if not Accepted the Save Assay List info Confirmation
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function AcceptSaveAssayListInformationPopup()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Click on Yes button in assay list save information alert popup");
    
    //get the root element control and refresh
    Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75").refresh();
    
    //get the alert dialog
    var alertDialog = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //check the alert dialog is displayed;
    if(VerifyObjectExists(alertDialog))
    {
      //get the title of the alert
      var title = Getchild(alertDialog, "AutomationId", "AlertTitleTextBlock");
      
      //get the 'Yes' button in the alert 
      var yesBtn = Getchild(alertDialog,["AutomationId","ObjectIdentifier"],["PrimaryButton", "Yes"]);
      
      //check the alert title is information
      if(title["Text"] == "Information")
      {
        //Click on the yes button
        ClickCtrl(yesBtn);
        
        Log["Message"]("Clicked on the Yes button in information popup");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Some other new popup is displayed on action of Save Assay list");
        Log["PopLogFolder"]();
        return false;
      }
      
    } else {
      Log["Error"]("Unable to locate the alert dialog");
      Log["PopLogFolder"]();
      return false;      
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : FinishAndExitAssaySetup()
//*   Function Description : This function is used to Click On Finish & No Buttons for Exit from Assay Setup 
//*   Input                : - 
//*   Output               : return true, if Successfully Exit from Assay Setup
//*                          return false, if not Exit from Assay Setup
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function FinishAndExitAssaySetup()
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Click on 'Finish' button and click on 'No' to exit");
    
    //get the Parent control
    var parentElement = Sys["Process"]("5ceed41e-3bef-42e2-9ad9-eb1335f89a75");
      
    //Get the Finish Button Control
    var finishBtnCtrl = Getchild(parentElement, ["ClassName", "ObjectIdentifier"], ["Button", "Finish"]);
    
    //Verify Finish button exists
    if(VerifyObjectEnabled(finishBtnCtrl))
    {
      //Click the Finish Button
      ClickCtrl(finishBtnCtrl);
      Log["Message"]("Clicked on the 'Finish' button");
    
      //refresh the parent element to update the alert dialog content
      parentElement["Refresh"]();
      
      //get the alert dialog
      var alertDialog = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
      
      //Check the alert dialog displayed
      if(VerifyObjectExists(alertDialog))
      {
        //get the alert title
        var title = Getchild(alertDialog, "AutomationId", "AlertTitleTextBlock");
        
        //get the 'No' button in alert dialog
        var noBtn = Getchild(alertDialog,["AutomationId","ObjectIdentifier"],["SecondaryButton", "No"]);
      
        //check the alert title is information
        if(title["Text"] == "Add/Edit Assay" || title["Text"] == "Save Test Definition")
        {
          //Click on the No button
          ClickCtrl(noBtn);
        
          Log["Message"]("Clicked on the 'No' button in Assay setup alert popup");
          Log["PopLogFolder"]();
          return true;
        } else {
          Log["Error"]("Some other new popup is displayed on action of Finsih Assay Setup");
          Log["PopLogFolder"]();
          return false;
        }      
      } else {
        Log["Error"]("Unable to locate the alert dialog");
        Log["PopLogFolder"]();
        return false;      
      }
    } else {
      Log["Error"]("'Finish' button control is not located")
      Log["PopLogFolder"]();
      return false ;
    }
   }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }    
}

//***************************************************************************************
//*   Function Name        : EnableAssaysFromAssayListInPrimeDisp()
//*   Function Description : This function is used to Enable the Assay(s) 
//*   Input                : assayType, assyList
//*   Output               : return true, if all the given Assays are Enabled
//*                          return false, if all the given Assays are not Enabled
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function EnableAssaysFromAssayList(assayList)
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Enable the list of assays from Assay List from TDef Assay List");
    
    var assaySelectionCounter = 0;
    var isAssayStatusUpdated = false;
    var isAllAssayFoundToUpdate = true;
    
    //Search for the assay and enable the assay
    for(var i=0; i<assayList.length; i++)
    {
      Log["AppendFolder"]("Enabling the assay '" + assayList[i] + "'");
      
      if(SelectAssayFromAssayListTabInTDefPopup(assayList[i]))
      {
        assaySelectionCounter = assaySelectionCounter + 1;
        
        //Get the assay list tab content
        var assayListTabContent = GetAutomationIDControl("HowDoI_AssaySetup_AssayList", "pageTdefAssayListContent");
        
        //get assaylist datagrid
        var assaylistDatagrid = Getchild(assayListTabContent, "AutomationId", "dataGrid");
        
        //Select the assay from hydra analyzer
        var rowList = GetAllChildren(assaylistDatagrid, "ClassName", "GridRow").reverse();
        var cellList = GetAllChildren(rowList[0], "ClassName", "GridCell").reverse();          
        var assayText = Getchild(rowList[0], "AutomationId", "AssayText"); //cellList[1]["ObjectIdentifier"];
        var hydraCheckBoxCtrl = Getchild(rowList[0],"ClassName","CheckBox"); //Getchild(cellList[3], "ClassName", "CheckBox");
          
        //check the assay name is matching after filter
        if(assayText["Text"] == assayList[i])
        {
          //check the checkbox is selected
          if(hydraCheckBoxCtrl["ToggleState"] != 1)
          {
            Log["Message"]("Status for the assay '" + assayList[i] + "' is disabled in the assay list");
              
            //click ont he checkbox to select
            ClickCtrl(hydraCheckBoxCtrl);
                            
            Log["Message"]("Clicked on the checkbox to enable the assay '" + assayList[i] + "'");              
              
            isAssayStatusUpdated = true;
            Log["PopLogFolder"]();
          } else {
            Log["Message"]("Assay '" + assayList[i] + "' is already in enabled status");
            Log["PopLogFolder"]();
          }          
        }           
      } else {        
        isAllAssayFoundToUpdate = false;
        Log["Error"]("Unable to locate and select the assay '" + assayList[i] + "'");        
        Log["PopLogFolder"]();
      }      
    }
    
    if(assaySelectionCounter == 0)
    {
      isAllAssayFoundToUpdate = false;
      Log["Error"]("None of the given assays are enabled / checked is that enabled");      
    } else if (assaySelectionCounter < assayList.length) {
      isAllAssayFoundToUpdate = false;
      Log["Warning"]("Some of the given assay are not updated with the enabled status");      
    } else {      
      Log["Checkpoint"]("All the given assays are enabled and verified as enabled");      
    } 
    
    //Check Save assay button enabled
    if(isAssayStatusUpdated)//IsSaveAssayListButtonEnabled())
    {    
      //Click on the save assay button
      if(!ClickOnSaveButtonInAssayList())
      {
        Log["Error"]("Unable to save the modified details in assay setup");
        Log["PopLogFolder"]();
        return false;
      }
      
//      //accept the information popup
//      if(!AcceptSaveAssayListInformationPopup())
//      {
//        Log["Error"]("Unable to locate the save assay list information alert popup");
//        Log["PopLogFolder"]();
//        return false;        
//      }      
    }
    
    //Finish Assay Setup    
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Unable to perform the finish assay setup operation");
      Log["PopLogFolder"]();
      return false;
      
    }
    
    //Check all the given assays are found and enabled
    Log["PopLogFolder"]();
    if(isAllAssayFoundToUpdate)
    {
      return true;      
    } else {
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : DisableAssaysFromAssayListInPrimeDisp()
//*   Function Description : This function is used to Disable the Assay(s) 
//*   Input                : assayType, assyList 
//*   Output               : return true, if all the given Assays are Disabled
//*                          return false, if all the given Assays are not Disabled
//*   Created By           : Prabu Ramaraj
//*   Created Date         :  -
//*   Modified By          :  -
//*   Modified Date        :  -
//*****************************************************************************************
function DisableAssaysFromAssayList(assayList)
{
  try
  {
    //Disable the assay by filtering    
    Log["AppendFolder"]("AssaySetup :: Disable the list of assays from Assay List from TDef Assay List");
    
    var assaySelectionCounter = 0;
    var isAssayStatusUpdated = false;
    var isAllAssayFoundToUpdate = true;
    
    //Search for the assay and enable the assay
    for(var i=0; i<assayList.length; i++)
    {
      Log["AppendFolder"]("Disabling the assay '" + assayList[i] + "'");
      
      //select assay
      if(SelectAssayFromAssayListTabInTDefPopup(assayList[i]))
      {
        assaySelectionCounter = assaySelectionCounter + 1;
        
        //Get the assay list tab content
        var assayListTabContent = GetAutomationIDControl("HowDoI_AssaySetup_AssayList", "pageTdefAssayListContent");
    
        //get assaylist datagrid container
        var assaylistDatagrid = Getchild(assayListTabContent, "AutomationId", "dataGrid");
        
        //Select the assay from hydra analyzer
        var rowList = GetAllChildren(assaylistDatagrid, "ClassName", "GridRow").reverse();                               
        var cellList = GetAllChildren(rowList[0], "ClassName", "GridCell").reverse();          
	var assayText = Getchild(rowList[0], "AutomationId", "AssayText"); //cellList[1]["ObjectIdentifier"];
        var hydraCheckBoxCtrl = Getchild(rowList[0],"ClassName","CheckBox"); //Getchild(cellList[3], "ClassName", "CheckBox");

          
        //check the assay name is matching after filter
        if(assayText["Text"] == assayList[i])
        {
          //check the checkbox is selected
          if(hydraCheckBoxCtrl["ToggleState"] == 1)
          {
            Log["Message"]("Status for the assay '" + assayList[i] + "' is enabled in the assay list");
              
            //click on the checkbox to de select
            ClickCtrl(hydraCheckBoxCtrl);
                            
            Log["Message"]("Clicked on the checkbox to disable the assay '" + assayList[i] + "'");
              
            isAssayStatusUpdated = true;
            Log["PopLogFolder"]();
          } else {
            Log["Message"]("Assay '" + assayList[i] + "' is already in disabled status");
            Log["PopLogFolder"]();
          }                             
        }       
      } else {        
        isAllAssayFoundToUpdate = false;
        Log["Error"]("Unable to locate and select the assay '" + assayList[i] + "'");        
        Log["PopLogFolder"]();
      }      
    }    
    
    if(assaySelectionCounter == 0)
    {
      isAllAssayFoundToUpdate = false;
      Log["Error"]("None of the given assays are disabled / checked as disabled");     
    } else if (assaySelectionCounter < assayList.length)
    {
      isAllAssayFoundToUpdate = false;
      Log["Warning"]("Some of the given assay are not updated with the disabled status");      
    } else {      
      Log["Checkpoint"]("All the given assays are disabled and verified as disabled");      
    } 
    
    //Check Save assay button enabled
    if(isAssayStatusUpdated)
    {    
      //Click on the save assay button
      if(!ClickOnSaveButtonInAssayList())
      {
        Log["Error"]("Unable to save the modified details in assay setup");
        Log["PopLogFolder"]();
        return false;
      }
      
      //accept the information popup
      if(!AcceptSaveAssayListInformationPopup())
      {
        Log["Error"]("Unable to locate the save assay list information alert popup");
        Log["PopLogFolder"]();
        return false;        
      }      
    }
    
    //Finish Assay Setup    
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Unable to perform the finish assay setup operation");
      Log["PopLogFolder"]();
      return false;
      
    }
    
    //Check all the given assays are found and disabled
    Log["PopLogFolder"]();
    if(isAllAssayFoundToUpdate)
    {
      return true;      
    } else {
      return false;
    }     
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}



//========================================================================================



//==============Navigation from Assay Type, Assay Name and Tdef Screen selection==========

function NavigateAndLaunchAssaySetup()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Navigate to Assay Setup Popup from How Do I");
    //Navigation for Assay Type Selection Popup
    if(!InvokeWorkFlowInPrimeDisp("HowDoI")){
      return false;
    }
    
    //Select Assay from workflow
    if(!SelectWorkflowFromWorkflowDataGrid("Assay Setup")) {
      Log["Error"]("Unable to select the Assay Setup from the workflow wizard datagrid in How Do I screen");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Launch Assay Setup
    if(!ClickOnLaunchButtonAtHowDoI()) 
    {  
      Log["Error"]("Unable to navigate to Tdef modify screen, due to the launch button not enabled in How Do I screen");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Check the assay setup popup is displayed
    if(!CheckAssaySetupPopupDialogDisplayed())
    {
      Log["Error"]("Unable to locate the Assay Setup Popup, to navigate to the TDef Modify screen");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectAssayTypeToViewAndEditTdef(assayType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Select assay type '" + assayType + "' and navigate to select assay to view/edit");
    
    //selct assay type as IA / IM
    if(!SelectAssayTypeInAssaySetup(assayType))
    {
      Log["Error"]("Unable to select the assay type IM");
      Log["PopLogFolder"]();
      return false;
    }
    
    if(assayType == "IM")
    {
      //select the view edit delete radio button
      if(!SelectViewEditDeleteForIM())
      {
        Log["Error"]("Unable to select the view edit delete radio button for the assay type");
        Log["PopLogFolder"]();
        return false;
      }      
    }
            
    //Click on the next button to proceed for assay selection
    if(!ClickNextButtonInAssaySetupPopup())
    {
      Log["Error"]("Failed to click on the next button in assay type selection popup");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Assay type '" + assayType + "' and view edit options for the assay type is successfully selected");
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectAssayNameAndLoadTDefDetails(assayName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Select the assay name '" + assayName + "' to view edit assay Tdef informations");
    
    //select the assay from assay selection popup
    if(!SelectAssayByAssayName(assayName))
    {
      Log["Error"]("Unable to locate the given assayName");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click on ok button to proceed for Tdef screen
    if(!ClickOkbuttonInAssaySelectionPopup())
    {
      Log["Error"]("Failed to click on the ok button in assay selection popup");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Successfully selected the assay name " + assayName + "' and loaded the TDef screen");
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectTDefScreenByNameForAssayTypeIA(tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Click on the '" + tDefScreenName + "' from the assay setup navigation panel");
    
    //Get the assay list tab control
    var navigationCtrl = GetAutomationIDControl("HowDoI_AssaySetup_TDef", "viewEditIMTdefPopup");

    //check teh tdef navigation is displayed    
    if(VerifyObjectExists(navigationCtrl))
    {
      
      // get the left side panel tab name control
      var tDefLeftPaneTabCtrl = Getchild(navigationCtrl,["AutomationId","Text"], ["txtHeader",tDefScreenName]);
            
      //check the assaylist tab cotnrol is enabled
      if(VerifyObjectEnabled(tDefLeftPaneTabCtrl))
      {
        Log["Message"]("Assay List Tab is Located From Assay Setup Navigation Panel");
        
        //Click on the assay list tab control
        ClickCtrl(tDefLeftPaneTabCtrl);
        
        Log["Message"]("Clicked on the '" + tDefScreenName + "' Tab From Assay Setup Navigation Panel");
        Log["PopLogFolder"]();
        return true;        
      } else {
        Log["Error"]("Unable to locate the '" + tDefScreenName + "' From Assay Setup Navigation Panel");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unabel to locate the navigation control From Assay Setup Navigation Panel");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function CheckTheTDefScreenDisplayedForAssayTypeIA(tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Check the Tdef screen '" + tDefScreenName + "' is loaded and displayed the content");
        
    var screenId = undefined;
    
    switch (tDefScreenName)
    {
      case "Definition":
          screenId = "ImTestdefinitionView";
        break;    
      case "Calculation":
        screenId = "ImTestCalculationView";
        break;
      case "Calibration":
        screenId = "ImTestCalibrationView";
        break;
      case "Reagents":
        screenId = "ImTestReagentsView";
        break;
      case "Lots":
        screenId = "ImTestLotsView";
        break;
      case "Ranges":
        screenId = "IMRangeView";
        break;
      case "Reflex":
        screenId = "ImTestReflexView";
        break;
      case "Repeat":
        screenId = "ImTestRepeatView";
        break;
      case "Panels":
        screenId = "PanelsView";
        break;
      case "Ratios":
        screenId = "RatioView";
        break;
      case "Off-System Tests":
        screenId = "OffSystemView";
        break;
      case "Reagent Thresholds":
        screenId = "";
        break;
      case "Assay List":
        screenId = "AssayListContent";
        break;
      case "Test Display Order":
        screenId = "TestDisplayOrder";
        break;
      case "QC Panel":
        screenId = "";
        break;
      case "Calibration Schedule":
        screenId = "";
        break;
    }
            
    //Get the assay list tab control
    var navigationCtrl = GetAutomationIDControl("HowDoI_AssaySetup_TDef", "viewEditIMTdefPopup");
    
    //check the navigation panel is displayed
    if(VerifyObjectExists(navigationCtrl))
    {
      //check the given screen name is valid
      if(screenId != undefined)
      {
        //get the object control for the given screen name
        tDefScreenCtrl = Getchild(navigationCtrl, "AutomationId", screenId);
        
        //check the screen is displayed for the given tab name
        if(VerifyObjectExists(tDefScreenCtrl))
        {
          Log["Message"]("Tdef screen '" + tDefScreenName + "' is displayed in the screen");
          Log["PopLogFolder"]();
          return true;
        } else {
          Log["Error"]("Tdef screen '" + tDefScreenName + "' is not displayed in the screen");
          Log["PopLogFolder"]();
          return false;
        }        
      } else {
        Log["Error"]("Unable to locate the given tdef tab name '" + tDefScreenName + "'");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the Tdef navigation panel");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}

function SelectTDefScreenByNameForAssayTypeCH(tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("AssaySetup :: Click on the '" + tDefScreenName + "' from the assay setup navigation panel");
    
    //Get the assay list tab control
    var navigationCtrl = GetAutomationIDControl("HowDoI_AssaySetup_TDef", "viewEditCHTdefPopup");

    //check teh tdef navigation is displayed    
    if(VerifyObjectExists(navigationCtrl))
    {
      
      // get the left side panel tab name control
      var tDefLeftPaneTabCtrl = Getchild(navigationCtrl,["AutomationId","Text"], ["txtHeader",tDefScreenName]);
            
      //check the assaylist tab cotnrol is enabled
      if(VerifyObjectEnabled(tDefLeftPaneTabCtrl))
      {
        Log["Message"]("Assay List Tab is Located From Assay Setup Navigation Panel");
        
        //Click on the assay list tab control
        ClickCtrl(tDefLeftPaneTabCtrl);
        
        Log["Message"]("Clicked on the '" + tDefScreenName + "' Tab From Assay Setup Navigation Panel");
        Log["PopLogFolder"]();
        return true;        
      } else {
        Log["Error"]("Unable to locate the '" + tDefScreenName + "' From Assay Setup Navigation Panel");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unabel to locate the navigation control From Assay Setup Navigation Panel");
      Log["PopLogFolder"]();
      return false;
    }    
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function CheckTheTDefScreenDisplayedForAssayTypeCH(tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Check the Tdef screen '" + tDefScreenName + "' is loaded and displayed the content");
        
    var screenId = undefined;
    
    switch (tDefScreenName)
    {
      case "Definition":
          screenId = "DefinitionContent";
        break;    
      case "Calculation":
        screenId = "CalculationContent";
        break;
      case "Calibration":
        screenId = "CalibrationContent";
        break;      
      case "Ranges":
        screenId = "CHRangeView";
        break;
      case "Reflex":
        screenId = "ReflexContent";
        break;
      case "Repeat":
        screenId = "RepeatContent";
        break;
      case "Panels":
        screenId = "PanelsView";
        break;
      case "Ratios":
        screenId = "RatioView";
        break;
      case "Off-System Tests":
        screenId = "OffSystemView";
        break;
      case "Reagent Thresholds":
        screenId = "";
        break;
      case "Assay List":
        screenId = "AssayListContent";
        break;
      case "Test Display Order":
        screenId = "TestDisplayOrder";
        break;
      case "QC Panel":
        screenId = "";
        break;
      case "Calibration Schedule":
        screenId = "";
        break;
    }
            
    //Get the assay list tab control
    var navigationCtrl = GetAutomationIDControl("HowDoI_AssaySetup_TDef", "viewEditCHTdefPopup");
    
    //check the navigation panel is displayed
    if(VerifyObjectExists(navigationCtrl))
    {
      //check the given screen name is valid
      if(screenId != undefined)
      {
        //get the object control for the given screen name
        tDefScreenCtrl = Getchild(navigationCtrl, "AutomationId", screenId);
        
        //check the screen is displayed for the given tab name
        if(VerifyObjectExists(tDefScreenCtrl))
        {
          Log["Message"]("Tdef screen '" + tDefScreenName + "' is displayed in the screen");
          Log["PopLogFolder"]();
          return true;
        } else {
          Log["Error"]("Tdef screen '" + tDefScreenName + "' is not displayed in the screen");
          Log["PopLogFolder"]();
          return false;
        }        
      } else {
        Log["Error"]("Unable to locate the given tdef tab name '" + tDefScreenName + "'");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the Tdef navigation panel");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }  
}

function SelectTheTDefScreenNameAndVerifyTheNavigationForIA(tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Select the tDef screen name '" + tDefScreenName + "' from the left side tab's");
    
    //click on the desired tDef screen name from left pane
    if(!SelectTDefScreenByNameForAssayTypeIA(tDefScreenName))
    {
      Log["Error"]("Unable to select the Tdef Screen Name '" + tDefScreenName + "'");
      Log["PopLogFolder"]();
      return false;
    }
    
    aqUtils["Delay"](2000, "Wait for the '" + tDefScreenName + "' content to load");
    
    //check the desired Tdef screen content displayed
    if(!CheckTheTDefScreenDisplayedForAssayTypeIA(tDefScreenName))
    {
      Log["Error"]("Failed on loading the tdef screen '" + tDefScreenName + "' after click on it from left side panel");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Checkpoint"]("Tdef screen '" + tDefScreenName + "' is successfully selected and navigated");
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectTheTDefScreenNameAndVerifyTheNavigationForCH(tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Select the tDef screen name '" + tDefScreenName + "' from the left side tab's");
    
    //click on the desired tDef screen name from left pane
    if(!SelectTDefScreenByNameForAssayTypeCH(tDefScreenName))
    {
      Log["Error"]("Unable to select the Tdef Screen Name '" + tDefScreenName + "'");
      Log["PopLogFolder"]();
      return false;
    }
    
    aqUtils["Delay"](2000, "Wait for the '" + tDefScreenName + "' content to load");
    
    //check the desired Tdef screen content displayed
    if(!CheckTheTDefScreenDisplayedForAssayTypeCH(tDefScreenName))
    {
      Log["Error"]("Failed on loading the tdef screen '" + tDefScreenName + "' after click on it from left side panel");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Checkpoint"]("Tdef screen '" + tDefScreenName + "' is successfully selected and navigated");
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function NavigateToViewEditIATDef(assayName,tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Navigating to TDef Screen '" + tDefScreenName + "' for the assay type IA");
    
    //Navigate to How Do I and launch assay setup    
    if(!NavigateAndLaunchAssaySetup())
    {
      Log["Error"]("Unable to navigate to the screen and launch the assay setup popup");
      Log["PopLogFolder"]();
      return false;
    }
        
    //Select assay type from assay setup dialog
    if(!SelectAssayTypeToViewAndEditTdef("IM"))
    {
      Log["Error"]("Failed to select the assay type and view edit option in assay setup popup");
      Log["PopLogFolder"]();
      return false;
    }
    
    aqUtils["Delay"](3000, "Wait for the 'View Edit Assay' popup to be displayed");
    
    //select the assay name to view / edit / delete
    if(!SelectAssayNameAndLoadTDefDetails(assayName))
    {
      Log["Error"]("Failed to select the assay '" + assayName + "' from the view edit assay popup");
      Log["PopLogFolder"]();
      return false;
    }
                
    
    aqUtils["Delay"](5000, "Wait for the Tdef popup for the assay '" + assayName + "' to be displayed");
    
    //select the tdef screen tab name and verify the navigation successfull
    if(!SelectTheTDefScreenNameAndVerifyTheNavigationForIA(tDefScreenName))
    {
      Log["Error"]("Failed to navigate to the tab name for the tdef screen '" + tDefScreenName + "'");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Checkpoint"]("Navigation for the Tdef screen is successfully completed and displayed the '" + tDefScreenName + "'");
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function NavigateToViewEditCHTDef(assayName,tDefScreenName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Navigating to TDef Screen '" + tDefScreenName + "' for the assay type CH");
    
    //Navigate to How Do I and launch assay setup    
    if(!NavigateAndLaunchAssaySetup())
    {
      Log["Error"]("Unable to navigate to the screen and launch the assay setup popup");
      Log["PopLogFolder"]();
      return false;
    }
        
    //Select assay type from assay setup dialog
    if(!SelectAssayTypeToViewAndEditTdef("CH"))
    {
      Log["Error"]("Failed to select the assay type and view edit option in assay setup popup");
      Log["PopLogFolder"]();
      return false;
    }
    
    //select the assay name to view / edit / delete
    if(!SelectAssayNameAndLoadTDefDetails(assayName))
    {
      Log["Error"]("Failed to select the assay '" + assayName + "' from the view edit assay popup");
      Log["PopLogFolder"]();
      return false;
    }
                
    //select the tdef screen tab name and verify the navigation successfull
    if(!SelectTheTDefScreenNameAndVerifyTheNavigationForCH(tDefScreenName))
    {
      Log["Error"]("Failed to navigate to the tab name for the tdef screen '" + tDefScreenName + "'");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Checkpoint"]("Navigation for the Tdef screen is successfully completed and displayed the '" + tDefScreenName + "'");
    Log["PopLogFolder"]();
    return true;
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function NavigateToViewEditTdefScreen(assayType, assayName, tDefScreenName)
{
  try
  {
    if(assayType == "IM")
    {
      return NavigateToViewEditIATDef(assayName,tDefScreenName);
    } else if (assayType == "CH")
    {
      return NavigateToViewEditCHTDef(assayName,tDefScreenName);
    } else {
      Log["Error"]("Please provide a proper assay type");
      return false;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception",e["description"]);
    return false;
  }
}

//========================================================================================

//--------------------------TDef Common functions------------------------------------------

function ClickFinishAndExitAfterSaving()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Click Finish Button And Exit After Save");
    
    //Get Finish button control
    var btnFinish=GetAutomationIDControl("HowDoI_AssaySetup_Definition","btnFinish");
    
    //check Finish button control exists
    if(VerifyObjectEnabled(btnFinish))
    {
      //click Finish button control
      ClickCtrl(btnFinish);
      Log["Message"]("Clicked Finish button");
    } else {
      Log["Error"]("Unable to locate and click Finish Button");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click Yes in alert to exit
    if(!ConfirmWarningAlert("Yes"))
    {
      Log["Error"]("Unable to locate the confirmation warning alert");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Clicked Yes in save confirmation alert")
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ClickFinishAndExitWithoutSaving()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Click Finish Button And Exit Without Saving");
    
    //Get Finish button control
    var btnFinish=GetAutomationIDControl("HowDoI_AssaySetup_Definition","btnFinish");
    
    //check finish button exist
    if(VerifyObjectEnabled(btnFinish))
    {
      //click finish button
      ClickCtrl(btnFinish);
      Log["Message"]("Clicked Finish button");
    } else {
      Log["Error"]("Unable to locate and click Finish Button");
      Log["PopLogFolder"]();
      return false;
    }
    
    aqUtils["Delay"](10000, "Waiting for confimration Alert");
    
    //Click No in alert to exit
    if(!ConfirmWarningAlert("No"))
    {
      Log["Error"]("Unable to locate the confirmation alert and Click 'No' button");
      Log["PopLogFolder"]();
      return false;
    } else {
      Log["Message"]("Succcessfully clicked 'No' in confirmation alert")
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ConfirmWarningAlert(action)//action-Yes/No
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Click "+action+" button in Confimration Alert")
    
    //Get the alert dialog control
    var alertDialogueObj = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
  
    var btnAction = undefined;
    
    //Check the alert dialogue is exists & visible
    if(VerifyObjectExists(alertDialogueObj))
    {
      Log["Message"]("Confirmation Alert Dialogue Located");
      
      //Get the action button
      switch(action)
      {
        case "Yes":
          btnAction = Getchild(alertDialogueObj,"AutomationId","PrimaryButton");
          break;
        case "No":
          btnAction = Getchild(alertDialogueObj,"AutomationId","SecondaryButton");
          break;
      }
      
      //Check the 'action' button exists
      if(VerifyObjectExists(btnAction))
      {
        //click 'action' button
        ClickCtrl(btnAction);
        Log["Message"]("Clicked '"+action+"' button in confirmation alert");
        Log["PopLogFolder"]();
        return true;
      } else {
        Log["Error"]("Failed to Click '"+action+"' button in confirmation alert");
        Log["PopLogFolder"]();
        return false;
      }      
    } else {
      Log["Error"]("Unable to locate the Confirmation Alert Dialogue");
      Log["PopLogFolder"]();
      return false;
    }  
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ClickSaveButtonInTDefScreen()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Click Save button in TDef Screen");
    
    //Get the Save button Control
    var saveButtonCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Definition","btnSave")
    
    //Check the Save button exists
    if(VerifyObjectEnabled((saveButtonCtrl)))
    {
      Log["Message"]("Save button is located")
      //Click Save button
      ClickCtrl(saveButtonCtrl)
      Log["Message"]("Save Button is Clicked");
      Log["PopLogFolder"]();
      return true ;
    } else {
      Log["Error"]("Save button is not Clicked");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyTDefSuccessSavePopup()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify TDef Success Save Popup");
    
    //Get the Save TDef Popup Control
    var alertDialogueObj = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Verify Save TDef Popup Control exists
    if(VerifyObjectExists((alertDialogueObj)))
    {
      //Get success save alert message container
      var messageContainer=Getchild(alertDialogueObj,"AutomationId","AlertContentPresenter");
      //Get alert message in messageContainer
      var alertMessage=Getchild(messageContainer,"ClassName","TextBlock");
      //Get ok button in success save alert
      var btnOK = Getchild(alertDialogueObj,"AutomationId","PrimaryButton");
      
      //check success save alert title
      if(alertMessage["Text"]=="Saved successfully")
      {
        Log["Message"]("Save Success Alert is Displayed");
        if(VerifyObjectExists(btnOK))
        {
          Log["Message"]("Located 'OK' button in Succes saved popup")
          //Click 'ok' in success save popup
          ClickCtrl(btnOK);
          Log["Checkpoint"]("Clicked 'OK' button in TDef Success save popup");
          Log["PopLogFolder"]();
          return true;;
        }
      } else {
        Log["Error"]("Save Failure Alert is Displayed")
        if(VerifyObjectExists(btnOK))
        {
          Log["Message"]("Located 'OK' button in TDef Failed save popup")
          //Click 'ok' in failed save popup
          ClickCtrl(btnOK)
          Log["Message"]("Clicked 'OK' button in TDef Failed save popup");
          Log["PopLogFolder"]();
          return false;
        }
      }
    } else {
      Log["Error"]("Save Test Deifnition Alert is not located");
      Log["PopLogFolder"]();
      return false ;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyTDefFailedSavePopup()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify TDef Save Failure Popup");
    //Get the Save TDef Popup Control
    var alertDialogueObj = GetAutomationIDControl("SystemHealthCheck", "alertDialog");
    
    //Verify Save TDef Popup Control exists
    if(VerifyObjectExists((alertDialogueObj)))
    {
      //get alert title displayed
      var alertTitle = Getchild(alertDialogueObj,"AutomationId","AlertTitleTextBlock")
      
      //get 'ok' button in alert 
      var btnOK = Getchild(alertDialogueObj,"AutomationId","PrimaryButton");   
      
      //check alert title displayed   
      if(alertTitle["Text"] != "Saved successfully")
      {
        Log["Message"]("Verified Save failed popup")
        if(VerifyObjectExists(btnOK))
        {
          ClickCtrl(btnOK);
          Log["Checkpoint"]("Clicked 'OK' button in Save failed alert");
          Log["PopLogFolder"]();
          return true;
        }
      }
    } else {
      Log["Error"]("Save Failed Alert is not located");
      Log["PopLogFolder"]();
      return false ;
    }
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyTDefIsSavedAndExitFromTDefScreen()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify TDef Save Success Popup And Exit From TDef");
    
    //Verify success popup
    if(!VerifyTDefSuccessSavePopup())
    {
      Log["Error"]("Failed to Save Tdef changes")
      Log["PopLogFolder"]();
      return false;
    } else {
      Log["Message"]("Successfully Saved TDef changes")
    }
    
    //Finish and exit assay setup popup
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    } else {
      Log["Message"]("Successfully Exited from TDef screen");
      Log["PopLogFolder"]();
      return true;
    }
  }
   catch (e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


//---------------------------------------------------------------------------------------

//-----------------------------TDef -Definition Tab---------------------------------------
function ModifyCIStatusAndDisplayName(ciStatus,displayName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Modify CIStatus as '"+ciStatus+"' and Display Name as '"+displayName+"'");
    
    //Modify CIStatus
    if(!SetCIStatus(ciStatus))
    {
      Log["Error"]("Failed to modify IMStatus")
      Log["PopLogFolder"]();
      return false;
    }
    
    //Modify DisplayName
    if(!SetAssayDisplayName(displayName))
    {
      Log["Error"]("Failed to modify DisplayName")
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click Save button
    if(!ClickSaveButtonInTDefScreen())
    {
      Log["Error"]("Failed to Click save button")
      Log["PopLogFolder"]();
      return false;
    }
      
    Log["Message"]("Successfully Modified CIStatus as '"+ciStatus+"' and Display Name as '"+displayName+"'")  
    Log["PopLogFolder"]();
    return true;
  }
   catch (e)
  {
    Log["Error"]("Exception : " + e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ModifyDisplayNameInDefinition(displayName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Modify Display Name as '"+displayName+"'");
    
    //Modify DisplayName
    if(!SetAssayDisplayName(displayName))
    {
      Log["Error"]("Failed to modify DisplayName")
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click Save button
    if(!ClickSaveButtonInTDefScreen())
    {
      Log["Error"]("Failed to Click save button")
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["Message"]("Successfully Modified Display Name as '"+displayName+"'")    
    Log["PopLogFolder"]();
    return true;
  }
   catch (e)
  {
    Log["Error"]("Exception : " + e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetCIStatus(CIStatus)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set CIStatus '"+CIStatus+"'");
    
    var IsUpdated=false;
    
    //Get the CIStatus Control
    var ciStatusCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Definition","checkBoxCIStatus")
    
    if(VerifyObjectExists((ciStatusCtrl)))
    {
      //Setting the CIStatus value
      SelectComboBoxItem(ciStatusCtrl, CIStatus);
      
      //Getting the CIStatus Value ANd Comparing with Current value
      ciStatusCtrl=Getchild(ciStatusCtrl,Array("ClassName","Visible"),Array("ComboBoxItem","True"));
      
      //Get Textblock inside combobox item ctrl  
      ciStatusCtrl=Getchild(ciStatusCtrl,"ClassName","TextBlock")    
      
      //Verifying the new CIStatus is Selected
      if(GetNativeObjectName(ciStatusCtrl)==CIStatus)
      {
        Log["Message"]("Entered the new CIStatus' "+ CIStatus +"'");
        IsUpdated=true ;
      }
      else
      {
        Log["Error"]("The CIStatus is not modified");
      }
    }
    else
    {
      Log["Error"]("CIStatus Control is not located");
    }
    Log["PopLogFolder"]();
    return IsUpdated
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetAssayDisplayName(NewDisplayName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Display Name as '"+NewDisplayName+"'");
    
    var IsUpdated=false;
    
    //Get the Display Name Control
    var DisplayNameCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Definition","txtImDefDisplayName")
    
    //Verify DisplayName control exists    
    if(VerifyObjectExists((DisplayNameCtrl)))
    {
      Log["Message"]("Current Display Name:"+DisplayNameCtrl["Text"])
      //Setting the Display Name value
      SetValue(DisplayNameCtrl,NewDisplayName);
      
      //Verifying the new Display name is Entered
      if(DisplayNameCtrl["Text"]==NewDisplayName)
      {
        Log["Message"]("Entered the new Display name'"+ NewDisplayName +"'");
        IsUpdated=true ;
      }
      else
      {
        Log["Error"]("The Display Name is not modified");
      }
    }
    else{
      Log["Error"]("Displayname Control is not located");
    }
    Log["PopLogFolder"]();
    return IsUpdated
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCIStatusAndDisplayNameIsModified(ciStatus,displayName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify CIStatus and DisplayName Is Modified")
    
    //check CI Status is modified
    if(!VerifyCIStatusIsModified(ciStatus))
    {
      Log["Error"]("Failed to verify CIStatus");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Successfully verfied CIStatus as '"+ciStatus+"'");
    }
    
    //check display name is modified
    if(!VerifyDisplayNameIsModified(displayName))
    {
      Log["Error"]("Failed to verify DisplayName");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Successfully verfied Display Name as '"+displayName+"'");
    }
    
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyDisplayNameIsModified(displayName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify DisplayName Is Modified to '"+displayName+"'");
    
    //Get Current DisplayName
    var currentDisplayName=GetDisplayName();
    
    //Check Displayname is not modified
    if(currentDisplayName==false || currentDisplayName!=displayName)
    {
      Log["Error"]("Expected Display Value: "+displayName);
      Log["Error"]("Actual Display Value: "+currentDisplayName);
      Log["Error"]("DisplayName Modification Verification is failed");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Expected Display Value: '"+displayName+"'");
      Log["Message"]("Actual Display Value: '"+currentDisplayName+"'");
      Log["CheckPoint"]("DisplayName Modification Verification is Passed");  
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyDisplayNameIsNotModified(displayName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify DisplayName Is Not Modified to '"+displayName+"'");
    
    //Get Current DisplayName
    var currentDisplayName=GetDisplayName();
    
    //Check Displayname is not modified
    if(currentDisplayName==false || currentDisplayName==displayName)
    {
      Log["Error"]("Current DisplayName is '"+currentDisplayName+"'")
      Log["Error"]("DisplayName Modification Verification is failed");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("DisplayName Modification Verification is Passed")
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetDisplayName()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get DisplayName displayed");
    
    //Get the Display Name Control
    var DisplayNameCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Definition","txtImDefDisplayName")
    
    //Verify the Display name exists
    if(VerifyObjectExists((DisplayNameCtrl)))
    {
      Log["Message"]("Located DisplayeName control");
      Log["Message"]("Current Display Name is: '"+DisplayNameCtrl["Text"]);
      Log["PopLogFolder"]();
      return DisplayNameCtrl["Text"];
    }
    else
    {
      Log["Error"]("DisplayName Control is not located");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCIStatusIsModified(CIStatus)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify CIStatus Is Modified as '"+CIStatus+"'");
    
    var IsUpdated=false;
    
    //Get the CIStatus Control
    var ciStatusCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Definition","checkBoxCIStatus")
    
    //verify CIStatus exists
    if(VerifyObjectExists((ciStatusCtrl)))
    {
      Log["Message"]("CIStatus Control is located")
      
      //Getting the CIStatus Value ANd Comparing with Current value
      ciStatusCtrl=Getchild(ciStatusCtrl,"ClassName","TextBlock")    
      
      //Verifying the new CIStatus is Selected
      if(GetNativeObjectName(ciStatusCtrl)==CIStatus)
      {
        Log["Message"]("Expected CIStatus Value: "+CIStatus);
        Log["Message"]("Actual CIStatus Value: "+GetNativeObjectName(ciStatusCtrl));
        Log["CheckPoint"]("CIStatus Modification Verification is Passed");
        IsUpdated=true ;
      }
      else
      {
        Log["Error"]("Expected CIStatus Value: "+CIStatus);
        Log["Error"]("Actual CIStatus Value: "+GetNativeObjectName(ciStatusCtrl));
        Log["Error"]("CIStatus Modification Verification is Failed");
      }
    }
    else{
      Log["Error"]("CIStatus Control is not located");
    }
    Log["PopLogFolder"]();
    return IsUpdated
    
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function UncheckControlBracketedTest()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Uncheck ControlBracketedTest Checkbox");
    
    //Get CBT Checkbox
    var chkCBT = GetAutomationIDControl("HowDoI_AssaySetup_Definition","checkBoxControlBracketedTest");
    
    //checkCBT checkbox exists
    if(VerifyObjectExists(chkCBT))
    {
      //check CBT checkbox is unchecked
      if(GetToggleState(chkCBT)==0)
      {
        Log["Message"]("Control Bracketed Test is already Unchecked");
        Log["PopLogFolder"]();
        return true;
      }
      //if CBT in checked state
      else
      {
        //Get the CBT Lock control
        var ControlBracketedTestLock = GetAutomationIDControl("HowDoI_AssaySetup_Definition","ToggleControlBracketedTest");
          
        //check CBT is locked
        if(GetToggleState(ControlBracketedTestLock)==1)
        {
          //unlock CBT checkbox
          ClickCtrl(ControlBracketedTestLock);
        }    
        
        //Uncheck CBT
        ClickCtrl(chkCBT);
        
        //lock CBT checkbox
        ClickCtrl(ControlBracketedTestLock);
            
        //verify CBT unchecked  
        if(GetToggleState(chkCBT)==0)
        {
          Log["Message"]("Control Bracketed Test is Unchecked");
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          Log["Error"]("Failed to uncheck Control Bracketed test");
          Log["PopLogFolder"]();
          return false;
        }
      }
    }
    else
    {
      Log["Error"]("Failed to locate Control Bracketed test checkbox ");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function UnLockControlLevelInDefinition()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Turn on ControlLevel Lock");
    
    //Get ControlLevel Lock
    var controlLevelLock = GetAutomationIDControl("HowDoI_AssaySetup_Definition","TogglecontrolLevel");
    
    //Check Control Level Lock exists
    if(VerifyObjectEnabled(controlLevelLock))
    {
      Log["Message"]("Control LevelLock is Located")
      
      //Check Control Level Lock is on
      if(GetToggleState(controlLevelLock)==1)
      {
        //Click ControlLevelLock to turn on
        ClickCtrl(controlLevelLock);
        Log["Message"]("Control Level Lock is turned on");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Message"]("Control Level Lock is already in on state");
        Log["PopLogFolder"]();
        return true;
      }
    }
    else
    {
      Log["Error"]("Failed to locate the Control Level Lock");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyControlLevelisDisabled()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Control Level Is Disabled");
    
    //Get ControlLevel Combobox
    var cbxControlLevel = GetAutomationIDControl("HowDoI_AssaySetup_Definition","checkBoxControlLevel");
    
    //check control level Ctrl exists
    if(VerifyObjectExists(cbxControlLevel))
    {
      Log["Message"]("Located Control Level Combobox")
      
      //Check Control Level combobox is enabled
      if(!VerifyObjectEnabled(cbxControlLevel))
      {
        Log["Message"]("Control Level is in disabled state");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Control Level is in enabled state");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Control Level Combobox");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCentrifugeForRepeatCheckBoxIsEnabled()
{
   try
  {
    Log["AppendFolder"]("Assay Setup :: Verify RepeatCheckBox Is Enabled");
    
    //Get RepeatCheckBox Checkbox
    var chkRepeatCheckBox = GetAutomationIDControl("HowDoI_AssaySetup_Definition","checkBoxCentrifugeBeforeRepeating");
    
    //Verify RepeatCheckBox is enabled
    if(VerifyObjectEnabled(chkRepeatCheckBox))
    {
      Log["Message"]("RepeatCheckBox checkbox is Enabled for the User");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("RepeatCheckBox checkbox is not Enabled for the User");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetCentrifugeForRepeatCheckBoxStatus()
{
  try
  {
    Log["AppendFolder"]("Get CentrifugeForRepeat CheckBox Status")
    
    //Get RepeatCheckBox Checkbox
    var chkRepeatCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Definition","checkBoxCentrifugeBeforeRepeating");
    
    //Verify RepeatCheckBox is enabled
    if(VerifyObjectExists(chkRepeatCheckBoxCtrl))
    {
      //get RepeatCheckBox checked state
      if(GetToggleState(chkRepeatCheckBoxCtrl)==1)
      {
        Log["Message"]("CentrifugeForRepeat checkbox is is checked state");
        Log["PopLogFolder"]();
        return "Checked";
      }
      else
      {
        Log["Message"]("CentrifugeForRepeat checkbox is in Unchecked state");
        Log["PopLogFolder"]();
        return "UnChecked";
      }
    }
    else
    {
      Log["Error"]("Failed to locate the RepeatCheckBox Checkbox");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ModifyCentrifugeForRepeatCheckBoxAndSave()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Modify Centrifuge For Repeat Checkboxes And Save")
    
    //Modify CentrifugeForRepeat CheckBox
    if(!ModifyCentrifugeForRepeatCheckBox())
    {
      Log["Error"]("Failed to Modify the Centrifuge For Repeat Checkbox")
      Log["PopLogFolder"]();
      return false;
    }
      
    //Click save button  
    if(!ClickSaveButtonInTDefScreen())
    {
      Log["Error"]("Failed to Click Save button")
      Log["PopLogFolder"]();
      return false;
    }
       
    Log["PopLogFolder"]();
    return true;    
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ModifyCentrifugeForRepeatCheckBox()
{
  try
  {
    Log["AppendFolder"]("Modify CentrifugeForRepeat CheckBox")
    //Get Centrifuge For Repeat Checkbox
    var chkRepeatCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Definition","checkBoxCentrifugeBeforeRepeating");
    
    //verify CentrifugeForRepeat CheckBox exists  
    if(VerifyObjectExists(chkRepeatCheckBoxCtrl))
    {
      Log["Message"]("Located CentrifugeForRepeat CheckBox");
      //Get the Textblock inside checkbox
      chkRepeatCheckBoxCtrl=Getchild(chkRepeatCheckBoxCtrl,"ClassName","TextBlock")
      //Click the textblock to change the checkbox status
      ClickCtrl(chkRepeatCheckBoxCtrl);
      Log["Message"]("Modified Centrifuge For Repeat Checkbox");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Failed to Locate Calibration Trigger "+CalibrationTrigger[i]+"");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function DisableAssayComparisonCorrelationForIM()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Disable Assay Comparison Correlation");
    
    var isModified =false;
    //----------------------------------Disable Slope---------------------------------------
    
    //Get Slope checkbox control
    var checkBoxEnterSlope = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxEnterSlope");
    
    //check Slope checkbox exists
    if(VerifyObjectExists(checkBoxEnterSlope))   
    {   
      Log["Message"]("Located the Enter Slope Checkbox")
      
      //Check Slope checkbox is disabled 0-disabled ,1-enabled
      if(GetToggleState(checkBoxEnterSlope)==1)
      {
        //Get the Textblock inside checkbox
        var checkBoxEnterSlopeInnerCtrl=Getchild(checkBoxEnterSlope,"ClassName","TextBlock");
        
        //click the textblock to change the checkbox status
        ClickCtrl(checkBoxEnterSlopeInnerCtrl);
        Log["Message"]("Slope is disabled")
        isModified=true;
      }
      else
      {
        Log["Message"]("Slope is already disabled") 
      }
    }
    else
    {
      Log["Error"]("Failed to locate the Enter Slope Checkbox");
      Log["PopLogFolder"]();
      return false;
    }
    
    //----------------------------------Disable intercept---------------------------------------
    
    //Get Intercept Control
    var checkBoxEnterIntercept = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxEnterIntercept");
    
    if(VerifyObjectExists(checkBoxEnterIntercept))   
    {   
      Log["Message"]("Located the Enter Intercept Checkbox")
      
      //Check Intercept checkbox is disabled 0-disabled ,1-enabled
      if(GetToggleState(checkBoxEnterIntercept)==1)
      {
        //Get the Textblock inside checkbox
        var checkBoxEnterInterceptInnerCtrl=Getchild(checkBoxEnterIntercept,"ClassName","TextBlock");
        //click the textblock to change the checkbox status
        ClickCtrl(checkBoxEnterInterceptInnerCtrl);
        Log["Message"]("Intercept is disabled");
        isModified=true;
      }
      else
      {
        Log["Message"]("Intercept is already disabled") 
      }
    }
    else
    {
      Log["Error"]("Failed to locate the Enter Intercept Checkbox");
      Log["PopLogFolder"]();
      return false;
    }
    
    if(isModified)
    {
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
      else
      {
        Log["Message"]("Successfully Clicked Save button")
      }
    
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
      //success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Failed to Save the TDef changes")
        Log["PopLogFolder"]();
        return false;
      }
      else
      {
        Log["Message"]("Successfully Saved TDef changes")
      }
    }
    
    //-------------------------------------Exit TDef-------------------------------
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    } 
    else
    {
      Log["Message"]("Successfully Exited from TDef screen")
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function EnableAssayComparisonCorrelationForIM()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Enable Assay Comparison Correlation");
    
    //----------------------------------Enable Slope---------------------------------------
    
    //Get Slope checkbox control
    var checkBoxEnterSlope = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxEnterSlope");
    
    var IsModified=false;
    
    //check Slope checkbox control exists
    if(VerifyObjectExists(checkBoxEnterSlope))   
    {   
      Log["Message"]("Located Enter Slope checkbox control");
      
      //check Enter Slope checkbox control is Unchecked 
      if(GetToggleState(checkBoxEnterSlope)==0)
      {
        //Click Enter Slope checkbox control 
        ClickCtrl(checkBoxEnterSlope);
        Log["Message"]("Slope is enabled")
        IsModified=true;
      }
      else
      {
        Log["Message"]("Slope is already enabled") 
      }
    }
    else
    {
      Log["Error"]("Failed to locate the Enter Slope Checkbox");
      return false;
    }
    
    //----------------------------------Enable Intercept----------------------------------------
    
    //Get Intercept Control
    var checkBoxEnterIntercept = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxEnterIntercept");
    
    //check Enter Intercept checkbox exists
    if(VerifyObjectExists(checkBoxEnterIntercept))   
    {   
      Log["Message"]("Located Enter intercept control");
      
      //Check Enter intercept control is checked
      if(GetToggleState(checkBoxEnterIntercept)==0)
      {
        //Click Enter intercept Checkbox
        ClickCtrl(checkBoxEnterIntercept);
        IsModified=true;
        Log["Message"]("Intercept is enabled")
      }
      else
      {
        Log["Message"]("Intercept is already enabled") 
      }
    }
    else
    {
      Log["Error"]("Failed to locate the Enter Intercept Checkbox");
      return false;
    }
    
    if(IsModified)
    {
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
      
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
      
      // verify success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Failed to verify Ssave Sucess popup")
        Log["PopLogFolder"]();
        return false;
      }
    }
    //-------------------------------------Exit TDef-------------------------------
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    } 
    
    Log["PopLogFolder"]();
    return true 
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//------------------------------------------------------------------------------------

//-----------------------------------TDef Calibration Tab-----------------------------

function ModifyCalibrationLotInterval(CalibrationLotInterval)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Modify Calibration lot interval as '"+CalibrationLotInterval+"' and Save");
    
    //Modify Calibration Lot Interval
    if(!SetCalibrationLotInterval(CalibrationLotInterval))
    {
      Log["Error"]("Failed to Set Calibration lot interval")
      Log["PopLogFolder"]();
      return false;
    }
       
    //Click Finish Button in TDef screen  and Click No button in confirmation to exist from TDef screen
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    }     
    Log["PopLogFolder"]();
    return true;
  }
   catch (e)
  {
    Log["Error"]("Exception : " + e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetCalibrationLotInterval(CalibrationLotInterval)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set CalibrationLot Interval '"+CalibrationLotInterval+"'");
    
    var IsUpdated=false;
    
    //Get the Calibration Lot Interval Control
    var txtCalibrationLotInterval = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtCalibrationLotIntervalDays")
    
    //Verify CalibrationLotInterval control exists    
    if(VerifyObjectExists((txtCalibrationLotInterval)))
    {
       Log["Message"]("Located the Calibration Lot Interval Textbox")
            
      //Verifying the CalibrationLotInterval is Entered
      if(txtCalibrationLotInterval["Text"]==CalibrationLotInterval)
      {
        Log["Message"]("Calibration Lot Interval is already :'"+ CalibrationLotInterval +"'");
        IsUpdated =true;
      }
      else
      {
        //Setting the Cal lot interval
        SetValue(txtCalibrationLotInterval,CalibrationLotInterval);
        IsUpdated = true;
        Log["Message"]("Entered the calibration Lot Interval as'"+ CalibrationLotInterval +"'");
        
        //Click Save button
        if(!ClickSaveButtonInTDefScreen())
        {
          Log["Error"]("Failed to Click save button")
          Log["PopLogFolder"]();
          return false;
        }
    
        aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
         //Verify success popup
        if(!VerifyTDefSuccessSavePopup())
        {
          Log["Error"]("Success Save popup verification failed")
          Log["PopLogFolder"]();
          return false;
        }
      }
    }
    else{
      Log["Error"]("Calibration Lot Interval Control is not located");
    }
    Log["PopLogFolder"]();
    return IsUpdated
  }
  catch(exp)
  {
    Log["Error"]("Exception",exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function IncreaseCalibrationLotInterval(CalibrationLotInterval)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Increase Calibration lot interval as '"+CalibrationLotInterval+"' ");
    
    var IsVerified=false;
    
    //Get the Calibration Lot Interval Control
    var txtCalibrationLotInterval = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtCalibrationLotIntervalDays")
    
    //Verify CalibrationLotInterval control exists    
    if(VerifyObjectExists((txtCalibrationLotInterval)))
    {
      Log["Message"]("Located the Calibration Lot Interval Textbox");
      
      //Setting the Display Name value
      SetValue(txtCalibrationLotInterval,CalibrationLotInterval);
    
      //Verifying the CalibrationLotInterval is Entered
      if(txtCalibrationLotInterval["Text"]!=CalibrationLotInterval)
      {
        Log["Message"]("Failed to Enter the calibration Lot Interval as'"+ CalibrationLotInterval +"'");
        IsVerified=true ;
      }
      else
      {
        Log["Error"]("Entered Calibration Lot Interval as '"+CalibrationLotInterval+"'");
      }
    }
    else
    {
      Log["Error"]("Calibration Lot Interval Control is not located");
    }
    Log["PopLogFolder"]();
    return IsVerified
  }
   catch (e)
  {
    Log["Error"]("Exception : " + e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function SetMinimumReplicates(newMinimumReplicates)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Minimum Replicates as '"+newMinimumReplicates+"' and Save");
    
    var minimumReplicates = GetMinimumReplicates() ;
    
    //check minimum replicates value is already the expected value
    if(minimumReplicates != newMinimumReplicates)
    {
      //Modify Minimum Replicates
      if(!ModifyMinimumReplicates(newMinimumReplicates))
      {
        Log["Error"]("Failed to modify Minimum Replicates")
        Log["PopLogFolder"]();
        return false;
      }
    
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
    
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
      //Verify success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Success Save Popup verification failed")
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Message"]("Minimum Replicates value is already set to : '"+newMinimumReplicates+"'");
    }
       
    //Click Finish Button in TDef screen  and Click No button in confirmation to exist from TDef screen
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    }
      
    Log["PopLogFolder"]();
    return true;
  }
   catch (e)
  {
    Log["Error"]("Exception : " + e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetMinimumReplicates()
{
  try
  {
     Log["AppendFolder"]("Assay Setup :: Get Minimum Replicates");
    
    var minimumReplicates;
    
    //Get the Minimum Replicates Control
    var txtMinimumReplicates = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtMinimumReplicates")
    
    //Verify Minimum Replicates control exists    
    if(VerifyObjectExists((txtMinimumReplicates)))
    {
      Log["Message"]("Located the Minimum Replicates control");
      
      //Get Minimum Replicates value
      minimumReplicates = txtMinimumReplicates["Text"];
      Log["Message"]("Current Minimum replicates value is :'"+minimumReplicates+"'")
      Log["PopLogFolder"]();
      return minimumReplicates;
    }
    else
    {
      Log["Error"]("Minimum Replicates Control is not located");
      Log["PopLogFolder"]()
      return false;
    }
  }
   catch (e)
  {
    Log["Error"]("Exception : " + e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ModifyMinimumReplicates(newMinimumReplicates)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Modify Minimum Replicates to '"+newMinimumReplicates+"'");
    
    var IsUpdated = false;
    
    //Get the Minimum Replicates Control
    var txtMinimumReplicates = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtMinimumReplicates")
    
    //Verify Minimum Replicates control exists    
    if(VerifyObjectExists((txtMinimumReplicates)))
    {
      Log["Message"]("Located Minimum Replicates Textbox")
      //Setting the Minimum Replicates value
      SetValue(txtMinimumReplicates,newMinimumReplicates);
      
      //Verifying the Minimum Replicates is Entered
      if(txtMinimumReplicates["Text"]==newMinimumReplicates)
      {
        Log["Message"]("Entered the Minimum Replicates as'"+ newMinimumReplicates +"'");
        IsUpdated=true ;
      }
      else
      {
        Log["Error"]("The Minimum Replicates is not modified");
      }
    }
    else
    {
      Log["Error"]("Minimum Replicates Control is not located");
    }
    Log["PopLogFolder"]();
    return IsUpdatedd
  }
  catch (e)
  {
    Log["Error"]("Exception : " + e["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetNewLotReplicatesLessThanMinimumReplicates(newLotReplicates)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set New Lot Replicates as '"+newLotReplicates+"' ");
 
    //Set New Replicates 
    if(!SetNewLotReplicates(newLotReplicates))
    {
      Log["Error"]("Failed to Set New Lot Replicates");
      return false;
    }
    
    //Get New Lot Replicate value
    var replicate=GetNewLotReplicates();
    
    //Verify New Replicates is modified
    if(replicate==false || replicate==newLotReplicates)
    {
      Log["Error"]("New Lot Replicates set to '"+newLotReplicates+"'")
      Log["Error"]("New lot Replicate Verification Failed");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Failed to enter New Replicates value less than Minimum replicates");
      Log["Message"]("New lot Replicate Verification Passed");
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetNewLotReplicates()
{
  try
  {
    Log["AppendFolder"]("Get New Replicated Value");
    
    //Get the New Lot Replicates Control
    var txtnewLotReplicates = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtNewLot")
    
    //Verify New Lot Replicates control exists    
    if(VerifyObjectExists((txtnewLotReplicates)))
    {
      Log["Message"]("Located New Replicates Textbox");
      //Get New replicates value
      var newReplicatesValue = txtnewLotReplicates["Text"] ;
      Log["Message"]("Current New Replicated Value is :'"+newReplicatesValue+"'")
      Log["PopLogFolder"]();
      return newReplicatesValue;
    }
    else
    {
      Log["Error"]("New Lot Replicates Control is not located");
      Log["PopLogFolder"]();
      return false ;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetNewLotReplicates(newLotReplicates)
{
  try
  {
    Log["AppendFolder"]("Set New Replicates Value");
    
    //Get the New Lot Replicates Control
    var txtnewLotReplicates = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtNewLot")
    
    //Verify New Lot Replicates control exists    
    if(VerifyObjectExists((txtnewLotReplicates)))
    {
      Log["Message"]("Located the New Replicates Textbox");
      
      //Setting the New Lot Replicates value
      SetValue(txtnewLotReplicates,newLotReplicates);
      
      //Changing the focus to verify the value getting reset
      txtnewLotReplicates["Keys"]("[Tab]");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("New Lot Replicates Control is not located");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function CheckCalibrationTriggerCheckbox(CalibrationTrigger)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Check All Calibration Trigger Checkboxes And Save");
    
    //Select Calibration Trigger checkbox
    if(!SelectCalibrationTriggerCheckbox(CalibrationTrigger))
    {
      Log["Error"]("Failed to Modify the Calibration Trigger Checkbox")
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click save button
    if(!ClickSaveButtonInTDefScreen())
    {
      Log["Error"]("Failed to Click Save button")
      Log["PopLogFolder"]();
      return false;
    }
    Log["PopLogFolder"]();
    return true;    
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function UnCheckCalibrationTriggerCheckbox(CalibrationTrigger)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: UnCheck Calibration Trigger Checkboxes And Save")
    
    //UnSelect Calibration Trigger checkbox
    if(!UnSelectCalibrationTriggerCheckbox(CalibrationTrigger))
    {
      Log["Error"]("Failed to Modify the Calibration Trigger Checkbox")
      Log["PopLogFolder"]();
      return false;
    }
    
    //Click Save button     
    if(!ClickSaveButtonInTDefScreen())
    {
      Log["Error"]("Failed to Click Save button")
      Log["PopLogFolder"]();
      return false;
    }
       
    Log["PopLogFolder"]();
    return true;    
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SelectCalibrationTriggerCheckbox(CalibrationTrigger)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Check Calibration Trigger Checkboxes");
    
    //Iterate throgh Calibration trigger checkboxes
    for(i=0;i<CalibrationTrigger.length;i++)
    {
      Log["AppendFolder"]("Select Calibration Trigger Checkbox : '"+CalibrationTrigger[i]+"'");
      
      //Get Calibration Trigger checkbox by name
      var triggerCtrl = GetCalibrationTriggerCheckBoxControl(CalibrationTrigger[i]);
      
      //verify Calibration Trigger checkbox exists
      if(VerifyObjectExists(triggerCtrl))
      {
        Log["Message"]("Located Calibration Trigger '"+CalibrationTrigger[i]+"'");
        
        //check Calibration Trigger checkbox is unchecked 0-Unchecked ,1-checked
        if(GetToggleState(triggerCtrl)==0)
        {
          //Get the Textblock inside checkbox
          triggerCtrl=Getchild(triggerCtrl,"ClassName","TextBlock");
          
          //click the textblock to check the Calibration Trigger checkbox
          ClickCtrl(triggerCtrl)
          Log["Message"]("Checked the Calibreation trigger checkbox'"+CalibrationTrigger[i]+"'");
          Log["PopLogFolder"]();
        }
        else
        {
          Log["Message"]("Calibreation trigger checkbox '"+CalibrationTrigger[i]+"' is already checked");
          Log["PopLogFolder"]();
        }
      }
      else
      {
        Log["Error"]("Failed to Locate Calibration Trigger "+CalibrationTrigger[i]+"");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;
      }
    }
    Log["Message"]("Calibration Trigger Checkboxes are Checked")
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function UnSelectCalibrationTriggerCheckbox(CalibrationTrigger)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: UnCheck Calibration Trigger Checkbox");
    
    for(i=0;i<CalibrationTrigger.length;i++)
    {
      Log["AppendFolder"]("UnSelect Calibration Trigger Checkbox : '"+CalibrationTrigger[i]+"'");
      
      //Get Calibration TriggerControl bu trigger name
      var triggerCtrl = GetCalibrationTriggerCheckBoxControl(CalibrationTrigger[i]);
    
      //Check Calibration trigger checkbox exists  
      if(VerifyObjectExists(triggerCtrl))
      {
        Log["Message"]("Located Calibration Trigger checkbox '"+CalibrationTrigger[i]+"'")
        
        //check Calibration trigger is checked
        if(GetToggleState(triggerCtrl)==1)
        {
          //Get the Textblock inside checkbox
          triggerCtrl=Getchild(triggerCtrl,"ClassName","TextBlock");
          
          //Click the textblock to unselect the checkbox
          ClickCtrl(triggerCtrl);
          Log["Message"]("Unchecked Calibration Trigger Checkbox '"+CalibrationTrigger[i]+"'")
          Log["PopLogFolder"]();
        }
        else
        {
          Log["Message"]("Calibration trigger checkbox '"+CalibrationTrigger[i]+"' is already Unchecked");
          Log["PopLogFolder"]();
        }
      }
      else
      {
        Log["Error"]("Failed to Locate Calibration Trigger "+CalibrationTrigger[i]+"");
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;
      }
    }
    Log["Message"]("Calibration Trigger Checkboxes are UnChecked")
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationTrigger(CalibrationTrigger)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Calibration Trigger Checkboxes");
    
    //varibale to store number of Calibration triggers checked
    var triggerChecked=0;
    
    //iterate through Calibration triggers
    for(i=0;i<CalibrationTrigger.length;i++)
    {
      //Get calibration trigger based on name
      var triggerCtrl = GetCalibrationTriggerCheckBoxControl(CalibrationTrigger[i]);
      
      //check Calibration trigger exists
      if(VerifyObjectExists(triggerCtrl))
      {
        Log["Message"]("Located Calibratiob trigger "+CalibrationTrigger[i]+"");
        
        //check Calibration trigger is checked
        if(GetToggleState(triggerCtrl) == 1)
        {
          Log["Message"]("Calibreation trigger checkbox'"+CalibrationTrigger[i]+"' is checked");
          triggerChecked = triggerChecked+1;
        }
        else
        {
          Log["Error"]("Calibreation trigger checkbox '"+CalibrationTrigger[i]+"' is not checked");
        }
      }
      else
      {
        Log["Error"]("Failed to Locate Calibration Trigger "+CalibrationTrigger[i]+"");
        Log["PopLogFolder"]();
        return false;
      }
    }
    
    //check the all calibration triggers are checked
    if(triggerChecked == CalibrationTrigger.length)
    {
      Log["Checkpoint"]("Calibration Triggers verification passed");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Calibration Trigger verification failed");
      Log["PopLogFolder"](); 
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationTriggerNotChecked(CalibrationTrigger)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Calibration Trigger Checkboxes");
    
    //varibale to store number of Calibration triggers checked
    var triggerUnChecked=0;
    
    //iterate through Calibration triggers
    for(i=0;i<CalibrationTrigger.length;i++)
    {
      //Get Calibration trigger based on trigger name
      var triggerCtrl = GetCalibrationTriggerCheckBoxControl(CalibrationTrigger[i]);
      
      //check Calibration trigger exists
      if(VerifyObjectExists(triggerCtrl))
      {
        Log["Message"]("Located Calibration trigger '"+CalibrationTrigger[i]+"'");
        
        //check calibration trigger is in unchecked state
        if(GetToggleState(triggerCtrl)==0)
        {
          Log["Message"]("Calibreation trigger checkbox'"+CalibrationTrigger[i]+"' is not checked");
          triggerUnChecked=triggerUnChecked+1;
        }
        else
        {
          Log["Error"]("Calibreation trigger checkbox '"+CalibrationTrigger[i]+"' is in checked state");
        }
      }
      else
      {
        Log["Error"]("Failed to Locate Calibration Trigger checkbox "+CalibrationTrigger[i]+"");
        Log["PopLogFolder"]();
        return false;
      }
    }
    
     //check the all calibration triggers are Unchecked
    if(triggerUnChecked==CalibrationTrigger.length)
    {
      Log["Checkpoint"]("Calibration Triggers verification passed");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Calibration Trigger verification failed");
      Log["PopLogFolder"](); 
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationTriggerCheckboxNotModified(CalibrationTrigger)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Calibration Trigger Checkbox is Disabled");
    
    for(i=0;i<CalibrationTrigger.length;i++)
    {
      //Get Calibration trigger based on trigger name
      var triggerCtrl = GetCalibrationTriggerCheckBoxControl(CalibrationTrigger[i]);
      
      //verify calibration trigger exists
      if(VerifyObjectExists(triggerCtrl))
      {
        Log["Message"]("Located the Calibration trigger checkbox '"+CalibrationTrigger[i]+"'");
        
        //Get Calibration trigger checkbox state
        if(GetToggleState(triggerCtrl)==1)
        {
          //Get the Textblock inside checkbox
          triggerCtrl=Getchild(triggerCtrl,"ClassName","TextBlock");
          
          //Click the textblock to modify checkbox state
          ClickCtrl(triggerCtrl);
          Log["Message"]("Clicked on Claibration trigger checkbox")
          Log["PopLogFolder"]();
          return true;
        }
        
        //check Calibration trigger checkbox checked state changed
        if(GetToggleState(triggerCtrl)==1)
        {
          Log["Message"]("Cailbration trigger modification verification passed")
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          Log["Message"]("Cailbration trigger modification verification failed")
          Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Error"]("Failed to Locate Calibration Trigger "+CalibrationTrigger[i]+"");
        Log["PopLogFolder"]();
        return false;
      }
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetCalibrationCheckBoxControl(calibrationCheckBoxCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get the Calibration CheckBox Control");

    var calibrationCheckBoxCtrl;
    
    //Get Calibration screen checkboxes using checkbox name
    switch (calibrationCheckBoxCtrlName)
    {
      case "ExtendCalibration":
              calibrationCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxExtendCal");
              break;
      case "AcceptCal":
              calibrationCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxAcceptCal");
              break;
      case "AutoExcludeCalReplicate":
              calibrationCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxAutoexcludeCalReplicate");
              break;
      case "PerformQCWithCalibration":
              calibrationCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxPerformQCWithCalibration");
              break;
      case "AutomaticAcceptance":
              calibrationCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxAutomaticAcceptance");
              break;
    } 
    
    //check checkbox exists in UI
    if(VerifyObjectExists(calibrationCheckBoxCtrl))  
    {
      Log["Message"]("Located the '"+calibrationCheckBoxCtrlName+"' Checkbox control");
      Log["PopLogFolder"]();
      return calibrationCheckBoxCtrl;
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationCheckBoxCtrlName+"' Checkbox control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetCalibrationTriggerCheckBoxControl(CalibrationTriggerName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get Calibration Trigger Checkbox '"+CalibrationTriggerName+"'");
    
    var triggerCtrl;
    
    //get calibration trigger checkbox based on name 
    switch(CalibrationTriggerName)
    {
      case "LotCalibrationExpiration":
        triggerCtrl=GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxLotCalibrationExpiration");
        break;
      case "PackCalibrationExpiration":
        triggerCtrl=GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxPackCalibrationExpiration");
        break;
      case "NewLot":
        triggerCtrl=GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxNewLot");
        break;
      case "IFUChanged":
        triggerCtrl=GetAutomationIDControl("HowDoI_AssaySetup_Calibration","checkBoxIFUChanged");
        break;
    }
    
    //check Calibration trigger exists
    if(VerifyObjectExists(triggerCtrl))
    {
      Log["Message"]("Located the Calibration trigger checkbox");
      Log["PopLogFolder"]();
      return triggerCtrl;
    }
    else
    {
      Log["Error"]("Failed to Locate the Calibration trigger checkbox");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    return false;
  }
}


//function VerifyUnitIsEditable(assayType,unitValue)
//{
//  try
//  {
//    Log["AppendFolder"]("Verify Calculation Unit Is Editable");
//  
//    //Get Unit Value
//    var prevunit=GetCalculationUnit(assayType);
//    
//    if(prevunit=="" || prevunit=false);
//    {
//      Log["Error"]("Failed to Get Unit Value");
//      Log["PopLogFolder"]();
//      return false;
//    }
//    
//    //Set Unit Value
//    if(SetCalculationUnit(assayType,unitValue))
//    {
//      Log["Error"]("Failed to Set Unit Value");
//      Log["PopLogFolder"]();
//      return false;
//    }
//    
//    //Get Unit Value
//    var currentUnit=GetCalculationUnit(assayType);
//    
//    if(currentUnit=="" || currentUnit=false);
//    {
//      Log["Error"]("Failed to Get Unit Value");
//      Log["PopLogFolder"]();
//      return false;
//    }
//    
//    //Verify Unit value is modified
//    if(prevunit!=currentUnit)
//    {
//      Log["Message"]("Unit Value is modified as '"+currentUnit+"'")
//      Log["Checkpoint"]("Unit Enable Verification Passed");
//      Log["PopLogFolder"]();
//      return true;
//    }
//    else
//    {
//      Log["Error"]("Unit Value is not modified")
//      Log["Error"]("Unit Enable Verification Failed");
//      Log["PopLogFolder"]();
//      return false;;
//    }   
//  }
//  catch (exp)
//  {
//    Log["Error"]("Exception : " + exp["Description"]);
//    Log["PopLogFolder"]();
//    return false;
//  }
//}

function VerifyUnitIsEditable(assayType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Unit Is Editable");
  
    var unitCtrl;
    
    //Get the Calculation Unit Ctrl based on Assay type
    switch (assayType)
    {
      case "IM":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxIMUnit");
        break;
    
      case "CH":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxCHUnit");
        break;
    }
    
    //verify unit is enabled
    if(!VerifyObjectEnabled(unitCtrl))
    {
     Log["Error"]("Unit is not editable") ;
     Log["PopLogFolder"]();
     return false;
    }
    else
    {
      Log["Checkpoint"]("Unit is editable");
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyUnitIsNotEditable(assayType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Unit Can Not Be Modified");
  
    var unitCtrl;
    
    //Get the Calculation Unit Ctrl based on Assay type 
    switch (assayType)
    {
      case "IM":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxIMUnit");
        break;
    
      case "CH":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxCHUnit");
        break;
    }
    
    //verify unit is enabled
    if(VerifyObjectEnabled(unitCtrl))
    {
     Log["Error"]("Unit is editable") ;
     Log["PopLogFolder"]();
     return false;
    }
    else
    {
      Log["Checkpoint"]("Unit is not editable");
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetMasterCurveUnit()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get The Master Curve Unit");
  
    //Get the Master Curve Unit Ctrl
    var MCUnitCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxMasterCurveUnit");
  
    //check Master Curve Unit exists
    if(VerifyObjectExists(MCUnitCtrl))
    {
      Log["Message"]("Located the MasterCurveUnit Control");
      
      //Get the Combobox item already selected
      var MCUnitItemCtrl = Getchild(MCUnitCtrl,"ClassName","ComboBoxItem")
      
      //Get the current MCUnit value
      var MCUnitValue= GetNativeObjectName(MCUnitItemCtrl) ;
      Log["Message"]("Master Curve Unit is displayed as "+MCUnitValue+"");
      Log["PopLogFolder"]();
      return MCUnitValue;
    }
    else
    {
      Log["Error"]("Failed to locate the Master Control Unit conrol");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetCalculationUnit(assayType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get The Calculation Unit");
   
    var unitCtrl;
    
    //Get the Calculation Unit Ctrl  bases on assaytype
    switch (assayType)
    {
      case "IM":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxIMUnit");
        break;
    
      case "CH":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxCHUnit");
        break;
    }
      
    if(VerifyObjectExists(unitCtrl))
    {
      Log["Message"]("Located the MasterCurveUnit Control");
      
      //Get the Unint Combobox item selected
      var UnitItemCtrl=Getchild(unitCtrl,"ClassName","ComboBoxItem")
      
      //Get the current Unit value
      var UnitValue = GetNativeObjectName(UnitItemCtrl) ;
      Log["Message"]("Calculation Unit is displayed as "+UnitValue+"");
      Log["PopLogFolder"]();
      return UnitValue;
    }
    else
    {
      Log["Error"]("Failed to locate the Calculation Unit conrol");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetCalculationUnit(assayType,unit)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Calculation Unit");
  
    var unitCtrl;
    
    //Get the Calculation Unit Ctrl  bases on assaytype
    switch (assayType)
    {
      case "IM":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxIMUnit");
        break;
    
      case "CH":
        unitCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxCHUnit");
        break;
    }
  
    //check unit Control exists
    if(VerifyObjectExists(unitCtrl))
    {
      Log["Message"]("Located the Unit Control");
      
      //get unit combobox item selected
      var unitValueCtrl = Getchild(unitCtrl,"ClassName","ComboBoxItem");
      
      //verify Unit combobox item exists
      if(VerifyObjectExists(unitValueCtrl))
      {
        Log["Message"]("Unit is displayed as "+GetNativeObjectName(unitValueCtrl)+"");
      }
      else
      {
        Log["Error"]("Failed to get the unit value");
      }
      
      //Set the unit
      SelectComboBoxItem(unitCtrl,unit)
      
      Log["Message"]("Unit is set as "+unit+"");
      Log["PopLogFolder"](); 
      return true;
    }
    else
    {
      Log["Error"]("Failed to locate the Unit conrol");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetUnitValueAsMasterCurveUnit(assayType,assayName,tDefScreen)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Unit as Master Curve Unit");
    
    //Get MC value
    var MCValue=GetMasterCurveUnit(assayType,assayName,tDefScreen);
    
    //Check MCValue
    if(MCValue==false || MCValue=="")
    {
      Log["Error"]("Failed to Get the MC Value");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Master Curve Unit Is displayed as"+MCValue+"")
    }
    
    //Get Calculation Unit Value
    var calculationUnit = GetCalculationUnit(assayType);
    
    if(calculationUnit == "")
    {
      Log["Error"]("Failed to Get the Calculation Unit Value");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Calculation Unit displayed as '"+ calculationUnit +"'")
    }
    
    //Check Calcultion unit and MCUnit are not Same
    if(MCValue != calculationUnit)
    {
      //Set Unit value as MC value
      if(!SetCalculationUnit(assayType,MCValue))
      {
        Log["Error"]("Failed to set Unit as "+MCValue+"")
        Log["PopLogFolder"]();
        return false;
      }
      else
      {
        Log["Message"]("Unit Value is set as"+MCValue+"")
      }
      
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
    
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
      
      //Verify success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Success Save popup verification failed")
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Message"]("Calculation Unit and Master Curve Unit is same")
    }
     
    //Exit TDef by click Finish button in TDEF screen and Clicking No in alert
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    }     
    
    Log["Checkpoint"]("Calcultion Unit is Set same as MasterCurve Unit successfully")
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetUnitValueNotSameAsMasterCurveUnit(assayType,Unit)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Unit Not Same As Master Curve Unit");
    
    //Get Master Curve Unit value
    var MCValue = GetMasterCurveUnit();
      
    //check MCUnit combobox Value is fetched 
    if(MCValue == false || MCValue == "")
    {
      Log["Error"]("Failed to Get the MC Value");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Master Curve Unit Is displayed as '"+MCValue+"'")
    }
    
    //Get Calculation Unit Value
    var calculationUnit = GetCalculationUnit(assayType);
    
    //check Calculation Unit checkbox is fetched
    if(calculationUnit == false || calculationUnit == "")
    {
      Log["Error"]("Failed to Get the Calculation Unit Value");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Calculation Unit displayed as '"+ calculationUnit +"'")
    }
    
    //check MCUnit and Calculation Unit are same
    if(MCValue == calculationUnit)
    {
      //Set diffrent Unit value 
      if(!SetCalculationUnit(assayType,Unit))
      {
        Log["Error"]("Failed to set Unit as '"+Unit+"'")
        Log["PopLogFolder"]();
        return false;
      }
      else
      {
        Log["Message"]("Unit Value is set as '"+Unit+"'")
      }
      
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
    
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
      
      //Verify success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Success Save popup verication failed")
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Message"]("Calculation Unit and Master Curve Unit is not same");
    }
    
    //Exit TDef by click Finish button in TDEF screen and Clicking No in alert
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    }     
    
    Log["Checkpoint"]("Calcultion Unit is Set not same as MasterCurve Unit successfully");
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function VerifyAssayComparisonCorrelationIsEditable(CorrelationCoefficient,CorrelationCoefficientValue)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Assay Comparison Correlation Can Be Modified");
  
    //Get AssayComparisonCorrelation Value
    var prevAssayComparisonCorrelation=GetAssayComparisonCorrelation(CorrelationCoefficient);
    
    //check AssayComparisonCorrelation is fetched
    if(prevAssayComparisonCorrelation == "")
    {
      Log["Error"]("Failed to Get Assay Comparison Correlation Value");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Set AssayComparisonCorrelation Value
    if(!SetAssayComparisonCorrelation(CorrelationCoefficient,CorrelationCoefficientValue))
    {
      Log["Error"]("Failed to Set Assay Comparison Correlation Value");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Get AssayComparisonCorrelation Value
    var currentAssayComparisonCorrelation=GetAssayComparisonCorrelation(CorrelationCoefficient);
    
    //check AssayComparisonCorrelation is fetched
    if(currentAssayComparisonCorrelation == "")
    {
      Log["Error"]("Failed to Get Assay Comparison Correlation Value");
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify AssayComparisonCorrelation value is modified
    if(prevAssayComparisonCorrelation != currentAssayComparisonCorrelation)
    {
      Log["Message"]("AssayComparisonCorrelation Value for "+CorrelationCoefficient+ " is modified as '"+currentAssayComparisonCorrelation+"'")
      Log["Checkpoint"]("AssayComparisonCorrelation Enable Verification Passed");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("AssayComparisonCorrelation Value for "+CorrelationCoefficient+" is not modified")
      Log["Error"]("AssayComparisonCorrelation Enable Verification Failed");
      Log["PopLogFolder"]();
      return false;;
    }   
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyAssayComparisonCorrelationForIMIsEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Assay Comparison Correlation Is Editable");
    
    
    Log["AppendFolder"]("Verify Slope Is Editable")
    
    //Get Slope control
    var slopeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtSlope");
    
    //verify Slope is editable
    if(VerifyObjectEnabled(slopeCtrl))
    {
      Log["Message"]("Slope  value is editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Slope value is not editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["AppendFolder"]("Verify Intercept Is Editable");
    
    //Get Intercept control
    var interceptCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtIntercept");
    
    //verify intercept is editable
    if(VerifyObjectEnabled(interceptCtrl))
    {
      Log["Message"]("Intercept  value is editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Intercept value is not editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["Checkpoint"]("Assay Comparison Correlation Is Editable");
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyAssayComparisonCorrelationForIMIsNotEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Assay Comparison Correlation Is Not Editable");
    
    
    Log["AppendFolder"]("Verify Slope Is Not Editable")
    
    //Get Slope control
    var slopeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtReadonlySlope");
    
    //verify Slope is editable
    if(VerifyObjectExists(slopeCtrl))
    {
      Log["Message"]("Slope value is not editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Slope value is editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["AppendFolder"]("Verify Intercept Is Not Editable");
    
    //Get Intercept control
    var interceptCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtReadonlyIntercept");
    
    //verify intercept is editable
    if(VerifyObjectExists(interceptCtrl))
    {
      Log["Message"]("Intercept  value is  not editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Intercept value is editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["Checkpoint"]("Assay Comparison Correlation Is not Editable");
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifySlopeAndInterceptIsAvailable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Slope And Intercept is Available");
    
    
    Log["AppendFolder"]("Verify Slope Is Editable")
    
    //Get Slope control
    var slopeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtSlope");
    
    //verify Slope is editable
    if(VerifyObjectEnabled(slopeCtrl))
    {
      Log["Message"]("Slope  value is editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Slope value is not editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["AppendFolder"]("Verify Intercept Is Editable");
    
    //Get Intercept control
    var interceptCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtIntercept");
    
    //verify intercept is editable
    if(VerifyObjectEnabled(interceptCtrl))
    {
      Log["Message"]("Intercept  value is editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Intercept value is not editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["Checkpoint"]("Assay Comparison Correlation Is Availble");
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetAssayComparisonCorrelation(CorrelationCoefficient)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get Assay Comparison Correlation For '"+CorrelationCoefficient+"'")
    
    //Get the AssayComparisonCorrelation pivot control
    var AssayComparisonCorrelationPivotCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","AssayComparisonCorrelationPivotForCH");
    
    //verify AssayComparisonCorrelationPivotCtrl is enabled
    if(VerifyObjectEnabled(AssayComparisonCorrelationPivotCtrl))
    {
      //Get AssayComparisonCorrelation Ctrl
      var AssayComparisonCorrelationCtrl=Getchild(AssayComparisonCorrelationPivotCtrl,"ObjectIdentifier",CorrelationCoefficient);

      //check AssayComparisonCorrelationCtrl exists
      if(VerifyObjectExists(AssayComparisonCorrelationCtrl))
      {
        //Get current value in AssayComparisonCorrelation control
        var currentAssayComparisonCorrelationValue = AssayComparisonCorrelationCtrl["Text"];
        
        Log["Message"]("Assay Comparison Correlation Value displayed for '"+CorrelationCoefficient+"' : '"+currentAssayComparisonCorrelationValue+"'");
        Log["PopLogFolder"]();
        return currentAssayComparisonCorrelationValue;
      }
      else
      {
        Log["Error"]("Failed to get the Current Assay Comparison Correlation value");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Assay Comparison Correlation control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetAssayComparisonCorrelation(CorrelationCoefficient,CorrelationCoefficientValue)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Assay Comparison Correlation For '"+CorrelationCoefficient+"'")
    
    //Get the AssayComparisonCorrelation pivot control
    var AssayComparisonCorrelationPivotCtrl= GetAutomationIDControl("HowDoI_AssaySetup_Calculation","AssayComparisonCorrelationPivotForCH");
    
    //verify AssayComparisonCorrelationPivotCtrl is enabled
    if(VerifyObjectEnabled(AssayComparisonCorrelationPivotCtrl))
    {
      //Get AssayComparisonCorrelation Ctrl
      var AssayComparisonCorrelationCtrl=Getchild(AssayComparisonCorrelationPivotCtrl,"ObjectIdentifier",CorrelationCoefficient);

      //check AssayComparisonCorrelation Ctrl exists
      if(VerifyObjectExists(AssayComparisonCorrelationCtrl))
      {
        //Set value in AssayComparisonCorrelation control
        SetValue(AssayComparisonCorrelationCtrl,CorrelationCoefficientValue)
        
        Log["Message"]("Assay Comparison Correlation Value for '"+CorrelationCoefficient+"' is set as: '"+CorrelationCoefficientValue+"'");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Failed to get the Current Assay Comparison Correlation value");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Assay Comparison Correlation control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyAssayComparisonCorrelationIsNotEditable()
{
  try
  {
    Log["AppendFolder"]("Verify Assay Comparison Correlation Is Not Editable");
    
    
    Log["AppendFolder"]("Verify Slope Is Not Editable")
    
    //Get Slope control
    var slopeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtReadonlySlope");
    
    //verify Slope is editable
    if(VerifyObjectExists(slopeCtrl))
    {
      Log["Message"]("Slope value is not editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Slope value is editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["AppendFolder"]("Verify Intercept Is Not Editable");
    
    //Get Intercept control
    var interceptCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtReadonlyIntercept");
    
    //verify intercept is editable
    if(VerifyObjectExists(interceptCtrl))
    {
      Log["Message"]("Intercept  value is  not editable");
      Log["PopLogFolder"](); 
    }
    else
    {
      Log["Error"]("Intercept value is editable");
      Log["PopLogFolder"]();
      return false; 
    }
    
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyHILThresholdIsEditable(assayType,HILThresholdList)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify HIL Threshold Is Editable");
    
    HILThresholdList = HILThresholdList["split"](";");
    
    for(var i=0;i<HILThresholdList.length;i++)
    {
      var HILName = HILThresholdList[i]["split"](":")[0];
      var HILThreshold = HILThresholdList[i]["split"](":")[1];
      var HILCtrl ;
      
      Log["AppendFolder"]("Verify '"+HILName+"' is editable")
      
      //Get HIL Control
      if(assayType=="IM")
      {
        switch(HILName)
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxIMHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxIMIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxIMLipemia");
          break;
        }
      }
      else
      {
        switch(HILName)
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxCHHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxCHIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxCHLipemia");
          break;
        }
      }
      
      //check HILCtrl exists and is enabled   
      if(VerifyObjectEnabled(HILCtrl))
      {
        Log["Message"]("Located the HIL control '"+HILName+"'")
        
        //Get HIL value before modifying
        var HILTextControl=Getchild(HILCtrl,"ClassName","ComboBoxItem");
        
        //Get the HIL ctrl value before modification
        var prevHILValue= GetNativeObjectName(HILTextControl) ;
        
        Log["Message"](""+HILName+" value is :"+prevHILValue+"'")
        
        //modify HIL value
        SelectComboBoxItem(HILCtrl,HILThreshold) 
        
        Log["Message"](""+HILName+" value is modified")
        
        //refreshing HILCtrl object to get updated HIL value
        HILCtrl["Refresh"]();
        
        //Get HIL value after modifying
        var HILTextControl=Getchild(HILCtrl,"ClassName","ComboBoxItem");
        
        //get current HILCtrl value
        var curHILValue= GetNativeObjectName(HILTextControl) ; 
              
        Log["Message"](""+HILName+" value is :"+curHILValue+"'")
        
        //check HIL is modified
        if(prevHILValue!=curHILValue)
        {
          Log["Message"]("HIL control "+HILName+" is Editable");
        }
        else
        {
          Log["Error"]("HIL control "+HILName+" is not Editable");
          Log["PopLogFolder"]();
          Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Error"]("Failed to Locate "+HILName+" control")
        Log["PopLogFolder"]();
        Log["PopLogFolder"]();
        return false;
      }
      Log["PopLogFolder"]();
    }
    
    Log["Checkpoint"]("HIL Threshold Is Editable");
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyHILIsEditable(assayType,HILNameList)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify HIL Is Editable");
    
    var HILName=HILNameList["split"](";");
    
    var isModified=false;
    for(var i=0;i<HILName.length;i++)
    {
      
      if(assayType=="IM")
      {
        switch(HILName[i])
        {
        case "Hemolysis" :
          var HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMHemolysis");
          break;
        case "Icterus" :
          var HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMIcterus");
          break;
        case "Lipemia" :
          var HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMLipemia");
          break;
        }
      }
      else
      {
        switch(HILName[i])
        {
        case "Hemolysis" :
          var HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHHemolysis");
          break;
        case "Icterus" :
          var HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHIcterus");
          break;
        case "Lipemia" :
          var HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHLipemia");
          break;
        }
      }
      
      if(VerifyObjectExists(HILCtrl))
      {
        Log["Message"]("Located the '"+HILName[i]+"' Checkbox Control");
      
        var prevCheckboxState = GetToggleState(HILCtrl);

        //Get the Textblock inside checkbox
        var HILtxtCtrl=Getchild(HILCtrl,"ClassName","TextBlock");
        
        //modify the HIL checkbox
        ClickCtrl(HILtxtCtrl);
      
        //verify checkbox is not modified
        if(GetToggleState(HILCtrl) != prevCheckboxState)
        {
          Log["Message"]("'"+HILName[i]+"' check box is editable")
        }
        else
        {
          Log["Error"]("'"+HILName[i]+"' check box is not editable")
          Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Error"]("Failed to Locate the '"+HILName[i]+"' Checkbox Control");
        Log["PopLogFolder"]();
        return false;
      }
    }
    
    Log["Checkpoint"]("Verified that HIL Is Editable");
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyHILIsNotEditable(assayType,HILNameList)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify HIL Is Not Editable");
    
    var HILName=HILNameList["split"](";");
    var isModified=false;
    var HILCtrl;
    
    for(var i=0;i<HILName.length;i++)
    {
      //get HIL control bases on assaytype
      if(assayType=="IM")
      {
        switch(HILName[i])
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMLipemia");
          break;
        }
      }
      else
      {
        switch(HILName[i])
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHLipemia");
          break;
        }
      }
      
      //check HIL checkbox exists
      if(VerifyObjectExists(HILCtrl))
      {
        Log["Message"]("Located the '"+HILName[i]+"' Checkbox Control");
      
        //get HIL checkbox state
        var prevCheckboxState = GetToggleState(HILCtrl);
      
        //Get the Textblock inside checkbox
        var HILtxtCtrl=Getchild(HILCtrl,"ClassName","TextBlock");
        
        //modify the HIL checkbox
        ClickCtrl(HILtxtCtrl);
      
        //verify checkbox is not modified
        if(GetToggleState(HILCtrl) == prevCheckboxState)
        {
          Log["Message"]("'"+HILName[i]+"' check box is not editable")
        }
        else
        {
          Log["Error"]("'"+HILName[i]+"' check box is editable")
          Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Error"]("Failed to Locate the '"+HILName[i]+"' Checkbox Control");
        Log["PopLogFolder"]();
        return false;
      }
    }
    Log["Checkpoint"]("Verified that HIL is not Editable");
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function EnableHILInCalculation(assayType,HILNameList)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Enable HIL");
    
    var HILName=HILNameList["split"](";");
    
    var isModified=false;
    var HILCtrl;
    
    for(var i=0;i<HILName.length;i++)
    {
      //Check assay type and assign controls respectively
      if(assayType=="IM")
      {
        switch(HILName[i])
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMLipemia");
          break;
        }
      }
      else
      {
        //Check assay type and assign controls respectively
        switch(HILName[i])
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHLipemia");
          break;
        }
      }
      
      //check HIL checkbox exists
      if(VerifyObjectEnabled(HILCtrl))
      {
        //Check HIL control is checked
        if(GetToggleState(HILCtrl)==1)
        {
          Log["Message"]("HIL "+HILName[i]+" is already enabled")
        }
        else
        {
          //Get the Textblock inside checkbox
          HILCtrl=Getchild(HILCtrl,"ClassName","TextBlock");
          
          //click the textblock to modify the checkbox state
          ClickCtrl(HILCtrl);
          isModified=true;
          Log["Message"]("HIL "+HILName[i]+" is enabled")
        }
      }
      else
      {
        Log["Error"]("Failed to Locate "+HILName[i]+" control");
        return false;
      }
    }
    
    if(isModified)
    {
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
      
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
      //success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Success save popup verification failed")
        Log["PopLogFolder"]();
        return false;
      }
    
    }
    
    //Exit TDef by click Finish button in TDEF screen and Clicking No in alert
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    } 
    else
    {
      Log["Message"]("Successfully exited from TDef screen");
    }
    
    Log["Checkpoint"]("Successfully enabled HIL")    
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function DisableHILInCalculation(assayType,HILNameList)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Disable HIL And Save");
    
    var HILName=HILNameList["split"](";");
    var isModified = false;
    var HILCtrl;
    
    for(var i=0;i<HILName.length;i++)
    {
      //get HIL control based in assaytype
      if(assayType=="IM")
      {
        switch(HILName[i])
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxIMLipemia");
          break;
        }
      }
      else
      {
        switch(HILName[i])
        {
        case "Hemolysis" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHHemolysis");
          break;
        case "Icterus" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHIcterus");
          break;
        case "Lipemia" :
          HILCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","checkBoxCHLipemia");
          break;
        }
      }
      
      //check HIL control exists
      if(VerifyObjectEnabled(HILCtrl))
      {
        //check HIL is already disabled
        if(GetToggleState(HILCtrl)==0)
        {
          Log["Message"]("HIL "+HILName[i]+" is already disabled")
        }
        else
        {
          //Get the Textblock inside checkbox
          HILCtrl=Getchild(HILCtrl,"ClassName","TextBlock");
          
          //click the  textblock to disable HIL control
          ClickCtrl(HILCtrl);
          isModified=true;
          Log["Message"]("HIL "+HILName[i]+" is disabled")
        }
      }
      else
      {
        Log["Error"]("Failed to Locate "+HILName[i]+" control");
        return false;
      }
    }
    
    if(isModified)
    {
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
      
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
      
      //success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Success Save popup verification failed")
        Log["PopLogFolder"]();
        return false;
      }
    }
    
    //Exit TDef
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    } 
    
    Log["Checkpoint"]("Successfully Disbaled HIL")  
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetDecimalPlacesAsNotLocked()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Decimal Places As Unlocked");
  
    //Get Concentration Decimal Lock control
    var concentrationDecimalLock = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","ToggleConcentraionDecimal");
  
    var isModified=false;
  
    //check Concentration Decimal Lock control exists and enabled
    if(VerifyObjectEnabled(concentrationDecimalLock))
    {
      Log["Message"]("Located Concentration Decimal Place Lock control")
      
      //check Concentration Decimal Lock control is Locked
      if(GetToggleState(concentrationDecimalLock) == 1)
      {
        //click the Concentration Decimal Lock control to unlock
        ClickCtrl(concentrationDecimalLock);
        isModified=true;
        Log["Message"]("Unlocked Concentration Decimal Places");
      }
      else
      {
        Log["Message"]("Concentration Decimal Places is already unlocked")
      }
    }
    else
    {
      Log["Error"]("Failed to locate Concentration Decimal lock");
      Log["PopLogFolder"]();
      return false;
    }
  
    //Get Index Decimal lock control
    var indexDecimalLock = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","ToggleIndexDecimal");
  
    //Check indexDecimalLock exist and enabled
    if(VerifyObjectEnabled(indexDecimalLock))
    {
      Log["Message"]("Located Index Decimal Place Lock control")
      
      //check Index Decimal place is locked
      if(GetToggleState(indexDecimalLock) == 1)
      {
        //click index decimal lock control to unlock
        ClickCtrl(indexDecimalLock);
        isModified=true;
        Log["Message"]("Unlocked Index Decimal Places");
      }
      else
      {
        Log["Message"]("Index Decimal Places is already unlocked");
      }
    }
    else
    {
      Log["Error"]("Failed to locate Index Decimal lock");
      Log["PopLogFolder"]();
      return false;
    }
    
    if(isModified)
    {
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
      
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
      
      //Verify success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Success Save popup verification failed")
        Log["PopLogFolder"]();
        return false;
      }
    }
  
    //Exit TDef
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    }   
     
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetDecimalPlacesAsLocked()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Decimal Places As Locked");
  
    //Get Concentration Decimal Lock control
    var concentrationDecimalLock = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","ToggleConcentraionDecimal");
  
    var isModified = false;
  
    //check concentrationDecimalLock exists and enabled
    if(VerifyObjectEnabled(concentrationDecimalLock))
    {
      //Check concentration decimal control is in unlocked state
      if(GetToggleState(concentrationDecimalLock) == 0)
      {
        //click the concentration decimal lock control to lock
        ClickCtrl(concentrationDecimalLock);
        isModified=true;
        Log["Message"]("Locked Concentration Decimal Places control");
      }
      else
      {
        Log["Message"]("Concentration Decimal Places control is already in Locked state")
      }
    }
    else
    {
      Log["Error"]("Failed to locate Concentration Decimal lock");
      Log["PopLogFolder"]();
      return false;
    }
  
    //Get Index Decimal lock control
    var indexDecimalLock = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","ToggleIndexDecimal");
  
    //check Index Decimal Lock crl exist and enabled
    if(VerifyObjectEnabled(indexDecimalLock))
    {
      //Check index decimal control is locked
      if(GetToggleState(indexDecimalLock) == 0)
      {
        //click indexDecimal Lock ctrl to lock
        ClickCtrl(indexDecimalLock);
        isModified=true;
        Log["Message"]("Locked Index Decimal Places control");
      }
      else
      {
        Log["Message"]("Index Decimal Places is already locked");
      }
    }
    else
    {
      Log["Error"]("Failed to locate Index Decimal lock");
      Log["PopLogFolder"]();
      return false;
    }
    
    if(isModified)
    {
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
      
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
      
      //Verify success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Success Save popup verification failed")
        Log["PopLogFolder"]();
        return false;
      }
    }
  
    //Exit TDef
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    }    
    else
    {
      Log["Message"]("Successfully exited from TDef screen");
    }
    
    Log["Checkpoint"]("Decimal Places are set as Locked successfully")
    Log["PopLogFolder"]();
    return true; 
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyDecimalPlaceIsEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Concentration Decimal Is Editable");
    
    //Get concentrationDecimal  control
    var concentrationDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxImTestCalcConcentrationDecimal");
    
    //check concentrationDecimal control exist and enabled
    if(VerifyObjectEnabled(concentrationDecimalCtrl))
    {
      Log["Message"]("Concentration Decimal is editable");
      Log["PopLogFolder"]();
    }
    else
    {
      Log["Error"]("Concentration decimal is not editable");
      Log["PopLogFolder"]();
      return false;
    }
        
    Log["AppendFolder"]("Assay Setup :: Verify Index Decimal Is Editable");
    
    //Get Index Decimal control
    var indexDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxImTestCalIndexDecimal");
    
    //check Index Decimal control exist and enabled
    if(VerifyObjectEnabled(indexDecimalCtrl))
    {
      Log["Message"]("Index Decimal is editable");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Index Decimal is not editable");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyDecimalPlaceIsNotEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Concentration Decimal Is Not Editable");
    
    //Get concentrationDecimal  control
    var readonlyConcentrationDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","readOnlyImTestConcentrationDecimal");
    
    //check concentrationDecimal  control exists enabled
    if(VerifyObjectExists(readonlyConcentrationDecimalCtrl))
    {
      Log["Message"]("Concentration Decimal is not editable");
      Log["PopLogFolder"]();
    }
    else
    {
      Log["Error"]("Concentration decimal is editable");
      Log["PopLogFolder"]();
      return false;
    }
        
    Log["AppendFolder"]("Assay Setup :: Verify Index Decimal Is not Editable");
    
    //Get Index Decimal control
    var readonlyIndexDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","readOnlyImTestCalIndexDecimal");
    
    //check Index Decimal control exists and enabled
    if(VerifyObjectExists(readonlyIndexDecimalCtrl))
    {
      Log["Message"]("Index Decimal is not editable");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Index Decimal is editable");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyDecimalPlaceIsModified(concentrationDecimal,incdexDecimal)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify DecimalPlaces are Modified")
    
    var isModified = 0;
    
      Log["AppendFolder"]("Verify Concentration Decimal Place Modified");
      
      //Get current Concentration decimal value
      var curConcentrationDecimal = GetConcentrationDecimal()
    
      //check curConcentrationDecimal is fetched
      if(curConcentrationDecimal=="")
      {
        Log["Error"]("Failed to get the Concentration Decimal");
        Log["PopLogFolder"]();
        return false;
      }
    
      //check concentrationDecimal is having expected value
      if(concentrationDecimal == curConcentrationDecimal)
      {
        Log["Message"]("Concentration Decimal is already set to"+concentrationDecimal+"");
        isModified = isModified+1;
      }
      else
      {
        //set COncentration decimal
        if(!SetConcentrationDecimal(concentrationDecimal))
        {
          Log["Error"]("Failed to set Concentration decimal");
          Log["PopLogFolder"]();
          return false;
        }
        else
        {
          isModified = isModified+1;
          Log["Message"]("Concentration decimal is set successfully as '"+concentrationDecimal+"'")
          Log["PopLogFolder"]();
        }
      }
            
      Log["AppendFolder"]("Assay Setup :: Verify Index Decimal Place Modified");
      
      //Get current index decimal value
      var curIndexDecimal=GetIndexDecimal()
    
      //check index decimal is fetched
      if(curIndexDecimal=="")
      {
        Log["Error"]("Failed to get the Index Decimal");
        Log["PopLogFolder"]();
        return false;
      }
    
      //check index decimal is already having expected value
      if(incdexDecimal == curIndexDecimal)
      {
        Log["Message"]("Index Decimal is already set to"+incdexDecimal+"");
        isModified = isModified+1;
      }
      else
      {
        if(!SetIndexDecimal(incdexDecimal))
        {
          Log["Error"]("Failed to set Index decimal");
          Log["PopLogFolder"]();
          return false;
        }
        else
        {
          isModified = isModified+1;
          Log["Message"]("Index Decimal is set successfully as '"+incdexDecimal+"'")
          Log["PopLogFolder"]();
        }
      }
    
    //check decimal places are set  
    if(isModified == 2)
    {
      Log["Message"]("Decimal Places can be modified")
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Decimal Places cannot be modified")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetConcentrationDecimal()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get Concentration Decimal Value");
    
    //Get Concentration decimal
    var concentrationDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxImTestCalcConcentrationDecimal");
    
    //CHeck Concentration decimal exists and enabled
    if(VerifyObjectEnabled(concentrationDecimalCtrl))
    {
      Log["Message"]("Located the concentration decimal control");
      //Get concentration decimal
      var concentrationDecimalItemCtrl = Getchild(concentrationDecimalCtrl,"ClassName","ComboBoxItem")
      var concentrationDecimalValue= GetNativeObjectName(concentrationDecimalItemCtrl) ;
      Log["Message"]("Current Concentration Decimal is : '"+concentrationDecimalValue+"'");
      Log["PopLogFolder"]();
      return concentrationDecimalValue;
    }
    else
    {
      Log["Error"]("Failed to locate concentration decimal");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetIndexDecimal()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get Index Decimal Value");
    
    //Get indexDecimal Ctrl 
    var indexDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxImTestCalIndexDecimal");
    
    //check indexDecimal Ctrl  exsist and enabled
    if(VerifyObjectEnabled(indexDecimalCtrl))
    {
      Log["Message"]("Located the concentration decimal control");
      //Get indexDecimal item ctrl
      var indexDecimalItemCtrl = Getchild(indexDecimalCtrl,"ClassName","ComboBoxItem")
      var indexDecimalValue= GetNativeObjectName(indexDecimalItemCtrl) ;
      Log["Message"]("Current Index Decimal is : '"+indexDecimalValue+"'");
      Log["PopLogFolder"]();
      return indexDecimalValue;
    }
    else
    {
      Log["Error"]("Failed to locate Index decimal");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetConcentrationDecimal(concentrationDecimal)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Concentration Decimal as "+concentrationDecimal+"");
    
    //Get Concentration decimal
    var concentrationDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxImTestCalcConcentrationDecimal");
    
    //check Concentration decimal exists and enabled
    if(VerifyObjectEnabled(concentrationDecimalCtrl))
    {
      Log["Message"]("Located the concentration decimal control");
      //Set concentration decimal
      SelectComboBoxItem(concentrationDecimalCtrl,concentrationDecimal);
      Log["Message"]("Concentration Decimal is set as '"+concentrationDecimal+"'");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Failed to locate concentration decimal");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetIndexDecimal(indexDecimal)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Index Decimal as "+indexDecimal+"");
    
    //Get Concentration decimal
    var indexDecimalCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxImTestCalIndexDecimal");
    
    //check Concentration decimal exists and enabled
    if(VerifyObjectEnabled(indexDecimalCtrl))
    {
      Log["Message"]("Located the concentration decimal control");
      //set Index decimal
      SelectComboBoxItem(indexDecimalCtrl,indexDecimal);
      Log["Message"]("Index Decimal is set as '"+indexDecimal+"'");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Failed to locate concentration decimal");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function SetDisplayedResultType(displayResultType)
{
  try
  {
  Log["AppendFolder"]("Assay Setup :: Set Displayed Result Type as '"+displayResultType+"'");
  
  //get current displayed result type
  var currentDisplayedResultType = GetDisplayedResultType();
  
  if(currentDisplayedResultType =="" || currentDisplayedResultType ==false)
  {
    Log["Error"]("Failed to get displayed resulttype");
    Log["PopLogFolder"]();
    return false;
  }
  
  if(currentDisplayedResultType != displayResultType)
  {
    //set display result type
    if(!ModifyDisplayedResultType(displayResultType))
    {
      Log["Error"]("Modify Display Result Type");
      Log["PopLogFolder"]();
    }
  
    //Click Save button
    if(!ClickSaveButtonInTDefScreen())
    {
      Log["Error"]("Failed to Click save button")
      Log["PopLogFolder"]();
      return false;
    }
    
    aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
    //Verify success popup
    if(!VerifyTDefSuccessSavePopup())
    {
      Log["Error"]("Success Save popup verification failed")
      Log["PopLogFolder"]();
      return false;
    }
  }
  else
  {
    Log["Message"]("Displayed Result Type is already set to '"+displayResultType+"'")
  }
     
  //Exit TDef
  if(!FinishAndExitAssaySetup())
  {
    Log["Error"]("Failed to Exit from TDef screen")
    Log["PopLogFolder"]();
    return false;
  }    
  Log["PopLogFolder"]();
  return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ModifyDisplayedResultType(displayResultType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Display Result Type as '"+displayResultType+"'");
    
    //Get display result type 
    var displayResultTypeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxDisplayedResultType");
    
    //check display result type  exists
    if(VerifyObjectEnabled(displayResultTypeCtrl))
    {
      //select display result trype
      SelectComboBoxItem(displayResultTypeCtrl,displayResultType);
      Log["Message"]("Display ResultType is set as '"+displayResultType+"'")
    }
    else
    {
      Log["Error"]("Failed to locate Disply Result type");
    }
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetDisplayedResultType()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get Current Displayed ResultType");
    
    //Get displayed result type 
    var displayedResultTypeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxDisplayedResultType");
    
    //check displaed result type exists
    if(VerifyObjectExists(displayedResultTypeCtrl))
    {
      Log["Message"]("Located Displayed Result Type Control");
      
      //Get displayed resulttype combobox item control
      var displayedResultTypeItemCtrl=Getchild(displayedResultTypeCtrl,"ClassName","ComboBoxItem")
      
      //Get the current displayed ResultType value
      var displayedResultTypeValue= GetNativeObjectName(displayedResultTypeItemCtrl) ;
      
      Log["Message"]("Current Displayed ResultType is : '"+displayedResultTypeValue+"'");
      Log["PopLogFolder"]();
      return displayedResultTypeValue;
    }
    else
    {
      Log["Error"]("Failed to locate Displayed Result Type control");
      Log["PopLogFolder"]();
      return false;
    }

  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyDisplayResultTypeIsEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Display Result Type Is Editable");
    
    //get Display Result Type Control
    var displayResultTYpeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxDisplayedResultType");
    
    //Check Display Result Type Control exists
    if(VerifyObjectExists(displayResultTYpeCtrl))
    {
      //verify Display Result Type Control is enabled
      if(VerifyObjectEnabled(displayResultTYpeCtrl))
      {
        Log["Message"]("Display Result Type Is Editable");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Failed to verify Display Result Type as Editable") 
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Display Result Type as Editable");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyDisplayResultTypeIsNotEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Display Result Type Is Not Editable");
    
    //get Display Result Type Control
    var displayResultTYpeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxDisplayedResultType");
    
    //check Display Result Type exists
    if(VerifyObjectExists(displayResultTYpeCtrl))
    {
      
      //verify Display Result Type not enabled
      if(!VerifyObjectEnabled(displayResultTYpeCtrl))
      {
        Log["Message"]("Display Result Type Is Not Editable");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Failed to verify Display Result Type as Not Editable") 
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Display Result Type as Not Editable");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetResultType(resultType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Display Result Type");
  
    //get current result type
    var currentResulType = GetResultType();
  
    //check result type is fetched
    if(currentResulType=="" || currentResulType==false)
    {
      Log["Error"]("Failed to get result type value");
      Log["PopLogFolder"]();
      return false;
    }
  
    //check result type is already having expected value
    if(resultType != currentResulType)
    {
      //set result type
      if(!ModifyResultType(resultType))
      {
        Log["Error"]("Failed to Modify Result Type");
        Log["PopLogFolder"]();
        return false;
      }
    
      //Click Save button
      if(!ClickSaveButtonInTDefScreen())
      {
        Log["Error"]("Failed to Click save button")
        Log["PopLogFolder"]();
        return false;
      }
    
      aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
      //Verify success popup
      if(!VerifyTDefSuccessSavePopup())
      {
        Log["Error"]("Failed to verify success popup")
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Message"]("Result Type is already set to '"+resultType+"'")
    }
  
    //Exit TDef
    if(!FinishAndExitAssaySetup())
    {
      Log["Error"]("Failed to Exit from TDef screen")
      Log["PopLogFolder"]();
      return false;
    }    
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetResultType()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get Current ResultType");
    
    //Get result type 
    var resultTypeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxResultType");
    
    //check result type exists
    if(VerifyObjectExists(resultTypeCtrl))
    {
      Log["Message"]("Located Result Type Control");
      
      //Get resulttype combobox item control
      var resultTypeItemCtrl=Getchild(resultTypeCtrl,"ClassName","ComboBoxItem")
      
      //Get the current ResultType value
      var resultTypeValue= GetNativeObjectName(resultTypeItemCtrl) ;
      
      Log["Message"]("Current ResultType is : '"+resultTypeValue+"'");
      Log["PopLogFolder"]();
      return resultTypeValue;
    }
    else
    {
      Log["Error"]("Failed to locate Result Type control");
      Log["PopLogFolder"]();
      return false;
    }

  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function ModifyResultType(resultType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Result Type as '"+resultType+"'")
    
    //Get result type 
    var resultTypeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxResultType");
    
    //check result type exists
    if(VerifyObjectEnabled(resultTypeCtrl))
    {
      //select result type
      SelectComboBoxItem(resultTypeCtrl,resultType);
      Log["Message"]("ResultType is set as '"+resultType+"'")
    }
    else
    {
      Log["Error"]("Failed to locate Result type");
      Log["PopLogFolder"]();
      return false;
    }
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyResultTypeIsEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Result Type Is Editable");
    
    //get Result Type Control
    var resultTYpeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","comboBoxResultType");
    
    //check Result Type Control exists
    if(VerifyObjectExists(resultTYpeCtrl))
    {
      //check Result Type Control is enabled
      if(VerifyObjectEnabled(resultTYpeCtrl))
      {
        Log["Message"]("Result Type Is Editable");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Failed to verify Result Type as Editable") 
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Result Type as Editable");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyResultTypeIsNotEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Result Type Is Not Editable");
    
    //get readonly Result Type Control
    var resultTypeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","ReadOnlyResultType");
    
    //check readonly Result Type exists
    if(VerifyObjectExists(resultTypeCtrl))
    {
      Log["Message"]("Result Type Is Not Editable");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Message"]("Result Type Is Editable");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyResultTypeValue(expectedResultType)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify the Result Type Value");
    
    //Get readonly result type
    var resultTypeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","ReadOnlyResultType");
    
    //Get value control inside result type
    resultTypeCtrl = Getchild(resultTypeCtrl,"AutomationId","lblValue")
    
    //check result type ctrl exists
    if(VerifyObjectExists(resultTypeCtrl))
    {
      //Get result type value
      var resultType = resultTypeCtrl["Text"]
      
      //check result type displayed is displayed
      if(resultType == "")
      {
        Log["Error"]("Failed to get the Result Type displayed")
        Log["PopLogFolder"]();
        return false;
      }
      
      //verify reult type have value expected
      if(resultType == expectedResultType)
      {
        Log["Message"]("Expected Result Type : '"+expectedResultType+"'"); 
        Log["Message"]("Actual Result Type : '"+resultType+"'"); 
        Log["Checkpoint"]("Result Type is verified");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Expected Result Type : '"+expectedResultType+"'"); 
        Log["Error"]("Actual Result Type : '"+resultType+"'"); 
        Log["Error"]("Result Type is not verified");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Result type control")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function VerifyConversionFactorIsEditable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Conversion Factor Is Editable");
    
    //Get conversion factor
    var conversionFactorCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtIMConversionFactor");
    
    //check conversion factor exists
    if(VerifyObjectExists(conversionFactorCtrl))
    {
      Log["Message"]("Conversion Factor Control located");
      
      //verify conversion factor is enabled
      if(VerifyObjectEnabled(conversionFactorCtrl))
      {
        Log["Message"]("Conversion Factor is editable");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Conversion Factor is not editable");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to locate Conversion factor control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyUnRefrigeratedOBSHrsAvailable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify  UnRegrigerated OBS Hrs");
    
    //Get UnRegrigerated OBS Hrs ctrl
    var txtUnRefrigeratedOBSHrs = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtUnRefrigeratedOBSHrs");
    
    //Check UnRegrigerated OBS Hrs Crl exists
    if(VerifyObjectExists(txtUnRefrigeratedOBSHrs))
    {
      //Check UnRegrigerated OBS Hrs is diaplayed
      if(txtUnRefrigeratedOBSHrs["Text"] != "")
      {
        Log["Message"]("UnRefrigerated OBS Hrs Value Displayed :'"+txtUnRefrigeratedOBSHrs["Text"]+"'")
        Log["PopLogFolder"]();
        return true ;  
      }
      else
      {
        Log["Error"]("UnRefrigerated OBS Hrs is not verified");
        Log["PopLogFolder"]();
        return false ;
      }
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyRefrigeratedOBSHrsAvailable()
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify Regrigerated OBS Hrs");
    
    //Get Regrigerated OBS Hrs
    var txtRefrigeratedOBSHrs = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtRefrigeratedOBSHrs");
    
    //check Regrigerated OBS Hrs exists
    if(VerifyObjectExists(txtRefrigeratedOBSHrs))
    {
      //check Regrigerated OBS Hrs isdisplayed 
      if(txtRefrigeratedOBSHrs["Text"] != "")
      {
        Log["Message"]("Refrigerated OBS Hrs Value Displayed :'"+txtRefrigeratedOBSHrs["Text"]+"'")
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Refrigerated OBS Hrs is not verified");
        Log["PopLogFolder"]();
        return false
      }
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function SetPackCalIntervalWithinInternalTimeframe(PackCalInterval)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Set Pack Cal Interval Within Internal TimeFrame");
    
    //Get Cal interval ctrl
    var txtPackCalIntervalDays = GetAutomationIDControl("HowDoI_AssaySetup_Calculation","txtPackCalIntervalDays");
    
    var isModified = false;
    
    //check CalInterval exists
    if(VerifyObjectExists(txtPackCalIntervalDays))
    {
      Log["Message"]("Located the Pack Cal Interval Days field");
      
      //check Cal interval < 999  - internal time frame is 0-999
      if(txtPackCalIntervalDays["Text"] < 999)
      {
        Log["Message"]("Pack Cal Interval is already within Internal timeframe");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        //Set pack Cal interval value
        SetValue(txtPackCalIntervalDays,PackCalInterval);
        
        //Click Save button
        if(!ClickSaveButtonInTDefScreen())
        {
          Log["Error"]("Failed to Click save button")
          Log["PopLogFolder"]();
          return false;
        }
    
        aqUtils["Delay"](2000, "Wait for the Sucess save popup");
      
        //Verify success popup
        if(!VerifyTDefSuccessSavePopup())
        {
          Log["Error"]("Success Save popup verification failed")
          Log["PopLogFolder"]();
          return false;
        }
      }
    }
    else
    {
      Log["Error"]("Failed to locate the Pack Cal Interval Days");
      Log["PopLogFolder"]();
      return false;
    }
    
    Log["PopLogFolder"]();
    return true;
    
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function GetCalibrationControlLockStatus(calibrationLockCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get '"+calibrationLockCtrlName+"' Control Lock Status");
    
    var LockControl = GetCalibrationLockControl(calibrationLockCtrlName);
    
    if(VerifyObjectExists(LockControl))
    {
      //Get lock status
      var lockStatus = GetToggleState(LockControl);
      
      //check cechkbox is checked
      if(lockStatus == 1)
      {
        Log["Message"]("'"+calibrationLockCtrlName+"' control is in  locked state");
        lockStatus = "Locked";
        Log["PopLogFolder"]();
      }
      else
      {
        Log["Message"]("'"+calibrationLockCtrlName+"' control is in not locked state");
        lockStatus = "UnLocked";
        Log["PopLogFolder"]();
      }
      return lockStatus;
    }
    else
    {
      Log["Error"]("Failed to locate the lock control '"+calibrationLockCtrlName+"'");
      Log["PopLogFolder"]();
      return false ;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetCalibrationCheckboxStatus(calibrationCheckBoxCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get "+calibrationCheckBoxCtrlName+"' Checkbox Control Status");
    
    var CheckBoxControl = GetCalibrationCheckBoxControl(calibrationCheckBoxCtrlName);
    
    if(VerifyObjectExists(CheckBoxControl))
    {
      //Get CheckBox status
      var CheckBoxStatus = GetToggleState(CheckBoxControl);
      
      //check checkbox is checked
      if(CheckBoxStatus == 1)
      {
        Log["Message"]("'"+calibrationCheckBoxCtrlName+"' Checkbox control is in Checked state");
        CheckBoxStatus = "Checked"
        Log["PopLogFolder"]();
      }
      else
      {
        Log["Message"]("'"+calibrationCheckBoxCtrlName+"' Checkbox control is in not Checked state");
        CheckBoxStatus = "UnChecked"
        Log["PopLogFolder"]();
      }
      return CheckBoxStatus;
    }
    else
    {
      Log["Error"]("Failed to locate the CheckBox control '"+calibrationCheckBoxCtrlName+"'");
      Log["PopLogFolder"]();
      return false ;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetCalibrationLockControl(calibrationLockCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get the '"+calibrationLockCtrlName+"' Lock Control");
    
    var calibrationLockCtrl
    
    //Get Calibration screen Lock control using Lock control name
    switch (calibrationLockCtrlName)
    {
      case "LotCalibrationInterval":
              calibrationLockCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","LotCalibrationIntervalLock");
              break;
      case "ExtendCalibration":
              calibrationLockCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","ExtendCalibrationLock");
              break;
      case "AutoExcludeCalReplicate":
              calibrationLockCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","AutoExcludeCalReplicateLock");
              break;
    } 
    
    //check Lock control exists in UI
    if(VerifyObjectExists(calibrationLockCtrl))  
    {
      Log["Message"]("Located the '"+calibrationLockCtrlName+"' lock control");
      Log["PopLogFolder"]();
      return calibrationLockCtrl;
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationLockCtrlName+"' lock control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function GetCalibrationTextBoxControl(calibrationTextBoxCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Get the '"+calibrationTextBoxCtrlName+"' TextBox Control");
    
    var calibrationTextBoxCtrl;
    
    //Get Calibration screen textboxes using textbox name
    switch (calibrationTextBoxCtrlName)
    {
      case "RefrigeratedOBSHrs":
              calibrationTextBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtRefrigeratedOBSHrs");
              break;
      case "UnRefrigeratedOBSHrs":
              calibrationTextBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtUnRefrigeratedOBSHrs");
              break;
      case "LotCalibrationInterval":
              calibrationTextBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtCalibrationLotIntervalDays")
              break;
      case "PackCalInterval":
              calibrationTextBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtPackCalIntervalDays");
              break;
    } 
    
    //check Calibration screen textbox exists in UI
    if(VerifyObjectExists(calibrationTextBoxCtrl))  
    {
      Log["Message"]("Located the '"+calibrationTextBoxCtrlName+"' TextBox control");
      Log["PopLogFolder"]();
      return calibrationTextBoxCtrl;
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationTextBoxCtrlName+"' TextBox control");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function LockCalibrationControl(calibrationLockCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Lock "+calibrationLockCtrlName+"' Control");
    
    //Get the Calibration screen lock control
    var LockControl = GetCalibrationLockControl(calibrationLockCtrlName);
    
    //check Calibration screen lock control exists
    if(VerifyObjectExists(LockControl))
    {
      //check Calibration screen lock control is enabled
      if(VerifyObjectEnabled(LockControl))
      {
        //Click the Ctrl to Lock
        ClickCtrl(LockControl);
        
        //Verify Ctrl Lock status 0-Unlocked ,1-Locked
        if(GetToggleState(LockControl)== 1)
        {
          Log["Message"]("Successfully locked '"+calibrationLockCtrlName+"' control");
        }
        else
        {
          Log["Error"]("Failed to lock "+calibrationLockCtrlName+" control");
          Log["PopLogFolder"]();
          return false;
        }
        
        //Click Save button
        if(!ClickSaveButtonInTDefScreen())
        {
          Log["Error"]("Failed to Click save button")
          Log["PopLogFolder"]();
          return false;
        }
    
        aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
        //Verify success popup
        if(!VerifyTDefSuccessSavePopup())
        {
          Log["Error"]("TDef Success save popup verification failed")
          Log["PopLogFolder"]();
          return false;
        }
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Lock control for '"+calibrationLockCtrlName+"' is in disabled state");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationLockCtrlName+"' lock control")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function UnLockCalibrationControl(calibrationLockCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Unlock "+calibrationLockCtrlName+"' Control");
    
    //Get Calibration screen Lock control
    var LockControl = GetCalibrationLockControl(calibrationLockCtrlName);
    
    //check Lock control exists in UI
    if(VerifyObjectExists(LockControl))
    {
      //Verify Ctrl Lock status 0-Unlocked ,1-Locked
      if(GetToggleState(LockControl)== 0)
      {
        Log["Message"]("'"+calibrationLockCtrlName+"' control is already in Unlocked state");
        Log["PopLogFolder"]();
        return true;
      }
      if(VerifyObjectEnabled(LockControl))
      {
        //Click the Ctrl to UnLock
        ClickCtrl(LockControl);
           
        
        //Verify Ctrl Lock status 0-Unlocked ,1-Locked
        if(GetToggleState(LockControl)== 0)
        {
          Log["Message"]("Successfully UnLocked '"+calibrationLockCtrlName+"' control");
        }
        else
        {
          Log["Error"]("Failed to unlock "+calibrationLockCtrlName+" control");
          Log["PopLogFolder"]();
          return false;
        }
        //Click Save button
        if(!ClickSaveButtonInTDefScreen())
        {
          Log["Error"]("Failed to Click save button")
          Log["PopLogFolder"]();
          return false;
        }
    
        aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
        //Verify success popup
        if(!VerifyTDefSuccessSavePopup())
        {
          Log["Error"]("TDef Success save popup verification failed");
          Log["PopLogFolder"]();
          return false;
        }
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("Lock control for '"+calibrationLockCtrlName+"' is in disabled state");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationLockCtrlName+"' lock control")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function TurnOnCalibrationCheckboxControl(calibrationCheckBoxCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Turn On "+calibrationCheckBoxCtrlName+"' checkbox Control");
    
    //For auto exclude and extend cal check boxes ,lock is present.To modify checkbox we need to unlock the control
    if(calibrationCheckBoxCtrlName =="ExtendCalibration" || calibrationCheckBoxCtrlName == "AutoExcludeCalReplicate")
    {
      //Get lock control
      var LockControl = GetCalibrationLockControl(calibrationCheckBoxCtrlName) ;
      
      //check control is locked
      if(GetToggleState(LockControl) == 1)
      {
        //click to unlock the control
        ClickCtrl(LockControl)
        Log["Message"]("Unlocked the checkbox "+calibrationCheckBoxCtrlName+"")
      }
    }
    
    //Get calibration screen checkbox control
    var CheckBoxControl = GetCalibrationCheckBoxControl(calibrationCheckBoxCtrlName);
    
    //check checkbox control exists in UI
    if(VerifyObjectExists(CheckBoxControl))
    {
      //check checkbox control is in enabled state
      if(VerifyObjectEnabled(CheckBoxControl))
      {
        //Click the Ctrl to Turn On Checkbox
        ClickCtrl(CheckBoxControl);
        
        //Verify checkBox status is modified 0-UnChecked ,1-Checked
        if(GetToggleState(CheckBoxControl)== 1)
        {
          Log["Message"]("Successfully Turned On '"+calibrationCheckBoxCtrlName+"' checkbox control");
        }
        else
        {
          Log["Error"]("Failed to Turn On "+calibrationCheckBoxCtrlName+" checkbox control");
          Log["PopLogFolder"]();
          return false;
        }
        
        //Click Save button
        if(!ClickSaveButtonInTDefScreen())
        {
          Log["Error"]("Failed to Click save button")
          Log["PopLogFolder"]();
          return false;
        }
    
        aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
        //Verify success popup
        if(!VerifyTDefSuccessSavePopup())
        {
          Log["Error"]("TDef Success save popup verification failed");
          Log["PopLogFolder"]();
          return false;
        }
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("'"+calibrationCheckBoxCtrlName+"' Checkbox is in disabled state");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationCheckBoxCtrlName+"' Checkbox control")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function TurnOffCalibrationCheckboxControl(calibrationCheckBoxCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Turn Off "+calibrationCheckBoxCtrlName+"' checkbox Control");
    
    //For auto exclude and extend cal check boxes ,lock is present.To modify checkbox we need to unlock the control
    if(calibrationCheckBoxCtrlName =="ExtendCalibration" || calibrationCheckBoxCtrlName == "AutoExcludeCalReplicate")
    {
      //Get lock control
      var LockControl = GetCalibrationLockControl(calibrationCheckBoxCtrlName) ;
      
      //check control is locked
      if(GetToggleState(LockControl) == 1)
      {
        //click to unlock the control
        ClickCtrl(LockControl)
        Log["Message"]("Unlocked the checkbox "+calibrationCheckBoxCtrlName+"")
      }
    }
    
    //Get calibration screen checkbox control
    var CheckBoxControl = GetCalibrationCheckBoxControl(calibrationCheckBoxCtrlName);
    
    //check checkbox control exists in UI
    if(VerifyObjectExists(CheckBoxControl))
    {
      //check checkbox control is in enabled state
      if(VerifyObjectEnabled(CheckBoxControl))
      {
        //Click the Ctrl to Turn Off Checkbox
        ClickCtrl(CheckBoxControl);
        
        //Verify checkBox status is modified 0-UnChecked ,1-Checked
        if(GetToggleState(CheckBoxControl)== 0)
        {
          Log["Message"]("Successfully Turned Off '"+calibrationCheckBoxCtrlName+"' checkbox control");
        }
        else
        {
          Log["Error"]("Failed to Turn Off "+calibrationCheckBoxCtrlName+" checkbox control");
          Log["PopLogFolder"]();
          return false;
        }
        //Click Save button
        if(!ClickSaveButtonInTDefScreen())
        {
          Log["Error"]("Failed to Click save button")
          Log["PopLogFolder"]();
          return false;
        }
    
        aqUtils["Delay"](2000, "Wait for the Sucess save popup");
    
        //Verify success popup
        if(!VerifyTDefSuccessSavePopup())
        {
          Log["Error"]("TDef Success save popup verification failed")
          Log["PopLogFolder"]();
          return false;
        }
        Log["PopLogFolder"]();
        return true;
        
      }
      else
      {
        Log["Error"]("'"+calibrationCheckBoxCtrlName+"' Checkbox is in disabled state");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationCheckBoxCtrlName+"' Checkbox control")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


function VerifyCalibrationCheckBoxIsEditable(calibrationCheckBoxCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify "+calibrationCheckBoxCtrlName+" Checkbox Is Editable");
    
    //Get callibration screen checkbox control
    var CheckBoxControl = GetCalibrationCheckBoxControl(calibrationCheckBoxCtrlName);
      
    //check checkbox control exsist in UI  
    if(VerifyObjectExists(CheckBoxControl))
    {
      Log["Message"]("Located the '"+calibrationCheckBoxCtrlName+"' Checkbox");
      
      //check checkbox control is in enabled state
      if(VerifyObjectEnabled(CheckBoxControl))
      {
        Log["Message"]("'"+calibrationCheckBoxCtrlName+"' Checkbox is in enabled state");
        
        //Get checkbox state before modification
        var CheckBoxStatusBeforeModification = GetToggleState(CheckBoxControl);
        
        if(CheckBoxStatusBeforeModification==0)
        {
          Log["Message"](""+calibrationCheckBoxCtrlName+" checkbox is in Unchecked state");
        }
        else
        {
          Log["Message"](""+calibrationCheckBoxCtrlName+" checkbox is in checked state");
        }
        
        //Click the Ctrl to Change Checkbox state
        ClickCtrl(CheckBoxControl);
        
        Log["Message"]("Clicked "+calibrationCheckBoxCtrlName+" checkbox control")
        
        //Get checkbox state after modification
        var CheckBoxStatusAfterModification = GetToggleState(CheckBoxControl);
        
        if(CheckBoxStatusAfterModification==0)
        {
          Log["Message"](""+calibrationCheckBoxCtrlName+" checkbox is in Unchecked state");
        }
        else
        {
          Log["Message"](""+calibrationCheckBoxCtrlName+" checkbox is in checked state");
        }
        
        //Verify checkBox state is modified
        if(CheckBoxStatusAfterModification != CheckBoxStatusBeforeModification)
        {
          Log["Message"]("'"+calibrationCheckBoxCtrlName+"' option is editable");
          Log["PopLogFolder"]();
          return true;
        }
        else
        {
          Log["Error"]("'"+calibrationCheckBoxCtrlName+"' option is not editable");
          Log["PopLogFolder"]();
          return false;
        }
      }
      else
      {
        Log["Error"]("'"+calibrationCheckBoxCtrlName+"' Checkbox is in disabled state");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationCheckBoxCtrlName+"' Checkbox control")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationCheckBoxIsNotEditable(calibrationCheckBoxCtrlName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify "+calibrationCheckBoxCtrlName+" Checkbox Is Not Editable");
    
    //Get Calibration tab checkbox control
    var CheckBoxControl = GetCalibrationCheckBoxControl(calibrationCheckBoxCtrlName);
        
    //check checkbox control exixts in UI
    if(VerifyObjectExists(CheckBoxControl))
    {
      Log["Message"]("Located the '"+calibrationCheckBoxCtrlName+"' Checkbox");
      
      //Check checkbox control is in enabled state
      if(!VerifyObjectEnabled(CheckBoxControl))
      {
        Log["Message"]("Verified that '"+calibrationCheckBoxCtrlName+"' checkbox is not editable");
        Log["PopLogFolder"]();
        return true;
      }
      else
      {
        Log["Error"]("'"+calibrationCheckBoxCtrlName+"' Checkbox is editable");
        Log["PopLogFolder"]();
        return false;
      }
    }
    else
    {
      Log["Error"]("Failed to Locate the '"+calibrationCheckBoxCtrlName+"' Checkbox control")
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationFeildCanBeDecreased(CalibrationTextBoxfeildName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify '"+CalibrationTextBoxfeildName+"' Value Can Be Decreased");
    
    //Get Calibration Textbox control
    var txtCalibrationFeild = GetCalibrationTextBoxControl(CalibrationTextBoxfeildName);
    
    //Check Calibration Textbox control exists in UI
    if(VerifyObjectExists(txtCalibrationFeild))
    {
      Log["Message"]("Located the '"+CalibrationTextBoxfeildName+"' Textbox");
      
      //Get current value in textbox
      var curValue = txtCalibrationFeild["Text"];
      
      Log["Message"]("Current '"+CalibrationTextBoxfeildName+"' value : '"+curValue+"'")
      
      //enter the lesser value in textbox
      SetValue(txtCalibrationFeild,curValue-1)
      
      //check textbox value is modified
      if(txtCalibrationFeild["Text"] == curValue-1)
      {
        Log["Message"]("Verified that '"+CalibrationTextBoxfeildName+"' can be decremented")
        Log["PopLogFolder"]();
        return true ;
      }
      else
      {
        Log["Error"]("Failed to Verify that '"+CalibrationTextBoxfeildName+"' cannot be decremented");
        Log["PopLogFolder"]();
        return false;
      }
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyCalibrationFeildCannotBeIncreased(CalibrationTextBoxfeildName)
{
  try
  {
    Log["AppendFolder"]("Assay Setup :: Verify '"+CalibrationTextBoxfeildName+"' Value Cannot Be Increased");
    
    //Get Calibration Textbox control
    var txtCalibrationFeild = GetCalibrationTextBoxControl(CalibrationTextBoxfeildName);
    
    //check Calibration Textbox control exists in UI
    if(VerifyObjectExists(txtCalibrationFeild))
    {
      Log["Message"]("Located the '"+CalibrationTextBoxfeildName+"' Textbox");
      
      //Get current value in the textbox
      var curValue = txtCalibrationFeild["Text"];
      
      Log["Message"]("Current '"+CalibrationTextBoxfeildName+"' value : '"+curValue+"'")
      
      //enter the greater value in textbox
      SetValue(txtCalibrationFeild,curValue+1)
      
      //check textbox value is modified
      if(txtCalibrationFeild["Text"] != curValue+1)
      {
        Log["Message"]("Verified that '"+CalibrationTextBoxfeildName+"' cannot be Incremented")
        Log["PopLogFolder"]();
        return true ;
      }
      else
      {
        Log["Error"]("Failed to Verify that '"+CalibrationTextBoxfeildName+"' cannot be Incremented");
        Log["PopLogFolder"]();
        return false;
      }
    }
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyLotCalibrationIntervalCannotBeModified()
{
  try
  {
    Log["AppendFolder"]("Assay Setup ::Verify Calibration Lot Interval Cannot Be Modified");
    
    //Get Calibration Lot Interval text control
    var txtCalLotInterval = GetAutomationIDControl("HowDoI_AssaySetup_Calibration","txtCalibrationLotIntervalDays")
    
    //check textbox is enabled
    if(VerifyObjectEnabled(txtCalLotInterval))
    {
      Log["Error"]("Calibration Lot Interval Is Editable");
      Log["PopLogFolder"]();
      return false;
    }
    else
    {
      Log["Message"]("Calibration Lot Interval is in disabled state.");
      Log["PopLogFolder"]();
      return true;
    }
    
    Log["PopLogFolder"]();
    return true;
  }
  catch (exp)
  {
    Log["Error"]("Exception : " + exp["Description"]);
    Log["PopLogFolder"]();
    return false;
  }
}


//****************************************Tdef Reagent Parameters****************************************

//***************************************************************************************
//*   Function Name        : isPrimaryReagentsGridDisplayed()
//*   Function Description : This function is used to verify primary reagent grid is displayed
//*   Input                : None 
//*   Output               : return true, if the grid is displayed
//*                          return false, if the grid is not displayed
//*   Created By           : Suresh Kumar
//*   Created Date         :  -
//*   Modified By          : Suresh Kumar
//*****************************************************************************************
function isPrimaryReagentsGridDisplayed()
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Grid displayed");
    
    //Get control of primary reagents grid
    var primaryReagentsGridCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","groupPrimaryReagent");
    
    //Verify reagent grid exist
    if(VerifyObjectExists(primaryReagentsGridCtrl))
    {
        Log["Message"]("Primary reagents grid exist");
        Log["PopLogFolder"]();
        return true;
    }
    else
    {
      Log["Error"]("Primary reagents grid not displayed/exist");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : VerifyAncillaryDiluentReagentNotDisplayedInTdef()
//*   Function Description : This function is used to verify the given reagent
//                           is not displayed in AncDiluent grid
//*   Input                : reagent type (Ancillary/Diluent) 
//*   Output               : return true, if the given reagent type is not displayed
//*                          return false, if given reagent type is displayed
//*   Created By           : Suresh Kumar
//*   Created Date         :  -
//*   Modified By          : Suresh Kumar
//*****************************************************************************************
function VerifyAncillaryDiluentReagentNotDisplayedInTdef(reagentType)
{
 try
 { 
   Log["AppendFolder"]("Tdef - Reagents :: Verify '"+reagentType+"' reagent is not displayed");
   
   //Get Ancilarray and Diluent data grid control
   var ancDilGridCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","gridAncillaryDiluent");
    
   if(VerifyObjectExists(ancDilGridCtrl))
   {
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(ancDilGridCtrl);
    
      //Verify the grid had data
      if(!rowDetails)
      {
        Log["Error"]("Ancillary & Diluent reagent grid is empty");
        Log["PopLogFolder"]();
        return false;
      }

       //Get all control of Reagent type combo box
       var regentTypeCtrls = GetAllChildren(ancDilGridCtrl,"AutomationId","ComboAncillaryReagentStrType");
       
       var hasNoReagent = false;
       
       //Verify till all the rows
       for(var i=0;i<regentTypeCtrls.length;i++)
       {
          //Get displayed reagent ype control
          var displayedReagentTypeCtrl = Getchild(regentTypeCtrls[i],"ClassName","TextBlock");
          
          var displayedReagentType = GetNativeObjectName(displayedReagentTypeCtrl);
        
          //Verify if displayed reagent type is equal to desired reagent type
          if(aqString["Find"](displayedReagentType,reagentType) != -1)
          {
             Log["Error"]("Reagent type '"+reagentType+"' is displayed in Tdef - Reagents");
             Log["PopLogFolder"]();
             return false;
          }
          else
          {
            hasNoReagent = true;
          }
       }
       
       //If the reagent type is not found
       if(hasNoReagent)
       {
         Log["Message"]("Reagent type '"+reagentType+"' is not displayed in Tdef - Reagents");
         Log["PopLogFolder"]();
         return true;
       }    
   }
   else
   {
     Log["Error"]("Ancillary and Diluent reagent grid not displayed/exist");
     Log["PopLogFolder"]();
     return false;
   } 
 }
 catch(e)
 {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
 }
}

//***************************************************************************************
//*   Function Name        : VerifyPrimaryReagentDetails()
//*   Function Description : This function is used to verify the given values are
//                           displayed in Primary reagent grid
//*   Input                : reagentName,reagentCode,solidWell,solidVolume,liteWell,liteVolume,ancillaryWell,ancillaryVolume 
//*   Output               : return true, if the given values are displayed in UI
//*                          return false, if the given values are not displayed in UI
//*   Created By           : Suresh Kumar
//*   Created Date         :  -
//*   Modified By          : Suresh Kumar
//*****************************************************************************************
function VerifyPrimaryReagentDetails(reagentName,reagentCode,solidWell,solidVolume,liteWell,liteVolume,ancillaryWell,ancillaryVolume)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary reagent details for reagentName '"+reagentName+"',reagentCode '"+reagentCode+"',solidWell '"+solidWell+"',solidVolume '"+solidVolume+"',liteWell '"+liteWell+"',liteVolume '"+liteVolume+"',ancillaryWell '"+ancillaryWell+"',ancillaryVolume '"+ancillaryVolume+"'");

    //Verify Primary reagents grid displayed
    if(!isPrimaryReagentsGridDisplayed())
    {
     Log["Error"]("Primary reagents grid not displayed");
     Log["PopLogFolder"]();
     return false; 
    }
    
    //Verify primary reagent name
    if(!VerifyPrimaryReagentName(reagentName))
    {
      Log["Error"]("Failed to verify if the primary reagent displays Asssay name '"+reagentName);
      Log["PopLogFolder"]();
      return false;
    }
    
    //Verify primary reagent code
    if(!VerifyPrimaryReagentCode(reagentCode))
    {
      Log["Error"]("Failed to verify if the primary reagent displays Reagent code '"+reagentCode);
      Log["PopLogFolder"]();
      return false;
    }
    
    //if solid well given
    if(solidWell != undefined)
    {
       //Verify Solid Well
       if(!VerifyPrimaryReagentSolidWell(solidWell))
       {
         Log["Error"]("Failed to verify if the primary reagent displays Solid well '"+solidWell);
         Log["PopLogFolder"]();
         return false;
       }
    }
    
    //if solid volume given
    if(solidVolume != undefined)
    {
       //Verify solid volume
       if(!VerifyPrimaryReagentSolidVolume(solidVolume))
       {
         Log["Error"]("Failed to verify if the primary reagent displays Solid Volume '"+solidVolume);
         Log["PopLogFolder"]();
         return false;
       }
    }
    
    //if lite well given 
    if(liteWell != undefined)
    {
       //Verify Lite well displayed
       if(!VerifyPrimaryReagentLiteWell(liteWell))
       {
         Log["Error"]("Failed to verify if the primary reagent displays Lite Well '"+liteWell);
         Log["PopLogFolder"]();
         return false;
       }
    }
    
     //if lite Volume given 
    if(liteVolume != undefined)
    {
       //Verify Lite volume displayed
       if(!VerifyPrimaryReagentLiteVolume(liteVolume))
       {
         Log["Error"]("Failed to verify if the primary reagent displays Lite volume '"+liteVolume);
         Log["PopLogFolder"]();
         return false;
       }
    }
      
     //if Ancillary Volume given 
    if(ancillaryWell != undefined)
    {
       //Verify Ancillary volume displayed
       if(!VerifyPrimaryReagentAncillaryWell(ancillaryWell))
       {
         Log["Error"]("Failed to verify if the primary reagent displays Ancillary well '"+ancillaryWell);
         Log["PopLogFolder"]();
         return false;
       }
    }
    
     //if Ancillary Volume given 
    if(ancillaryVolume != undefined)
    {
       //Verify Ancillary volume displayed
       if(!VerifyPrimaryReagentAncillaryVolume(ancillaryVolume))
       {
         Log["Error"]("Failed to verify if the primary reagent displays Ancillary volume '"+ancillaryVolume);
         Log["PopLogFolder"]();
         return false;
       }
    }
      
    Log["Message"]("Primary reagent details verified");
    Log["PopLogFolder"]();
    return true;
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentName(reagentName)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent name :" + reagentName);

    //get reagentname dropdown ctrl
    var reagentNameDropDownCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","dropDownPrimaryReagentName");
      
    //get reagent name ctrl
    var reagentNameCtrl = Getchild(reagentNameDropDownCtrl,"AutomationId","PART_TextBox");
      
    //get reagent name
    var currentReagentName = reagentNameCtrl["Text"]
      
    //verify displayed reagent name is as expected
    if(currentReagentName = reagentName)
    {
      Log["Message"](currentReagentName + " is displayed as Reagent name");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Displayed Reagent Name : "+currentReagentName);
      Log["Error"]("Expected Reagent Name : "+reagentName);
      Log["PopLogFolder"]();
      return false;
    } 
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentCode(reagentCode)
{
  try{
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Code :" +reagentCode);  

    //Get primary reagent code control
    var primaryReagentCodeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","txtPrimaryReagentCode");
    
    //Get displayed reagent code
    var CurrentPrimaryReagentCode;
    CurrentPrimaryReagentCode = Getchild(primaryReagentCodeCtrl,"ClassName","TextBox");
    
    if(!CurrentPrimaryReagentCode)
    {
      CurrentPrimaryReagentCode = Getchild(primaryReagentCodeCtrl,"AutomationId","lblValue");
    }

    var primaryReagentCode = CurrentPrimaryReagentCode["Text"]
    
    //Verify displayed reagent code is as expected
    if(primaryReagentCode == reagentCode)
    {
      Log["Message"](reagentCode + " is displayed as Reagent Code");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Displayed Reagent Code : "+primaryReagentCode+"");
      Log["Error"]("Expected Reagent Code : "+reagentCode+"");
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e){
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentSolidWell(solidWell)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Solid Well : '"+solidWell+"'");  

    //Get solid well control
    var solidWellCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","txtBoxSolidWell");
    
    //Get solid well txt control
    var solidWellTxtCtrl = Getchild(solidWellCtrl,"AutomationId","lblValue");
    
    //get displayed solid well count
    var currentSolidWellTxt = GetNativeObjectName(solidWellTxtCtrl);
    
    //verify displayed solid well count is as expected
    if(currentSolidWellTxt == solidWell)
    {
      Log["Message"](currentSolidWellTxt + " is displayed as Solid Well");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Displayed Solid Well : "+currentSolidWellTxt);
      Log["Error"]("Expected Solid Well : "+solidWell);
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentSolidVolume(solidVolume)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Solid Volume :"+solidVolume);  

    //Get solid volume control
    var solidVolumeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","txtSolidVolume");
    
    //get current solid volume
    var currentSolidVolume = solidVolumeCtrl["Text"];
    
    //Verify displayed Solid volume is as expected
    if(currentSolidVolume == solidVolume)
    {
      Log["Message"](currentSolidVolume + " is displayed as Solid Volume");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Displayed Solid Volume : "+currentSolidVolume);
      Log["Error"]("Expected Solid Volume : "+solidVolume);
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentLiteWell(liteWell)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Lite Well :"+liteWell);  
    
    //Get lite well combobox control
    var liteWellComboBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","comboBoxReagentLiteWell")  
    
    //Get the selected lite well from combo box
    var currentLiteWell = liteWellComboBoxCtrl["Selection"];
    
    //Verify the selected Lite well is the expected
    if(currentLiteWell == null && liteWell == 0)
    {
      Log["Message"]("Lite well dropdown didn't have anything selected as expected");
      Log["PopLogFolder"]();
      return true;
    }
    else if(aqString["Find"](currentLiteWell.toArray()[0],liteWell) != -1)
    {
      Log["Message"](currentLiteWell.toArray()[0] + " is selected as Lite Well");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Displayed Lite Well : "+currentLiteWell.toArray()[0]);
      Log["Error"]("Expected Lite Well : "+liteWell);
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentLiteVolume(liteVolume)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Lite Volume :"+liteVolume);  
    
    //Get lite volume txt control
    var liteVolumetxtCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","txtReagentLiteVolume");
    
    //Get Lite volume displayed
    var currentLiteVolumetxt = liteVolumetxtCtrl["Text"];
    
    //Verify if current lite volume is as expected
    if(currentLiteVolumetxt == liteVolume)
    {
      Log["Message"](currentLiteVolumetxt + " is selected as Lite Volume");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Displayed Lite Volume : "+currentLiteVolumetxt);
      Log["Error"]("Expected Lite Volume : "+liteVolume);
      Log["PopLogFolder"]();
      return false;
    }  
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentAncillaryWell(ancillaryWell)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Ancillary Well :"+ancillaryWell);  
    
    //Get Ancillary Well control
    var ComboBoxAncillaryWellCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","ComboBoxAncillaryWell");
    
    //Get the selected Ancillary well from combo box
    var currentAncillaryWell = ComboBoxAncillaryWellCtrl["Selection"];
    
    if(currentAncillaryWell == undefined)  //Optional check, don't fail if nothing is selected
    {
      Log["Message"]("Ancilarry well is unselected");
      Log["PopLogFolder"]();
      return true; 
    }
    //Verify the selected Lite well is the expected
    else if(aqString["Find"](currentAncillaryWell.toArray()[0],ancillaryVolume) != -1)
    {
      Log["Message"](currentAncillaryWell + " is selected as Ancillary Well");
      Log["PopLogFolder"]();
      return true;
    }
    else //Only fail when some other value other than expected and empty is selected
    {
      Log["Error"]("Displayed Ancillary Well : "+currentAncillaryWell);
      Log["Error"]("Expected Ancillary Well : "+ancillaryWell);
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyPrimaryReagentAncillaryVolume(ancillaryVolume)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Primary Reagent Ancillary Volume :"+ancillaryVolume);  
    
    //get ancillary volume control
    var txtBoxAncillaryVolumeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","txtBoxAncillaryVolume");
    
    //Get displayed ancillary volume
    var currentAncillaryVolume = txtBoxAncillaryVolumeCtrl["Text"];
    
    //Verify displayed ancillary volume equals expected
    if(currentAncillaryVolume == ancillaryVolume)
    {
      Log["Message"](currentAncillaryVolume + " is displayed as Ancillary Volume");
      Log["PopLogFolder"]();
      return true;
    }
    else if(currentAncillaryVolume == "0")
    {
      Log["Message"]("Displayed Ancillary volume is 0");
      Log["PopLogFolder"]();
      return true; 
    }
    else
    {
      Log["Error"]("Displayed Ancillary volume : "+currentAncillaryVolume);
      Log["Error"]("Expected Ancillary volume : "+ancillaryVolume);
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

//***************************************************************************************
//*   Function Name        : VerifyAncillaryAndDiluentDetails()
//*   Function Description : This function is used to verify the given values are
//                           displayed in Ancillary and Diluent grid
//*   Input                : reagentType,reagentName,productCode,obsTrigger,Volume 
//*   Output               : return true, if the given values are displayed in UI
//*                          return false, if the given values are not displayed in UI
//*   Created By           : Suresh Kumar
//*   Created Date         :  -
//*   Modified By          : Suresh Kumar
//*****************************************************************************************
function VerifyAncillaryAndDiluentDetails(reagentType,reagentName,productCode,obsTrigger,Volume)//,obsUsage)
{
  try
  { 
   Log["AppendFolder"]("Tdef - Reagents :: Verify "+reagentType+" reagent details");  
    
   //Get Ancilarray and Diluent data grid control
   var ancDilGridCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","gridAncillaryDiluent");
   
   //Verify Ancillary and Diluent Data grid exist
   if(VerifyObjectExists(ancDilGridCtrl))
   {
      
      //get the row details from the datagrid    
      var rowDetails = GetSFGridRowDetails(ancDilGridCtrl);
    
      //Verify the grid had data
      if(!rowDetails)
      {
        Log["Error"]("Ancillary & Diluent reagent grid is empty");
        Log["PopLogFolder"]();
        return false;
      }

       var isAllVerified = false;

       for(var rowIndex = 0;rowIndex<rowDetails.length; i++)
       {
         var rowParent = rowDetails[rowIndex];
         
         //Get reagent Type control
         var reagentTypeCtrl = Getchild(rowParent,"AutomationId","ComboAncillaryReagentStrType");
                   
         var displayedReagentTypeCtrl = Getchild(reagentTypeCtrl,"ClassName","ComboBoxItem");
         
         var displayedReagentType = GetNativeObjectName(displayedReagentTypeCtrl);
         
         //Get reagent name control
         var reagentNameCtrl = Getchild(rowParent,"AutomationId","CustTxtBoxImReagName");
         
         var displayedreagentNameCtrl = Getchild(reagentNameCtrl,"AutomationId","CustomText")
         
         var displayedReagentName = displayedreagentNameCtrl["Text"]
         
         //Get product code control
         var productCodeCtrl = Getchild(rowParent,"AutomationId","CudstTxtBoxImReagCode");
         
         var displayedproductCodeCtrl = Getchild(productCodeCtrl,"AutomationId","CustomText")
         
         var displayedProductCode = displayedproductCodeCtrl["Text"];
         
         //get obs trigger control
         var obsTriggerCtrl = Getchild(rowParent,"AutomationId","ComboImReagStabilityTrigger");
         
         var displayedobsTriggerCtrl = Getchild(obsTriggerCtrl,"AutomationId","ContentPresenter")
         
         var displayedObsTrigger = GetNativeObjectName(displayedobsTriggerCtrl);
         
         //get reagent volume control
         var reagentVolumeCtrl = Getchild(rowParent,"AutomationId","CustTxtBoxImReagVolume");
         
         var displayedreagentVolumeCtrl = Getchild(reagentVolumeCtrl,"AutomationId","CustomText")
         
         var displayedreagentVolume = displayedreagentVolumeCtrl["Text"];
         
         
         //Verify reagent Type is as expected        
         if((aqString["Find"](displayedReagentType,reagentType) != -1) && (displayedReagentName == reagentName) && (displayedProductCode == productCode) && (aqString["Find"](displayedObsTrigger,obsTrigger["split"]("_")[1],0,false) != -1) && (displayedreagentVolume == Volume))
         {
           isAllVerified = true;
           break;
         }         
       }
       
       //Verify all details are verifed
       if(!isAllVerified)
       {
         Log["Message"]("Reagent with reagent type '"+reagentType+"', reagent name '"+reagentName+"', productCode '"+productCode+"', obsTrigger '"+obsTrigger+"' and volume '"+Volume+"' is not displayed");
         Log["PopLogFolder"]();
         return false;
       }
       else
       {
         Log["Message"]("Reagent with reagent type '"+reagentType+"', reagent name '"+reagentName+"', productCode '"+productCode+"', obsTrigger '"+obsTrigger+"' and volume '"+Volume+"' is displayed");
         Log["PopLogFolder"]();
         return true;
       }
    }
    else
    {
      Log["Error"]("Ancillarry and Diluent reagent grid is not displayed/exist");
      Log["PopLogFolder"]();
      return false;
    }
    
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyReagentCalCode(calCode)
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Cal Code '"+calCode+"' is displayed"); 
    
    //Verify Primary reagents grid displayed
    if(!isPrimaryReagentsGridDisplayed())
    {
     Log["Error"]("Primary reagents grid not displayed");
     Log["PopLogFolder"]();
     return false; 
    }
      
    //Get cal code control
    var txtCalCodeCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","txtReagentCalCode");
    
    var currentCalCodeCtrl;
    currentCalCodeCtrl = Getchild(txtCalCodeCtrl,"ClassName","TextBox")
    
    if(!currentCalCodeCtrl)
    {
      currentCalCodeCtrl = Getchild(txtCalCodeCtrl,"AutomationId","lblValue")
    }
      
    //Get current cal code text
    var currentCalCode = currentCalCodeCtrl["Text"];
    
    //Verify current cal code is as expected
    if(aqConvert["StrToInt"](currentCalCode) == aqConvert["StrToInt"](calCode))
    {
      Log["Message"](currentCalCode + " is displayed as Cal Code");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Error"]("Displayed Cal Code : "+currentCalCode);
      Log["Error"]("Expected Cal Code : "+calCode);
      Log["PopLogFolder"]();
      return false;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

function VerifyReagentUseForInventoryIsSelected()
{
  try
  {
    Log["AppendFolder"]("Tdef - Reagents :: Verify Use For Inventory Is Selected");
    
    //Verify Primary reagents grid displayed
    if(!isPrimaryReagentsGridDisplayed())
    {
     Log["Error"]("Primary reagents grid not displayed");
     Log["PopLogFolder"]();
     return false; 
    }
    
    //Get use for inventory check box control  
    var useForInventoryCheckBoxCtrl = GetAutomationIDControl("HowDoI_AssaySetup_Reagents","checkBoxUseForInventory");
    
    //get toggle state of use for inventory checkbox control
    var useForInventoryCheckBox = GetToggleState(useForInventoryCheckBoxCtrl);
    
    //Check if the checkbox is selected
    if(useForInventoryCheckBox == "1")
    {
      Log["Message"]("Use for Inventory checkbox is selected");
      Log["PopLogFolder"]();
      return true;
    }
    else
    {
      Log["Message"]("Use for inventory is not selected");
      Log["PopLogFolder"]();
      return true;
    }
  }
  catch(e)
  {
    Log["Error"]("Exception : " + e["description"]);
    Log["PopLogFolder"]();
    return false;
  }
}

